<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog My Minds</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://fanchao01.github.io/blog/"/>
  <updated>2016-11-13T05:49:23.302Z</updated>
  <id>http://fanchao01.github.io/blog/</id>
  
  <author>
    <name>FanChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python源码剖析-字节码和虚拟机</title>
    <link href="http://fanchao01.github.io/blog/2016/11/13/python-pycode_and_frame/"/>
    <id>http://fanchao01.github.io/blog/2016/11/13/python-pycode_and_frame/</id>
    <published>2016-11-13T08:00:00.000Z</published>
    <updated>2016-11-13T05:49:23.302Z</updated>
    
    <content type="html"><![CDATA[<p>Python会将代码先编译成字节码，然后在虚拟机中动态得依次解释执行字节码。编译好的字节码存储在硬盘中以<code>.pyc</code>、<code>.pyd</code>等为扩展名。而在运行态，这些字节码会作为Python的一种对象<code>PyCodeObject</code>存在。<code>PyCodeObject</code>可以理解为C语言中的文本段，用于存储编译后的字节码、调试信息、常量值、变量名等。</p>
<p>本文不会讲述代码如何一步步编译成<code>PyCodeObject</code>，只会简单介绍<code>PyCodeObject</code>中各个域的含义，而把重点放在介绍Python的虚拟机和执行流。</p>
<h2 id="Python中的伪码PyCodeObject"><a href="#Python中的伪码PyCodeObject" class="headerlink" title="Python中的伪码PyCodeObject"></a>Python中的伪码PyCodeObject</h2><hr>
<p><code>PyCodeObject</code>保存代编译后的静态信息，在运行时再结合上下文形成一个完整的运行态环境。让我们看看静态编译后的信息都有哪些。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    <span class="keyword">int</span> co_argcount;    <span class="comment">// co_argcount 参数，不包括不定参数</span></div><div class="line">    <span class="keyword">int</span> co_nlocals;		<span class="comment">// co_nlocals 变量个数，co_argcount + </span></div><div class="line">                        <span class="comment">// 可变参数个数 + co_kwonlyargcount(py3.0) + 局部变量个数</span></div><div class="line">    <span class="keyword">int</span> co_stacksize;   <span class="comment">// 栈的大小 (编译后需要的最大栈深度) </span></div><div class="line">    <span class="keyword">int</span> co_flags;		<span class="comment">// PyCodeObject的一些标志位，用来优化运行时的性能</span></div><div class="line">    PyObject *co_code;		<span class="comment">// 编译后的字节码字符串</span></div><div class="line">    PyObject *co_consts;	<span class="comment">// 常量的列表</span></div><div class="line">    PyObject *co_names;		<span class="comment">// 常量中的字符串对象</span></div><div class="line">    PyObject *co_varnames;	<span class="comment">// 变量名字的元组</span></div><div class="line">    PyObject *co_freevars;	<span class="comment">// 自由变量的元组</span></div><div class="line">    PyObject *co_cellvars;      <span class="comment">// cell变量的元组</span></div><div class="line">    <span class="comment">/* The rest doesn't count for hash/cmp */</span></div><div class="line">    PyObject *co_filename;	<span class="comment">// 文件名</span></div><div class="line">    PyObject *co_name;		<span class="comment">// 对象的名字，例如函数的名字、类的名字等</span></div><div class="line">    <span class="keyword">int</span> co_firstlineno;		<span class="comment">// 对应的代码在源码文件中的起始行号</span></div><div class="line">    PyObject *co_lnotab;	<span class="comment">// 伪码与行号的映射</span></div><div class="line">    <span class="keyword">void</span> *co_zombieframe;     <span class="comment">// 对于一些特殊情况下的优化</span></div><div class="line">    PyObject *co_weakreflist;   <span class="comment">// 支持弱引用</span></div><div class="line">&#125; PyCodeObject;</div></pre></td></tr></table></figure>
<p>其中有些域需要特别解释。</p>
<ul>
<li>co_flags 用来保存一些编译信息，主要用于优化工作。例如co_VARARGS(0x0004)表示有可变参数等，具体见code.h文件。</li>
<li>co_freevars 自由变量是一些在作用域内使用，但是没有在本作用域定义的变量。</li>
<li>co_cellvars 当前作用域定义，而在闭包等内部使用的变量。</li>
<li>co_lnotab 字节码的偏移值与对应的源码的行号的相对值。</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">字节码在co_code中的偏移值   真实行号 行号的偏移值</div><div class="line"><span class="number">0</span>                         <span class="number">1</span>       <span class="number">0</span> </div><div class="line"><span class="number">6</span>                         <span class="number">2</span>       <span class="number">1</span></div><div class="line"><span class="number">50</span>                        <span class="number">7</span>       <span class="number">5</span></div></pre></td></tr></table></figure>
<p>那么实际上<code>co_lnotab</code>记录的是(0, 0), (6, 1), (44, 5)，当然实际记录中没有括号。具体<code>偏移值</code>和真实行号的对应关系可以通过下面的算法计算出来。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// codeobject.c</span></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">PyCode_Addr2Line</span><span class="params">(PyCodeObject *co, <span class="keyword">int</span> addrq)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> size = PyString_Size(co-&gt;co_lnotab) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *p = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)PyString_AsString(co-&gt;co_lnotab);</div><div class="line">    <span class="keyword">int</span> line = co-&gt;co_firstlineno;</div><div class="line">    <span class="keyword">int</span> addr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (--size &gt;= <span class="number">0</span>) &#123;</div><div class="line">        addr += *p++;</div><div class="line">        <span class="keyword">if</span> (addr &gt; addrq)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        line += *p++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> line;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>co_code 记录编译后的字节码，以字符串的形式保存，而实际上就是数字。后面我们通过一个例子详细描述。</li>
</ul>
<h2 id="PyCodeObject的示例"><a href="#PyCodeObject的示例" class="headerlink" title="PyCodeObject的示例"></a>PyCodeObject的示例</h2><hr>
<p>先给定一个Python代码示例，然后打印出其中的各个域。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">import</span> dis</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(a, b=<span class="number">1</span>, *args, **kwargs)</span>:</span></div><div class="line">    c = <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(d, e=<span class="number">3</span>, *iargs, **ikwargs)</span>:</span></div><div class="line">        f = <span class="number">4</span></div><div class="line">        g = c</div><div class="line"></div><div class="line">    print(<span class="string">'inner--&gt;co_argcount        :'</span>, inner.__code__.co_argcount)</div><div class="line"><span class="comment">#    print('inner--&gt;co_kwonlyargcount  :', inner.__code__.co_kwonlyargcount)</span></div><div class="line">    print(<span class="string">'inner--&gt;co_nlocals         :'</span>, inner.__code__.co_nlocals)</div><div class="line">    print(<span class="string">'inner--&gt;co_stacksize       :'</span>, inner.__code__.co_stacksize)</div><div class="line">    print(<span class="string">'inner--&gt;co_flags           :'</span>, inner.__code__.co_flags)</div><div class="line">    print(<span class="string">'inner--&gt;co_code            :'</span>, inner.__code__.co_code)</div><div class="line">    print(<span class="string">'inner--&gt;co_consts          :'</span>, inner.__code__.co_consts)</div><div class="line">    print(<span class="string">'inner--&gt;co_names           :'</span>, inner.__code__.co_names)</div><div class="line">    print(<span class="string">'inner--&gt;co_varnames        :'</span>, inner.__code__.co_varnames)</div><div class="line">    print(<span class="string">'inner--&gt;co_freevars        :'</span>, inner.__code__.co_freevars)</div><div class="line">    print(<span class="string">'inner--&gt;co_cellvars        :'</span>, inner.__code__.co_cellvars)</div><div class="line">    print(<span class="string">'inner--&gt;co_filename        :'</span>, inner.__code__.co_filename)</div><div class="line">    print(<span class="string">'inner--&gt;co_name            :'</span>, inner.__code__.co_name)</div><div class="line">    print(<span class="string">'inner--&gt;co_firstlineno     :'</span>, inner.__code__.co_firstlineno)</div><div class="line">    print(<span class="string">'inner--&gt;co_lnotab          :'</span>, inner.__code__.co_lnotab)</div><div class="line">    </div><div class="line">print(<span class="string">'out--&gt;co_argcount        :'</span>, out.__code__.co_argcount)</div><div class="line"><span class="comment">#print('out--&gt;co_kwonlyargcount  :', out.__code__.co_kwonlyargcount)</span></div><div class="line">print(<span class="string">'out--&gt;co_nlocals         :'</span>, out.__code__.co_nlocals)</div><div class="line">print(<span class="string">'out--&gt;co_stacksize       :'</span>, out.__code__.co_stacksize)</div><div class="line">print(<span class="string">'out--&gt;co_flags           :'</span>, out.__code__.co_flags)</div><div class="line">print(<span class="string">'out--&gt;co_code            :'</span>, out.__code__.co_code)</div><div class="line">print(<span class="string">'out--&gt;co_consts          :'</span>, out.__code__.co_consts)</div><div class="line">print(<span class="string">'out--&gt;co_names           :'</span>, out.__code__.co_names)</div><div class="line">print(<span class="string">'out--&gt;co_varnames        :'</span>, out.__code__.co_varnames)</div><div class="line">print(<span class="string">'out--&gt;co_freevars        :'</span>, out.__code__.co_freevars)</div><div class="line">print(<span class="string">'out--&gt;co_cellvars        :'</span>, out.__code__.co_cellvars)</div><div class="line">print(<span class="string">'out--&gt;co_filename        :'</span>, out.__code__.co_filename)</div><div class="line">print(<span class="string">'out--&gt;co_name            :'</span>, out.__code__.co_name)</div><div class="line">print(<span class="string">'out--&gt;co_firstlineno     :'</span>, out.__code__.co_firstlineno)</div><div class="line">print(<span class="string">'out--&gt;co_lnotab          :'</span>, out.__code__.co_lnotab)</div><div class="line">print(<span class="string">'========================================================='</span>)</div><div class="line">out(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, e = <span class="number">8</span>, f = <span class="number">9</span>)</div><div class="line"></div><div class="line">print()</div><div class="line">print(<span class="string">'disamble:'</span>)</div><div class="line">print(dis.dis(out))</div></pre></td></tr></table></figure>
<p>需要先解释一下<code>co_kwonlyargcount</code>，这个域在<code>PY3</code>才有，用于支持在不定参数后定义的位置参数，例如<code>def func(*args, kwonly=None)</code>。</p>
<p>这个实例的输出可以看到对应的各个域的详细内容。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">out--&gt;co_argcount        : <span class="number">2</span>     <span class="comment"># a, b</span></div><div class="line">out--&gt;co_nlocals         : <span class="number">5</span>     <span class="comment"># a, b, c, d, e</span></div><div class="line">out--&gt;co_stacksize       : <span class="number">3</span>     </div><div class="line">out--&gt;co_flags           : <span class="number">65551</span> <span class="comment"># b'0b10000000000001111'  CO_FUTURE_PRINT_FUNCTION|CO_VARKEYWORDS|CO_VARARGS|CO_NEWLOCALS|CO_OPTIMIZED </span></div><div class="line">out--&gt;co_code            : ddfd&#125;t...  <span class="comment"># 部分省略，后续分析</span></div><div class="line">out--&gt;co_consts          : (None, <span class="number">2</span>, <span class="number">3</span>, &lt;code object inner&gt;, <span class="string">'inner--&gt;co_argcount        :'</span>, <span class="comment"># 省略其他'inner--&gt;')  # 常量值，这里添加了默认返回值None</span></div><div class="line">out--&gt;co_names           : (<span class="string">'print'</span>, <span class="string">'__code__'</span>, <span class="string">'co_argcount'</span>, <span class="string">'co_nlocals'</span>, <span class="string">'co_stacksize'</span>, <span class="string">'co_flags'</span>, <span class="string">'co_code'</span>, <span class="string">'co_consts'</span>, <span class="string">'co_names'</span>, <span class="string">'co_varnames'</span>, <span class="string">'co_freevars'</span>,<span class="string">'co_cellvars'</span>, <span class="string">'co_filename'</span>, <span class="string">'co_name'</span>, <span class="string">'co_firstlineno'</span>, <span class="string">'co_lnotab'</span>)  <span class="comment"># 常量名</span></div><div class="line">out--&gt;co_varnames        : (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'args'</span>, <span class="string">'kwargs'</span>, <span class="string">'inner'</span>)   <span class="comment"># 变量名字，包括参数变量和内部变量</span></div><div class="line">out--&gt;co_freevars        : ()                                      <span class="comment"># 无</span></div><div class="line">out--&gt;co_cellvars        : (<span class="string">'c'</span>,)                                  <span class="comment"># 用于给子作用域使用的变量</span></div><div class="line">out--&gt;co_filename        : pycode.py          </div><div class="line">out--&gt;co_name            : out</div><div class="line">out--&gt;co_firstlineno     : <span class="number">3</span>                                       <span class="comment"># 起始行号</span></div><div class="line">out--&gt;co_lnotab          :                                         <span class="comment"># 省略</span></div><div class="line">=========================================================</div><div class="line">inner--&gt;co_argcount        : <span class="number">2</span>                                     <span class="comment"># d, e</span></div><div class="line">inner--&gt;co_nlocals         : <span class="number">6</span>                                     <span class="comment"># d, e, iargs, ikwargs, f, g</span></div><div class="line">inner--&gt;co_stacksize       : <span class="number">1</span>                                     <span class="comment"># </span></div><div class="line">inner--&gt;co_flags           : <span class="number">65567</span>                                 <span class="comment"># '0b10000000000011111' CO_FUTURE_PRINT_FUNCTION|CO_NESTED |CO_VARKEYWORDS|CO_VARARGS|CO_NEWLOCALS|CO_OPTIMIZED</span></div><div class="line">inner--&gt;co_code            : d&#125;&#125;dS                                 <span class="comment"># 省略</span></div><div class="line">inner--&gt;co_consts          : (None, <span class="number">4</span>)                             <span class="comment"># 常量</span></div><div class="line">inner--&gt;co_names           : ()                                    <span class="comment">#</span></div><div class="line">inner--&gt;co_varnames        : (<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'iargs'</span>, <span class="string">'ikwargs'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>)   <span class="comment"># 变量名字</span></div><div class="line">inner--&gt;co_freevars        : (<span class="string">'c'</span>,)                                     <span class="comment"># 自由变量，引用的父作用域的变量</span></div><div class="line">inner--&gt;co_cellvars        : ()                                         <span class="comment"># 无</span></div><div class="line">inner--&gt;co_filename        : pycode.py</div><div class="line">inner--&gt;co_name            : inner</div><div class="line">inner--&gt;co_firstlineno     : <span class="number">6</span>                                          <span class="comment"># 起始行号</span></div><div class="line">inner--&gt;co_lnotab          :                                            <span class="comment"># 省略</span></div></pre></td></tr></table></figure>
<p>从这个例子中可以清楚了解常量、变量、自由变量以及cell变量的含义。接下来我们看下<code>co_code</code>的含义，使用linux的<code>xdd</code>工具将其转换成十六进制，并且使用<code>dis</code>模块反编译其字节码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dis</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(a, b=<span class="number">1</span>, *args, **kwargs)</span>:</span></div><div class="line">    c = <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(d, e=<span class="number">3</span>, *iargs, **ikwargs)</span>:</span></div><div class="line">        f = <span class="number">4</span></div><div class="line">        g = c</div><div class="line"></div><div class="line"><span class="keyword">print</span> out.__code__.co_code</div><div class="line">dis.dis(out)</div></pre></td></tr></table></figure>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># co_code的十六进制内容</div><div class="line"><span class="number">0000000</span>: <span class="number">6401 0089</span> <span class="number">0000 6402</span> <span class="number">0087 0000</span> <span class="number">6601 0064</span>  d.....d.....f..d</div><div class="line"><span class="number">0000010</span>: <span class="number">0300 8601</span> <span class="number">007d</span> <span class="number">0400 6400</span> <span class="number">0053</span> <span class="number">0</span>a         .....&#125;..d..S.</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 字节码的反编译</div><div class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="number">2</span>)</div><div class="line">              <span class="number">3</span> STORE_DEREF              <span class="number">0</span> (c)</div><div class="line"></div><div class="line">  <span class="number">6</span>           <span class="number">6</span> LOAD_CONST               <span class="number">2</span> (<span class="number">3</span>)</div><div class="line">              <span class="number">9</span> LOAD_CLOSURE             <span class="number">0</span> (c)</div><div class="line">             <span class="number">12</span> BUILD_TUPLE              <span class="number">1</span></div><div class="line">             <span class="number">15</span> LOAD_CONST               <span class="number">3</span> (&lt;code object inner at <span class="number">00000000039E69</span>B0, file <span class="string">"&lt;ipython-input-2-656e8bface8a&gt;"</span>, line <span class="number">6</span>&gt;)</div><div class="line">             <span class="number">18</span> MAKE_CLOSURE             <span class="number">1</span></div><div class="line">             <span class="number">21</span> STORE_FAST               <span class="number">4</span> (inner)</div><div class="line">             <span class="number">24</span> LOAD_CONST               <span class="number">0</span> (None)</div><div class="line">             <span class="number">27</span> RETURN_VALUE</div></pre></td></tr></table></figure>
<ul>
<li>十六进制的第一个为<code>64</code>值<code>100</code>，查阅<code>opcode.h</code>可以看到起对应的字节码<code>#define LOAD_CONST    100</code>，与反编译中的命令<code>LOAD_CONST</code>相符。</li>
<li>十六进制的第二个为<code>01</code>值<code>01</code>，对应的是字节码<code>LOAD_CONST</code>的参数<code>1</code>。</li>
<li>十六进制的第三个为<code>00</code>值<code>00</code>，此值表示<code>STOP_CDOE</code>，一个完整字节码的结束标志。</li>
</ul>
<p>同理可以解析接下来的字节码和对应的操作的含义。至此，我们明白字节码的格式为</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">字节码指令编号<span class="comment">(64)</span> 多个参数值<span class="comment">(1)</span> 结束标志<span class="comment">(00)</span></div></pre></td></tr></table></figure>
<p>到现在为止我们明白了字节码的数据结构、各域值的含义，<code>co_code</code>字节码的格式以及如何与操作命令对应。下面我们看看这些字节码如何运行。</p>
<h2 id="PyFrameObject"><a href="#PyFrameObject" class="headerlink" title="PyFrameObject"></a>PyFrameObject</h2><hr>
<p>Python模拟了C语言中的运行栈作为运行时的环境，每个栈用<code>PyFrameObject</code>结构表示。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_f</span>rame &#123;</div><div class="line">    PyObject_VAR_HEAD</div><div class="line">    <span class="keyword">struct</span> <span class="number">_f</span>rame *f_back;     <span class="comment">// 前一个运行栈，调用方</span></div><div class="line">    PyCodeObject *f_code;      <span class="comment">// 执行的PyCodeObject对象</span></div><div class="line">    PyObject *f_builtins;      <span class="comment">// builtins环境变量集合</span></div><div class="line">    PyObject *f_globals;       <span class="comment">// globals全局变量集合</span></div><div class="line">    PyObject *f_locals;        <span class="comment">// locals本地变量集合</span></div><div class="line">    PyObject **f_valuestack;   <span class="comment">// 栈起始地址，最后一个本地变量之后</span></div><div class="line">    PyObject **f_stacktop;     <span class="comment">// 栈针位置，指向栈中下一个空闲位置</span></div><div class="line">    PyObject *f_trace;         <span class="comment">// trace函数</span></div><div class="line">    PyObject *f_exc_type, *f_exc_value, *f_exc_traceback;  <span class="comment">// 记录异常处理</span></div><div class="line"></div><div class="line">    PyThreadState *f_tstate;   <span class="comment">// 当前的线程</span></div><div class="line">    <span class="keyword">int</span> f_lasti;		       <span class="comment">// 当前执行的字节码的地址</span></div><div class="line">    <span class="keyword">int</span> f_lineno;		       <span class="comment">// 当前的行号</span></div><div class="line">    <span class="keyword">int</span> f_iblock;		       <span class="comment">// 一些局部block块</span></div><div class="line">    PyTryBlock f_blockstack[CO_MAXBLOCKS]; <span class="comment">/* for try and loop blocks */</span></div><div class="line">    PyObject *f_localsplus[<span class="number">1</span>];	<span class="comment">// 栈地址，大小为 本地变量+co_stacksize</span></div><div class="line">&#125; PyFrameObject;</div></pre></td></tr></table></figure>
<p>对应的结构图</p>
<p><img src="/blog/images/python_frame_structure.png" alt="image"></p>
<p>当执行函数调用时会进入新的栈帧，那么当前栈帧就作为下一个栈帧的<code>f_back</code>字段。</p>
<p><img src="/blog/images/python_frame_link.png" alt="image"></p>
<p>多个栈帧链属于一个线程，而同时可能存在多个线程，每个线程拥有一个栈帧链。这样形成了Python的虚拟机运行环境。</p>
<p><img src="/blog/images/python_runtime_env.png" alt="image"></p>
<h2 id="Python执行字节码"><a href="#Python执行字节码" class="headerlink" title="Python执行字节码"></a>Python执行字节码</h2><hr>
<p>字节码的执行就像上图所示，由一个大的循环和选择语句构成，逻辑骨干比较简单。</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(;;;) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span>(opcode) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="number">100</span>:   <span class="meta"># LOAD_CONST</span></div><div class="line">    &#123;</div><div class="line">      x = POP()</div><div class="line">      ...    <span class="comment">// 执行的具体操作</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="number">101</span>:   <span class="meta"># LOAD_NAME</span></div><div class="line">    &#123;</div><div class="line">      ...</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>接下来，我们通过反编译代码追踪其如何一步步执行。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 字节码的反编译</div><div class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="number">2</span>)</div><div class="line">              <span class="number">3</span> STORE_DEREF              <span class="number">0</span> (c)</div><div class="line"></div><div class="line">  <span class="number">6</span>           <span class="number">6</span> LOAD_CONST               <span class="number">2</span> (<span class="number">3</span>)</div><div class="line">              <span class="number">9</span> LOAD_CLOSURE             <span class="number">0</span> (c)</div><div class="line">             <span class="number">12</span> BUILD_TUPLE              <span class="number">1</span></div><div class="line">             <span class="number">15</span> LOAD_CONST               <span class="number">3</span> (&lt;code object inner at <span class="number">00000000039E69</span>B0, ...&gt;)</div><div class="line">             <span class="number">18</span> MAKE_CLOSURE             <span class="number">1</span></div><div class="line">             <span class="number">21</span> STORE_FAST               <span class="number">4</span> (inner)</div><div class="line">             <span class="number">24</span> LOAD_CONST               <span class="number">0</span> (None)</div><div class="line">             <span class="number">27</span> RETURN_VALUE</div></pre></td></tr></table></figure>
<p>通过追踪每个指令码的执行过程以及对应的<code>PyFrameObject</code>的栈帧变化，可以一步步看到虚拟机的执行过程。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function">PyObject *</span></div><div class="line"><span class="title">PyEval_EvalFrame</span><span class="params">(PyFrameObject *f)</span> &#123;</div><div class="line"></div><div class="line">    co = f-&gt;f_code;</div><div class="line">    names = co-&gt;co_names;</div><div class="line">    consts = co-&gt;co_consts;</div><div class="line">    fastlocals = f-&gt;f_localsplus;</div><div class="line">    <span class="comment">// freevars在内存中对应的不是f-&gt;f_freevars，而是f-&gt;f_cellvars</span></div><div class="line">    freevars = f-&gt;f_localsplus + co-&gt;co_nlocals;</div><div class="line">    first_instr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*) PyString_AS_STRING(co-&gt;co_code);</div><div class="line">    <span class="comment">// f-&gt;f_lasti默认值为-1</span></div><div class="line">    next_instr = first_instr + f-&gt;f_lasti + <span class="number">1</span>;</div><div class="line">    <span class="comment">// 执行栈顶</span></div><div class="line">    stack_pointer = f-&gt;f_stacktop;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">    </div><div class="line">        fast_next_opcode:</div><div class="line">            f-&gt;f_lasti = INSTR_OFFSET();</div><div class="line">        </div><div class="line">            opcode = NEXTOP();    <span class="comment">// 获取字节码</span></div><div class="line">            oparg = <span class="number">0</span>;   </div><div class="line">            <span class="keyword">if</span> (HAS_ARG(opcode))  <span class="comment">// 如果字节码有参数，获取参数</span></div><div class="line">                oparg = NEXTARG();</div><div class="line"></div><div class="line">            TARGET(LOAD_CONST)    <span class="comment">// 0, 6, 24 行反编译指令LOAD_CONST</span></div><div class="line">        &#123;</div><div class="line">            x = GETITEM(consts, oparg);   <span class="comment">// 从const中获取值压栈</span></div><div class="line">            Py_INCREF(x);</div><div class="line">            PUSH(x);                      </div><div class="line">            FAST_DISPATCH();              <span class="comment">// goto fast_next_opcode</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ...</div><div class="line">        </div><div class="line">        </div><div class="line">        TARGET(STORE_DEREF)        <span class="comment">// 3</span></div><div class="line">        &#123;</div><div class="line">            w = POP();                   <span class="comment">// 从栈中取值，设置为CellObejct的值</span></div><div class="line">            x = freevars[oparg];         </div><div class="line">            PyCell_Set(x, w);            </div><div class="line">            Py_DECREF(w);</div><div class="line">            DISPATCH();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>初始化以及分别执行<code>0</code>和<code>3</code>字节码的<code>PyFrameObject</code>结构变化。</p>
<ul>
<li>LOAD_CONST 将co_consts中对应的值压栈</li>
<li>STORE_DEREF 解引用，设置栈中的变量值</li>
</ul>
<p><img src="/blog/images/python_frame_run_1.jpg" alt="image"></p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">TARGET(LOAD_CLOSURE)       <span class="comment">// 9</span></div><div class="line">&#123;</div><div class="line">    x = freevars[oparg];     </div><div class="line">    Py_INCREF(x);</div><div class="line">    <span class="keyword">PUSH</span>(x);</div><div class="line">    <span class="keyword">if</span> (x != <span class="built_in">NULL</span>) DISPATCH();</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">TARGET(BUILD_TUPLE)       <span class="comment">// 12</span></div><div class="line">&#123;</div><div class="line">    x = PyTuple_New(oparg);      <span class="comment">// 创建一个元组，并且将栈中的元素设置为元组的元素</span></div><div class="line">    <span class="keyword">if</span> (x != <span class="built_in">NULL</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (; --oparg &gt;= <span class="number">0</span>;) &#123;</div><div class="line">            w = <span class="keyword">POP</span>();</div><div class="line">            PyTuple_SET_ITEM(x, oparg, w);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">PUSH</span>(x);</div><div class="line">        DISPATCH();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TARGET(MAKE_CLOSURE)     <span class="comment">// 18</span></div><div class="line">&#123;</div><div class="line">    v = <span class="keyword">POP</span>(); <span class="comment">/* code object */</span></div><div class="line">    x = PyFunction_New(v, f-&gt;f_globals);    <span class="comment">// 创建函数</span></div><div class="line">    Py_DECREF(v);</div><div class="line">    <span class="keyword">if</span> (x != <span class="built_in">NULL</span>) &#123;</div><div class="line">        v = <span class="keyword">POP</span>();</div><div class="line">        <span class="keyword">if</span> (PyFunction_SetClosure(x, v) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">/* Can't happen unless bytecode is corrupt. */</span></div><div class="line">            why = WHY_EXCEPTION;</div><div class="line">        &#125;</div><div class="line">        Py_DECREF(v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="built_in">NULL</span> &amp;&amp; oparg &gt; <span class="number">0</span>) &#123;</div><div class="line">        v = PyTuple_New(oparg);</div><div class="line">        <span class="keyword">if</span> (v == <span class="built_in">NULL</span>) &#123;</div><div class="line">            Py_DECREF(x);</div><div class="line">            x = <span class="built_in">NULL</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (--oparg &gt;= <span class="number">0</span>) &#123;</div><div class="line">            w = <span class="keyword">POP</span>();</div><div class="line">            PyTuple_SET_ITEM(v, oparg, w);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (PyFunction_SetDefaults(x, v) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">/* Can't happen unless</span></div><div class="line">               PyFunction_SetDefaults changes. */</div><div class="line">            why = WHY_EXCEPTION;</div><div class="line">        &#125;</div><div class="line">        Py_DECREF(v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">PUSH</span>(x);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>LOAD_CLOSURE 将freevars中的对象压栈</li>
<li>BUILD_TUPLE 用栈帧中的元素创建元组，并压栈</li>
<li>BUILD_CLOSURE 创建PyFunction对象，并设置其中的<code>f_closure</code>域</li>
</ul>
<p><img src="/blog/images/python_frame_run_2.jpg" alt="image"></p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">        </div><div class="line">        TARGET(STORE_FAST)     <span class="comment">// 21</span></div><div class="line">        &#123;</div><div class="line">            v = <span class="keyword">POP</span>();             <span class="comment">// 设置locals值</span></div><div class="line">            SETLOCAL(oparg, v);</div><div class="line">            FAST_DISPATCH();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        TARGET_NOARG(RETURN_VALUE)  <span class="comment">// 27</span></div><div class="line">        &#123;</div><div class="line">            retval = <span class="keyword">POP</span>();</div><div class="line">            why = WHY_RETURN;</div><div class="line">            <span class="keyword">goto</span> fast_block_end;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/blog/images/python_frame_run_3.jpg" alt="image"></p>
<ul>
<li>STORE_FAST 将栈中的一个元素设置到对应的本地变量域中</li>
<li>RETURN_VALUE return，并且设置退出原因<code>WHY_RETURN</code></li>
</ul>
<p>从上面的代码和过程图，整个代码的执行过程清楚的显现出来：）</p>
<p>(完）</p>
]]></content>
    
    <summary type="html">
    
      PyCodeObject与PyFrameObject之执行字节码
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>10X优化glance镜像下载速率</title>
    <link href="http://fanchao01.github.io/blog/2016/10/28/openstack-%E5%B0%86glance%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E5%8A%A0%E5%BF%AB10%E5%80%8D/"/>
    <id>http://fanchao01.github.io/blog/2016/10/28/openstack-将glance的下载速度加快10倍/</id>
    <published>2016-10-28T07:00:00.000Z</published>
    <updated>2016-11-13T05:43:51.169Z</updated>
    
    <content type="html"><![CDATA[<p>（将一年之前解决的问题再梳理下）</p>
<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>Glance是openstack中管理镜像的服务，主要用于上传和下载镜像文件，后端接各种存储服务。例如Ceph、sheepdog、本地磁盘等等，大致的逻辑如图。</p>
<p><img src="/blog/images/openstack_glance_flow.jpg" alt="img"></p>
<p>在用<code>sheepdog</code>作为存储后端的时候，发现下载速度非常慢只有10~20Mb/s，一般应该能够打满内网的千兆网卡达到100+Mb/s才对。在一番探究下终于找到问题所在。原来是<code>oslo_concurrency</code>与<code>evenlet</code>库不太匹配，导致数据在上图的管道中传输很慢造成的。</p>
<h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><p>为了去除<code>glance</code>服务其他代码的描述，可以将问题简化为使用<code>oslo_concurrency</code>下载本地文件，实验代码如下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> eventlet</div><div class="line"><span class="comment"># eventlet.monkey_patch()  # [1] 不使用eventlet  [2] 去掉注释使用eventlet</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> oslo_concurrency <span class="keyword">import</span> processutils</div><div class="line"></div><div class="line"></div><div class="line">start = time.time()</div><div class="line">data = processutils.execute(<span class="string">'cat /home/datafile'</span>, shell=<span class="keyword">True</span>)[<span class="number">0</span>]</div><div class="line">end = time.time()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'time: %f, data: %dM， speed: %d'</span> % (end-start, len(data)/<span class="number">1024</span>/<span class="number">1024</span>, len(data)/<span class="number">1024</span>/<span class="number">1024</span>/(end-start))</div></pre></td></tr></table></figure>
<p>分别执行[1][2]以及优化后的代码[3]</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@<span class="built_in">test</span>]<span class="comment"># python load.py                     # [1]</span></div><div class="line">time: 2.553961, data: 200M, speed: 78 M/s</div><div class="line"></div><div class="line">[root@<span class="built_in">test</span>]<span class="comment"># python load.py                     # [2]</span></div><div class="line">time: 15.442971, data: 200M, speed: 12 M/s</div><div class="line"></div><div class="line">[root@<span class="built_in">test</span>]<span class="comment"># python load.py                     # [3] 使用eventlet并优化代码后的测试</span></div><div class="line">time: 2.685989, data: 200M, speed: 74 M/s</div></pre></td></tr></table></figure>
<p>可以看到使用<code>eventlet</code>后速率降低到原来的1/6~1/7。优化代码后依旧使用<code>eventlet</code>，效率与不使用<code>eventlet</code>时基本持平，性能没有损耗。</p>
<p>在分析代码之前需要牢记一点。因为使用<code>eventlet</code>会导致相关模块都会被<code>patch</code>成<code>eventlet</code>对应的模块。而<code>evenlet</code>中对应模块的类又会继承原始Python模块中的类。所以，如果查看相关类的方法时，需先从<code>eventlet</code>对应的模块中的类中查找；如果找不到则到Python原始模块中查找。例如<code>subprocess</code>模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># eventlet/green/subprocess.py    # 被替换后的eventlet中的subprocess模块</span></div><div class="line"></div><div class="line"><span class="comment"># eventlet中的类继承原始subprocess中的Popen类</span></div><div class="line"><span class="comment"># 重载和封装对应的方法和属性</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Popen</span><span class="params">(subprocess_orig.Popen)</span>:</span>  </div><div class="line">    <span class="string">"""eventlet-friendly version of subprocess.Popen"""</span></div><div class="line">    <span class="comment"># We do not believe that Windows pipes support non-blocking I/O. At least,</span></div><div class="line">    <span class="comment"># the Python file objects stored on our base-class object have no</span></div><div class="line">    <span class="comment"># setblocking() method, and the Python fcntl module doesn't exist on</span></div><div class="line">    <span class="comment"># Windows. (see eventlet.greenio.set_nonblocking()) As the sole purpose of</span></div><div class="line">    <span class="comment"># this __init__() override is to wrap the pipes for eventlet-friendly</span></div><div class="line">    <span class="comment"># non-blocking I/O, don't even bother overriding it on Windows.</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> subprocess_orig.mswindows:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, args, bufsize=<span class="number">0</span>, *argss, **kwds)</span>:</span></div><div class="line">            self.args = args</div><div class="line">            <span class="comment"># Forward the call to base-class constructor</span></div><div class="line">            <span class="comment"># 调用原始的类初始化</span></div><div class="line">            <span class="comment"># self.stdout 设置为上图中管道的父进程的读端</span></div><div class="line">            <span class="comment"># self.stdin 设置为上图中管道的父进程的写端</span></div><div class="line">            subprocess_orig.Popen.__init__(self, args, <span class="number">0</span>, *argss, **kwds)  </div><div class="line">            <span class="comment"># Now wrap the pipes, if any. This logic is loosely borrowed from</span></div><div class="line">            <span class="comment"># eventlet.processes.Process.run() method.</span></div><div class="line">            <span class="keyword">for</span> attr <span class="keyword">in</span> <span class="string">"stdin"</span>, <span class="string">"stdout"</span>, <span class="string">"stderr"</span>:</div><div class="line">                pipe = getattr(self, attr)</div><div class="line">                <span class="comment"># 再次使用eventlet中的GreenPipe封装原始的pipe</span></div><div class="line">                <span class="keyword">if</span> pipe <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> type(pipe) == greenio.GreenPipe:</div><div class="line">                    wrapped_pipe = greenio.GreenPipe(pipe, pipe.mode, bufsize)</div><div class="line">                    setattr(self, attr, wrapped_pipe)</div><div class="line">        __init__.__doc__ = subprocess_orig.Popen.__init__.__doc__</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self, timeout=None, check_interval=<span class="number">0.01</span>)</span>:</span></div><div class="line">        <span class="comment"># Instead of a blocking OS call, this version of wait() uses logic</span></div><div class="line">        <span class="comment"># borrowed from the eventlet 0.2 processes.Process.wait() method.</span></div><div class="line">        <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            endtime = time.time() + timeout</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                status = self.poll()</div><div class="line">                <span class="keyword">if</span> status <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                    <span class="keyword">return</span> status</div><div class="line">                <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> time.time() &gt; endtime:</div><div class="line">                    <span class="keyword">raise</span> TimeoutExpired(self.args, timeout)</div><div class="line">                eventlet.sleep(check_interval)</div><div class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">if</span> e.errno == errno.ECHILD:</div><div class="line">                <span class="comment"># no child process, this happens if the child process</span></div><div class="line">                <span class="comment"># already died and has been cleaned up</span></div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span></div><div class="line">    wait.__doc__ = subprocess_orig.Popen.wait.__doc__</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> subprocess_orig.mswindows:</div><div class="line">        <span class="comment"># don't want to rewrite the original _communicate() method, we</span></div><div class="line">        <span class="comment"># just want a version that uses eventlet.green.select.select()</span></div><div class="line">        <span class="comment"># instead of select.select().</span></div><div class="line">        _communicate = FunctionType(</div><div class="line">            six.get_function_code(six.get_unbound_function(</div><div class="line">                subprocess_orig.Popen._communicate)),</div><div class="line">            globals())</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            _communicate_with_select = FunctionType(</div><div class="line">                six.get_function_code(six.get_unbound_function(</div><div class="line">                    subprocess_orig.Popen._communicate_with_select)),</div><div class="line">                globals())</div><div class="line">            _communicate_with_poll = FunctionType(</div><div class="line">                six.get_function_code(six.get_unbound_function(</div><div class="line">                    subprocess_orig.Popen._communicate_with_poll)),</div><div class="line">                globals())</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># Borrow subprocess.call() and check_call(), but patch them so they reference</span></div><div class="line"><span class="comment"># OUR Popen class rather than subprocess.Popen.</span></div><div class="line">call = FunctionType(six.get_function_code(subprocess_orig.call), globals())</div><div class="line">check_call = FunctionType(six.get_function_code(subprocess_orig.check_call), globals())</div></pre></td></tr></table></figure>
<p>下面回过头重新梳理<code>glance</code>中拉取数据的代码逻辑。</p>
<h2 id="subprocess惹的祸"><a href="#subprocess惹的祸" class="headerlink" title="subprocess惹的祸"></a>subprocess惹的祸</h2><hr>
<p><code>oslo_concurrency</code>使用了<code>subprocess</code>中的<code>Popen</code>类并且通过其中的<code>communicate</code>方法来进行管道的通信。大致逻辑如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> oslo_concurrency <span class="keyword">import</span> processutils</div><div class="line"></div><div class="line">processutils.execute(<span class="string">'cat datafile'</span>, shell=<span class="keyword">True</span>)  <span class="comment"># </span></div><div class="line"></div><div class="line"><span class="comment"># 调用该方法，此时该模块和方法已经被eventlet pacth</span></div><div class="line"><span class="comment"># 所以这个是eventlet中subprocess的Popen类</span></div><div class="line"></div><div class="line"><span class="comment"># 如何创建管道和fork子进程、以及子进程启动shell执行命令等过程忽略</span></div><div class="line">obj = subprocess.Popen(cmd,</div><div class="line">                       stdin=_PIPE,</div><div class="line">                       stdout=_PIPE,</div><div class="line">                       stderr=_PIPE,</div><div class="line">                       close_fds=close_fds,</div><div class="line">                       preexec_fn=on_preexec_fn,</div><div class="line">                       shell=shell,</div><div class="line">                       cwd=cwd,</div><div class="line">                       env=env_variables)</div><div class="line"><span class="comment"># 与这个管道通信获取返回的数据</span></div><div class="line"><span class="keyword">return</span> obj.communicate()[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>通过之前<code>eventlet</code>中的<code>subprocess</code>的<code>Popen</code>类的代码，我们知道<code>communicate</code>是原始<code>subprocess</code>的<code>communicate</code>方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 原始subprocess中的Popen类的communicate方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Popen</span><span class="params">(object)</span>:</span></div><div class="line">    ....</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">communicate</span><span class="params">(self, input=None)</span>:</span></div><div class="line">        <span class="string">"""Interact with process: Send data to stdin.  Read data from</span></div><div class="line">        stdout and stderr, until end-of-file is reached.  Wait for</div><div class="line">        process to terminate.  The optional input argument should be a</div><div class="line">        string to be sent to the child process, or None, if no data</div><div class="line">        should be sent to the child.</div><div class="line"></div><div class="line">        communicate() returns a tuple (stdout, stderr)."""</div><div class="line"></div><div class="line">        <span class="comment"># Optimization: If we are only using one pipe, or no pipe at</span></div><div class="line">        <span class="comment"># all, using select() or threads is unnecessary.</span></div><div class="line">        <span class="comment"># 由于只有stdout参数，所以跳过该逻辑</span></div><div class="line">        <span class="keyword">if</span> [self.stdin, self.stdout, self.stderr].count(<span class="keyword">None</span>) &gt;= <span class="number">2</span>:</div><div class="line">            stdout = <span class="keyword">None</span></div><div class="line">            stderr = <span class="keyword">None</span></div><div class="line">            <span class="keyword">if</span> self.stdin:</div><div class="line">                <span class="keyword">if</span> input:</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        self.stdin.write(input)</div><div class="line">                    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">if</span> e.errno != errno.EPIPE <span class="keyword">and</span> e.errno != errno.EINVAL:</div><div class="line">                            <span class="keyword">raise</span></div><div class="line">                self.stdin.close()</div><div class="line">            <span class="comment"># 这个self.stout已经被封装成了eventlet中的GreenPipe</span></div><div class="line">            <span class="comment"># 读取数据就是执行 self.stdout.read()</span></div><div class="line">            <span class="keyword">elif</span> self.stdout:</div><div class="line">                stdout = _eintr_retry_call(self.stdout.read)</div><div class="line">                self.stdout.close()</div><div class="line">            <span class="keyword">elif</span> self.stderr:</div><div class="line">                stderr = _eintr_retry_call(self.stderr.read)</div><div class="line">                self.stderr.close()</div><div class="line">            self.wait()</div><div class="line">            <span class="keyword">return</span> (stdout, stderr)</div><div class="line">        <span class="comment"># 调用_communicate</span></div><div class="line">        <span class="keyword">return</span> self._communicate(input)</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">def</span> <span class="title">_communicate_with_select</span><span class="params">(self, input)</span>:</span></div><div class="line">            read_set = []</div><div class="line">            write_set = []</div><div class="line">            stdout = <span class="keyword">None</span> <span class="comment"># Return</span></div><div class="line">            stderr = <span class="keyword">None</span> <span class="comment"># Return</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> self.stdin <span class="keyword">and</span> input:</div><div class="line">                write_set.append(self.stdin)</div><div class="line">            <span class="keyword">if</span> self.stdout:</div><div class="line">                read_set.append(self.stdout)</div><div class="line">                stdout = []</div><div class="line">            <span class="keyword">if</span> self.stderr:</div><div class="line">                read_set.append(self.stderr)</div><div class="line">                stderr = []</div><div class="line"></div><div class="line">            input_offset = <span class="number">0</span></div><div class="line">            <span class="keyword">while</span> read_set <span class="keyword">or</span> write_set:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    rlist, wlist, xlist = select.select(read_set, write_set, [])</div><div class="line">                <span class="keyword">except</span> select.error, e:</div><div class="line">                    <span class="keyword">if</span> e.args[<span class="number">0</span>] == errno.EINTR:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line">                    <span class="keyword">raise</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> self.stdin <span class="keyword">in</span> wlist:</div><div class="line">                    chunk = input[input_offset : input_offset + _PIPE_BUF]</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        bytes_written = os.write(self.stdin.fileno(), chunk)</div><div class="line">                    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">if</span> e.errno == errno.EPIPE:</div><div class="line">                            self.stdin.close()</div><div class="line">                            write_set.remove(self.stdin)</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            <span class="keyword">raise</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        input_offset += bytes_written</div><div class="line">                        <span class="keyword">if</span> input_offset &gt;= len(input):</div><div class="line">                            self.stdin.close()</div><div class="line">                            write_set.remove(self.stdin)</div><div class="line"></div><div class="line">                <span class="keyword">if</span> self.stdout <span class="keyword">in</span> rlist:</div><div class="line">                    <span class="comment"># 调用os.read进行读写</span></div><div class="line">                    data = os.read(self.stdout.fileno(), <span class="number">1024</span>)</div><div class="line">                    <span class="comment"># 直到没有数据返回</span></div><div class="line">                    <span class="keyword">if</span> data == <span class="string">""</span>:</div><div class="line">                        self.stdout.close()</div><div class="line">                        read_set.remove(self.stdout)</div><div class="line">                    stdout.append(data)</div><div class="line"></div><div class="line">                <span class="keyword">if</span> self.stderr <span class="keyword">in</span> rlist:</div><div class="line">                    data = os.read(self.stderr.fileno(), <span class="number">1024</span>)</div><div class="line">                    <span class="keyword">if</span> data == <span class="string">""</span>:</div><div class="line">                        self.stderr.close()</div><div class="line">                        read_set.remove(self.stderr)</div><div class="line">                    stderr.append(data)</div><div class="line"></div><div class="line">            <span class="keyword">return</span> (stdout, stderr)</div></pre></td></tr></table></figure>
<p>由于<code>self.stout</code>已经被<code>eventlet</code>封装成了<code>GreenPip</code>，因此其read方法需要查看<code>GreenPipe</code>。通过<code>GreenPipe</code>的初始化可以看到，传进来的原始的管道文件封装成了<code>_SocketDuckForFd</code>。而<code>GreenPipe</code>本身继承<code>_fileobjec</code>，其<code>read</code>方法也继承<code>_fileobject</code>。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/greenio/py2.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreenPipe</span><span class="params">(_fileobject)</span>:</span></div><div class="line"></div><div class="line">    __doc__ = greenpipe_doc</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f, mode=<span class="string">'r'</span>, bufsize=<span class="number">-1</span>)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(f, six.string_types + (int, file)):</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'f(ile) should be int, str, unicode or file, not %r'</span> % f)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> isinstance(f, six.string_types):</div><div class="line">            f = open(f, mode, <span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> isinstance(f, int):</div><div class="line">            fileno = f</div><div class="line">            self._name = <span class="string">"&lt;fd:%d&gt;"</span> % fileno</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            fileno = os.dup(f.fileno())</div><div class="line">            self._name = f.name</div><div class="line">            <span class="keyword">if</span> f.mode != mode:</div><div class="line">                <span class="keyword">raise</span> ValueError(<span class="string">'file.mode %r does not match mode parameter %r'</span> % (f.mode, mode))</div><div class="line">            self._name = f.name</div><div class="line">            f.close()</div><div class="line"></div><div class="line">        super(GreenPipe, self).__init__(_SocketDuckForFd(fileno), mode)</div><div class="line">        set_nonblocking(self)</div><div class="line">        self.softspace = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>最终调用的是<code>os.read</code>。这个逻辑比较复杂，可以归纳为基本的调用过程。</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">P<span class="function"><span class="title">open</span> -&gt;</span> <span class="function"><span class="title">eventlet</span>: subprocess.Popen -&gt;</span> <span class="function"><span class="title">python</span>:  subprocess.Popen -&gt;</span> stdout = GreePipe(pipe)</div><div class="line"></div><div class="line"><span class="function"><span class="title">communicate</span> -&gt;</span> <span class="function"><span class="title">eventlet</span>: communicate -&gt;</span> <span class="function"><span class="title">python</span>: communicate -&gt;</span> </div><div class="line"><span class="function"><span class="title">eventlet</span>: _communicate -&gt;</span> <span class="function"><span class="title">python</span>: _communicate -&gt;</span> <span class="function"><span class="title">python</span>: _communicate_with_select -&gt;</span> </div><div class="line">调用<span class="function"><span class="title">select</span>.select -&gt;</span> 调用os.read(self.stdout.fileno(), <span class="number">1024</span>)</div></pre></td></tr></table></figure>
<p>这里面的关键在于<code>select</code>和<code>os</code>也会被<code>eventlet</code>替换，实际调用的是<code>eventlet</code>中的<code>select</code>和<code>os</code>。<br><code>os.read</code>中的读大小已经固定成1024(<code>glance_store</code>中传入的参数没有作用了)，而<code>select.select</code>会将后续的请求提交给<code>eventlet</code>的<code>Hub</code>中心进行<code>epoll</code>，所以逻辑演变成</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">select</span>.select请求提交给Hub ----&gt;</span> <span class="function"><span class="title">epoll</span>发现stdout可读 -------&gt;</span> <span class="function"><span class="title">os</span>.read读取1024 -&gt;</span></div><div class="line">^                                                       </div><div class="line">^--------------------------&lt;---------------------------&lt;-------------------&lt;-</div></pre></td></tr></table></figure>
<p>每读取<code>1024</code>就将请求提交给<code>Hub</code>进行<code>epoll</code>，<code>epoll</code>发现管道中有读事件，则再次读取<code>1024</code>。这个循环读取<code>1024</code>和提交<code>epoll</code>请求消耗了大量的时间。</p>
<h2 id="验证逻辑"><a href="#验证逻辑" class="headerlink" title="验证逻辑"></a>验证逻辑</h2><p>通过在<code>data = os.read(self.stdout.fileno(), 1024)</code>下面打印日志验证该逻辑。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># python/subprocess.py</div><div class="line">class Popen(object);</div><div class="line">        ....</div><div class="line">        def _communicate_with_select(self, input):</div><div class="line">                if self.stdout in rlist:</div><div class="line">                    #data = os.read(self.stdout.fileno(), 104857600)</div><div class="line">                    data = os.read(self.stdout.fileno(), 1024)</div><div class="line">                    if data == "":</div><div class="line">                        self.stdout.close()</div><div class="line">                        read_set.remove(self.stdout)</div><div class="line">                    stdout.append(data)</div><div class="line">                    print 'read stdout: 1024'</div><div class="line">                    print 'path:', select.__file__</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@<span class="built_in">test</span>]<span class="comment"># python load.py</span></div><div class="line"><span class="built_in">read</span> stdout: 1024</div><div class="line">path: /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/eventlet-0.17.4-py2.7.egg/eventlet/green/select.pyc</div><div class="line"><span class="built_in">read</span> stdout: 1024</div><div class="line">path: /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/eventlet-0.17.4-py2.7.egg/eventlet/green/select.pyc</div></pre></td></tr></table></figure>
<p>结果证明<code>select</code>确实被替换成eventlet中的<code>select</code>;进行了大量的1024读取，假设读取1G的数据那么这个循环会高达100多万次(1024*1024)。</p>
<h2 id="优化程序"><a href="#优化程序" class="headerlink" title="优化程序"></a>优化程序</h2><hr>
<p>进行大量循环<code>1024</code>读取是耗时的根本原因，因此增加每次读取的数据量，减少循环就会优化性能[3]。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># python/subprocess.py</div><div class="line">class Popen(object);</div><div class="line">        ....</div><div class="line">        def _communicate_with_select(self, input):</div><div class="line">                if self.stdout in rlist:</div><div class="line">                    # 将一次读取数据量增大到100M</div><div class="line">                    data = os.read(self.stdout.fileno(), 104857600)</div><div class="line">                    #data = os.read(self.stdout.fileno(), 1024)</div><div class="line">                    if data == "":</div><div class="line">                        self.stdout.close()</div><div class="line">                        read_set.remove(self.stdout)</div><div class="line">                    stdout.append(data)</div></pre></td></tr></table></figure>
<p>这个就是最开始的[3]性能优化后的程序，确实提高了数据读取速率。</p>
<h2 id="给glance打补丁"><a href="#给glance打补丁" class="headerlink" title="给glance打补丁"></a>给glance打补丁</h2><hr>
<p>因为<code>_communicate_with_select</code>是Python的原始库的代码，因此不能直接修改。但是我们可以效仿<code>eventlet</code>给其打补丁。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># glance_store/_dirvers/sheepdog.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> eventlet</div><div class="line"></div><div class="line"><span class="comment"># 定义自己的_communicate_with_select函数。</span></div><div class="line"></div><div class="line"><span class="comment"># 除了一行之外其他代码复制标准库中的该函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_communicate_with_select</span><span class="params">(self, input)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.stdout <span class="keyword">in</span> rlist:</div><div class="line">        <span class="comment"># 每次读取的数据量换成glance_store中的配置sheepdog_store_chunck_size</span></div><div class="line">        data = os.read(self.stdout.fileno(), sheepdog_store_chunk_size)</div><div class="line">        <span class="comment">#data = os.read(self.stdout.fileno(), 1024)</span></div><div class="line">        <span class="keyword">if</span> data == <span class="string">""</span>:</div><div class="line">            self.stdout.close()</div><div class="line">            read_set.remove(self.stdout)</div><div class="line">            stdout.append(data)</div><div class="line">                    </div><div class="line"></div><div class="line"><span class="keyword">if</span> eventlet.is_monkey_patched(<span class="string">'subprocess'</span>):</div><div class="line">    subprocess.Popen._communicate_with_select = _communicate_with_select</div></pre></td></tr></table></figure>
<p>通过打补丁，<code>glance</code>的下载镜像速度能够打满千兆网卡到达100+M/s，是原来的5~10倍。</p>
]]></content>
    
    <summary type="html">
    
      如何更快的从glance上下载镜像
    
    </summary>
    
      <category term="openstack" scheme="http://fanchao01.github.io/blog/categories/openstack/"/>
    
    
  </entry>
  
  <entry>
    <title>如何反驳-HowToDisagree</title>
    <link href="http://fanchao01.github.io/blog/2016/10/26/notes-howtodisagree/"/>
    <id>http://fanchao01.github.io/blog/2016/10/26/notes-howtodisagree/</id>
    <published>2016-10-26T07:00:00.000Z</published>
    <updated>2016-10-26T10:00:45.282Z</updated>
    
    <content type="html"><![CDATA[<p>(今天看了王垠大神的<a href="http://www.yinwang.org/blog-cn/2016/10/25/argument" target="_blank" rel="external">&lt;如何赢得技术争论&gt;</a>，决定把保罗·格雷厄姆的旧篇<howtodisagre>翻出来整理下，同时也将自己对争论的理解好好整理下）</howtodisagre></p>
<p><img src="/blog/images/HowToDisagree_picture_tower.jpg" alt="image"></p>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><hr>
<p>本篇是对《HOW TO DISAGREE》的简单笔记和一些理解，原文来自于<code>paul graham</code>的<a href="http://www.paulgraham.com/disagree.html" title="HowToDisagree" target="_blank" rel="external">博客</a>，豆瓣有<a href="http://www.douban.com/note/291185421/" title="HowToDisagree_中文翻译_豆瓣" target="_blank" rel="external">中文翻译</a>，其中的图片也源自于此。</p>
<p>文章主要讨论反驳其他人时的一些形式（误区），例如辱骂、贴标签等。有些是反驳别人时需要避免的又是看待别人的反驳时需要小心的，有些是我们如何进行正确反驳的。总之，对待意见和评论，要看其论据是否合理而非结论论点。让我们一起看看这些典型的反驳形式(误区）：</p>
<h3 id="DH0-Name-calling-贴标签"><a href="#DH0-Name-calling-贴标签" class="headerlink" title="DH0.Name-calling 贴标签"></a>DH0.Name-calling 贴标签</h3><hr>
<p><code>Name-calling</code>可以翻译成<code>辱骂</code>或者<code>侮辱</code>，但是我觉的更恰当的翻译是<code>贴标签</code>。简单的字面意思就是用一个大家公知的有特殊含义的名字(name)来代称(calling)别人。文中指出了两种典型的辱骂式的反驳：</p>
<pre><code>你个臭同性恋
</code></pre><p>或者不是那么明显的：</p>
<pre><code>作者是个自以为是的半吊子
</code></pre><p>大多数情况下出于反驳对方的需要给对方贴上带有蔑称的标签。在网上经常我们看见的反对评论是：</p>
<pre><code>你个五毛党
你个美粉
真是个砖家
这个有奶就是娘的家伙
臭不要脸
你个婊子
...
</code></pre><p>这种贴标签式的反驳的主要表现就是，只有标签本身而没有摆出事实证据，除了表达反驳者的气愤之外没有丝毫价值。</p>
<h3 id="DH1-Ad-Hominem-人身攻击"><a href="#DH1-Ad-Hominem-人身攻击" class="headerlink" title="DH1.Ad Hominem 人身攻击"></a>DH1.Ad Hominem 人身攻击</h3><hr>
<p>排在金字塔第二位的是人身攻击，有时甚至比贴标签本身还要严重，比如一个参议员说参议员的工资比较低，有人会反驳攻击道：</p>
<pre><code>当然他会这么说，他就是个参议员
</code></pre><p>针对个人的身份而非观点进行反驳是非常有效的一种手段。相对的我们有个中国版本，公务员说公务员的工资低需要提高，我们很自然的反映是：</p>
<pre><code>我要是公务员，我也说公务员工资低
</code></pre><p>而不是仔细思考公务员工资低这个事实是否存在，如果存在是否有提高的必要。</p>
<p>但是，我发现矛盾的地方在于，如果提出建议的人的个人身份与事件完全相反时又会遇见这样的版本：</p>
<pre><code>他懂个屁，他就一农民工
你瞎操什么心，你又不是老板、大大、他爸、他妈...
</code></pre><p>当然，作者也发现了这种现象，并且表示不要忽略来自外面的声音，因为创新往往来自外旁观者。</p>
<h3 id="DH2-Responding-to-Tone-针对态度"><a href="#DH2-Responding-to-Tone-针对态度" class="headerlink" title="DH2.Responding to Tone 针对态度"></a>DH2.Responding to Tone 针对态度</h3><hr>
<p>接下来的层次，反驳者开始针对文章本身而非作者，其中最低级的形式是针对作者的态度（作者表达出来的情感），例如：</p>
<pre><code>我不敢相信作者对人工智能如此不屑一顾
</code></pre><p>或者，我们经常在网上看到这样的版本（水军们最喜欢的方式之一）：</p>
<pre><code>这么夸这个手机，软文吧！ （针对态度贴上标签）
</code></pre><p>反驳应该针对事情本身，而非作者表达的态度。而且态度是个很难界定的概念，一个人觉的强硬的态度对另外的人可能很温柔。当然，实际上很多表达观点的人会容易受到自身感官的影响，或者有的时候表达观点只是想表达自己的态度而已。</p>
<h3 id="DH3-Contradiction-反驳"><a href="#DH3-Contradiction-反驳" class="headerlink" title="DH3.Contradiction 反驳"></a>DH3.Contradiction 反驳</h3><hr>
<p>在这个层次，反驳者终于对别人真正说的内容进行反驳，而非针对怎样说的或者谁说的。这种反驳中最低级的形式是只表达了一个相反的个例，而很少或者没有支持的证据，还经常和DH2一起出现：</p>
<pre><code>我不敢相信作者对人工智能如此不屑一顾。人工智能是正统的科学理论。
</code></pre><p>这种反驳有时候会有用。陈述反例能够证明自己的正确性，如果有更多的证据支持会更好。</p>
<h3 id="DH4-Counterargument-驳斥观点"><a href="#DH4-Counterargument-驳斥观点" class="headerlink" title="DH4.Counterargument 驳斥观点"></a>DH4.Counterargument 驳斥观点</h3><hr>
<p>第四个层次确实表达出了正确的反对：驳斥观点。在这之上的层次可以忽略，因为什么也没有表达。驳斥观点确实证明了一些东西，它的问题是往往表述不清。反驳观点确实表达了反对意见，并且附有原因和证据。但普遍的情况是反驳的观点与原作者的观点稍微不同，结果两个人辩论了半天实际上说的不是一样的东西。</p>
<p>这种现象的实际发生，我觉的有时是因为反对而反对。为了表明反对者的立场或者站位，要明显反对对方的立场，那么对方说什么而反对者反驳什么也就无关紧要了。</p>
<p>简单来说，如果要驳斥对方的观点而又觉的对方的观点没有抓住事情的本质时，反驳方可以稍微偏离对方的观点，但是需要提前说清楚。</p>
<pre><code>我不太同意你的观点，因为我觉的你偏离了主题...
</code></pre><h3 id="DH5-Refutation-反驳原文"><a href="#DH5-Refutation-反驳原文" class="headerlink" title="DH5.Refutation 反驳原文"></a>DH5.Refutation 反驳原文</h3><hr>
<p>最令人信服的反驳方式是“针对原文反驳”。在现实中这种很少，因为这很伤筋费神。反驳层次是一个金字塔，越高级（正确）的反驳，现实中越少。</p>
<p>这种反驳，你必须引用原文找到“枪口”—认为不正确的部分—引用这部分并且解释为什么这部分是错误的。如果你反对对方，却找不到这种对方错误的部分，那么有可能你反对的只是你认为的假想敌。</p>
<p>“针对原文反驳”需要引用，但是引用原文并不总是意味反对是正确的。一些人会引用一些原文来证明他是在“针对原文反驳”，但实际上他可能DH3式的，甚至是DH0式的反驳。</p>
<p>我觉的还有另外一种情况就是断章取义，只引用部分有歧义的文章而去掉了背景。比如说，媒体工作者，特别是娱乐媒体工作者善于此道。</p>
<p>我们有一个正面的非常有名引用例证：</p>
<pre><code>吾生也有涯，而知也无涯。
</code></pre><p>用于告诫要好好学习，但是完整的句子是：</p>
<pre><code>吾生也有涯，而知也无涯。以有涯随无涯，殆己。
</code></pre><p>不论是为了反对别人，还是证明自己而引用都有断章取义的情况存在。</p>
<h3 id="DH6-Rrefuting-the-Central-Point-反驳核心观点"><a href="#DH6-Rrefuting-the-Central-Point-反驳核心观点" class="headerlink" title="DH6.Rrefuting the Central Point 反驳核心观点"></a>DH6.Rrefuting the Central Point 反驳核心观点</h3><hr>
<p>“引用原文反驳”的强弱会根据引用的反驳内容而不同，最强烈的形式是反对核心观点。</p>
<p>DH5这种很高级(正确）的反驳形式也可能出现问题。一些人会引用一些细枝末节、微不足道的错误来表达自己的反对。例如，引用一些错误的语法、不正确的标点符号等等。</p>
<p>真正的反驳需要针对对方的核心观点，需要指出对方的核心观点是什么：</p>
<pre><code>作者的主要观点是...，正如他说：

    原文引用

但这是错误的，因为...
</code></pre><p>不必要复述对方的核心观点，只要说明对方观点是什么并针对该观点进行反驳即可。</p>
<h3 id="反驳分层次的意义"><a href="#反驳分层次的意义" class="headerlink" title="反驳分层次的意义"></a>反驳分层次的意义</h3><hr>
<p>对反驳分层次，可以帮助人们评判其阅读的东西，并且能够帮助识别一些错误的反对形式，或者用正确的形式表达自己的反对意见。另外，对反驳分层次可以使辩论变的愉快，因为越低级的反驳形式刻薄的词语越多，反之而越少。</p>
<h3 id="对反驳（争论）的一些见解"><a href="#对反驳（争论）的一些见解" class="headerlink" title="对反驳（争论）的一些见解"></a>对反驳（争论）的一些见解</h3><hr>
<p>除去科学研究中很严肃的正确错误之分（大多数情况下正误也很有局限性），现实生活很难有严格的正确和错误，或者说能够在短时间内证明正误的事情。在这种情况下，反驳别人是非常无趣的。一个人反驳别人往往有几种情况：</p>
<p>第一种，反驳者为了表明立场。这种反驳（对原观点提出者）是没有意义的，因为当反驳者表达反对后，他的目的就达到了，他并不关心真正正确的是什么。这种情况在政治中很常见，例如，各种各样的公知辟谣等。</p>
<p>第二种，反驳者为了说服对方。每个已经形成独立观点的人的观念是很难被推翻的，因为这是他存在的基础（他为了生活而形成的处事方式），如果被说服，他的人生就崩溃了。或者，你需要摆出明显的强大的事实在他眼前，传说的、媒体上的、没有发生在眼前的几乎都没有作用。</p>
<p>第三种，反驳者为了反对而反对。这种形式往往隐藏着心理因素，例如反对者想表现自己、对反对本能的抵抗等。这种形式的反对没有任何意义，即不正确，也没有内涵。</p>
<p>第四种，被反驳者没有足够接受不同意见的修养。接受不同意见甚至是反对声音需要足够的修养和人格魅力，这种人非常之少。</p>
<p>因此，对待别人的观点需要看事实依据，任何对个人的不满、感情、身份等都不应该左右自己是否认同该观点。<br>对待别人的反驳也要看对方的反驳依据，任何对反驳的敌视、愤怒、固执都不应该左右自己是否认同该反驳。<br>反驳别人，以求真为基础，用事实和行为证明，还需看对方的修养，否则保留自己的意见即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(今天看了王垠大神的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/10/25/argument&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;lt;如何赢得技术争论&amp;gt;&lt;/a&gt;，决定把保罗·格雷厄姆的旧篇&lt;
    
    </summary>
    
      <category term="英文翻译" scheme="http://fanchao01.github.io/blog/categories/%E8%8B%B1%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Python源码剖析—Set容器</title>
    <link href="http://fanchao01.github.io/blog/2016/10/24/python-setobject/"/>
    <id>http://fanchao01.github.io/blog/2016/10/24/python-setobject/</id>
    <published>2016-10-24T07:00:00.000Z</published>
    <updated>2016-10-25T12:39:04.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python的Set容器"><a href="#Python的Set容器" class="headerlink" title="Python的Set容器"></a>Python的Set容器</h2><hr>
<p><code>set</code>与<code>List</code>对象相似，均为可变异构容器。但是其实现却和<code>Dict</code>类似，均为哈希表。具体的数据结构代码如下。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">long</span> hash;      <span class="comment">/* cached hash code for the entry key */</span></div><div class="line">    PyObject *key;</div><div class="line">&#125; setentry;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">This data structure is shared by set and frozenset objects.</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>setobject PySetObject;</div><div class="line"><span class="keyword">struct</span> <span class="number">_</span>setobject &#123;</div><div class="line">    PyObject_HEAD</div><div class="line"></div><div class="line">    Py_ssize_t fill;  <span class="comment">/* # Active + # Dummy */</span></div><div class="line">    Py_ssize_t used;  <span class="comment">/* # Active */</span></div><div class="line"></div><div class="line">    <span class="comment">/* The table contains mask + 1 slots, and that's a power of 2.</span></div><div class="line">     * We store the mask instead of the size because the mask is more</div><div class="line">     * frequently needed.</div><div class="line">     */</div><div class="line">    Py_ssize_t mask;</div><div class="line"></div><div class="line">    <span class="comment">/* table points to smalltable for small tables, else to</span></div><div class="line">     * additional malloc'ed memory.  table is never NULL!  This rule</div><div class="line">     * saves repeated runtime null-tests.</div><div class="line">     */</div><div class="line">    setentry *table;</div><div class="line">    setentry *(*lookup)(PySetObject *so, PyObject *key, <span class="keyword">long</span> hash);</div><div class="line">    setentry smalltable[PySet_MINSIZE];</div><div class="line"></div><div class="line">    <span class="keyword">long</span> hash;                  <span class="comment">/* only used by frozenset objects */</span></div><div class="line">    PyObject *weakreflist;      <span class="comment">/* List of weak references */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>setentry</code>是哈希表中的元素，记录插入元素的哈希值以及对应的Python对象。<code>PySetObject</code>是哈希表的具体结构：</p>
<ul>
<li><code>fill</code> 被填充的键的个数，包括Active和dummy，稍后解释具体意思</li>
<li><code>used</code> 被填充的键中有效的个数，即集合中的元素个数</li>
<li><code>mask</code> 哈希表的长度的掩码，数值为容量值减一</li>
<li><code>table</code> 存放元素的数组的指针</li>
<li><code>smalltable</code> 默认的存放元素的数组</li>
</ul>
<p>当元素较少时，所有元素只存放在<code>smalltable</code>数组中，此时<code>table</code>指向<code>smalltable</code>。当元素增多，会从新分配内存存放所有的元素，此时<code>smalltable</code>没有用，<code>table</code>指向新分配的内存。</p>
<p><img src="/blog/images/py_dict.png" alt="img"></p>
<p>哈希表中的元素有三种状态：</p>
<ol>
<li>active 元素有效，此时setentry.key != null &amp;&amp; != dummy</li>
<li>dummy 元素无效key=dummy，此插槽(slot)存放的元素已经被删除</li>
<li>NULL 无元素，此插槽从来没有被使用过</li>
</ol>
<p>dummy是为了表明当前位置存放过元素，需要继续查找。假设a和b元素具有相同的哈希值，所以b只能放在冲撞函数指向的第二个位置。先删除a，再去查找b。如果a被设置为NULL，那么无法确定b是不存在还是应该继续探查第二个位置，所以a只能被设置为dummy。查找b的过程中，第一个位置为dummy所以继续探查，直到找到b；或者直到NULL，证明b确实不存在。</p>
<h2 id="Set中的缓存"><a href="#Set中的缓存" class="headerlink" title="Set中的缓存"></a>Set中的缓存</h2><hr>
<p><code>set</code>中会存在缓存系统，缓存数量为80个<code>_setobject</code>结构。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Reuse scheme to save calls to malloc, free, and memset */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PySet_MAXFREELIST</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PySet_MAXFREELIST 80</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="keyword">static</span> PySetObject *free_list[PySet_MAXFREELIST];</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> numfree = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">set_dealloc</span><span class="params">(PySetObject *so)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> setentry *entry;</div><div class="line">    Py_ssize_t fill = so-&gt;fill;</div><div class="line">    PyObject_GC_UnTrack(so);</div><div class="line">    Py_TRASHCAN_SAFE_BEGIN(so)</div><div class="line">    <span class="keyword">if</span> (so-&gt;weakreflist != <span class="literal">NULL</span>)</div><div class="line">        PyObject_ClearWeakRefs((PyObject *) so);</div><div class="line">    <span class="comment">// 释放每个setentry</span></div><div class="line">    <span class="keyword">for</span> (entry = so-&gt;table; fill &gt; <span class="number">0</span>; entry++) &#123;</div><div class="line">        <span class="keyword">if</span> (entry-&gt;key) &#123;</div><div class="line">            --fill;</div><div class="line">            Py_DECREF(entry-&gt;key);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果分配了内存存放setentry，则释放掉</span></div><div class="line">    <span class="keyword">if</span> (so-&gt;table != so-&gt;smalltable)</div><div class="line">        PyMem_DEL(so-&gt;table);</div><div class="line">    <span class="comment">// 缓存_setobject</span></div><div class="line">    <span class="keyword">if</span> (numfree &lt; PySet_MAXFREELIST &amp;&amp; PyAnySet_CheckExact(so))</div><div class="line">        free_list[numfree++] = so;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        Py_TYPE(so)-&gt;tp_free(so);</div><div class="line">    Py_TRASHCAN_SAFE_END(so)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>freelist</code>缓存只会对<code>_setobject</code>结构本身起效，会释放掉额外分配的存储键的内存。</p>
<h2 id="Set中查找元素"><a href="#Set中查找元素" class="headerlink" title="Set中查找元素"></a>Set中查找元素</h2><hr>
<p><code>set</code>中元素查找有两个函数，在默认情况下的查找函数为<code>set_lookkey_string</code>。当发现查找的元素不是<code>string</code>类型时，会将对应的<code>lookup</code>函数设置为<code>set_lookkey</code>，然后调用该函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> setentry *</span></div><div class="line"><span class="title">set_lookkey_string</span><span class="params">(PySetObject *so, PyObject *key, <span class="keyword">register</span> <span class="keyword">long</span> hash)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> Py_ssize_t i;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">size_t</span> perturb;</div><div class="line">    <span class="keyword">register</span> setentry *freeslot;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">size_t</span> mask = so-&gt;mask;</div><div class="line">    setentry *table = so-&gt;table;</div><div class="line">    <span class="keyword">register</span> setentry *entry;</div><div class="line"></div><div class="line">    <span class="comment">/* Make sure this function doesn't have to handle non-string keys,</span></div><div class="line">       including subclasses of str; e.g., one reason to subclass</div><div class="line">       strings is to override __eq__, and for speed we don't cater to</div><div class="line">       that here. */</div><div class="line">       </div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 元素不是string，设置lookup = set_lookkey并调用</div><div class="line">    */</div><div class="line">    <span class="keyword">if</span> (!PyString_CheckExact(key)) &#123;</div><div class="line">        so-&gt;lookup = set_lookkey;</div><div class="line">        <span class="keyword">return</span> set_lookkey(so, key, hash);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 元素是字符串</span></div><div class="line">    i = hash &amp; mask;</div><div class="line">    entry = &amp;table[i];</div><div class="line">    <span class="comment">// 插槽为空，或者插槽上的key的内存地址与被查找一致</span></div><div class="line">    <span class="keyword">if</span> (entry-&gt;key == <span class="literal">NULL</span> || entry-&gt;key == key)</div><div class="line">        <span class="keyword">return</span> entry;</div><div class="line">    <span class="comment">// 第一个插槽为dummy，需要继续调用冲撞函数查找</span></div><div class="line">    <span class="keyword">if</span> (entry-&gt;key == dummy)</div><div class="line">        freeslot = entry;</div><div class="line">    <span class="comment">// 第一个插槽为其他元素，检查是否相等</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (entry-&gt;hash == hash &amp;&amp; <span class="number">_</span>PyString_Eq(entry-&gt;key, key))</div><div class="line">            <span class="keyword">return</span> entry;</div><div class="line">        freeslot = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* In the loop, key == dummy is by far (factor of 100s) the</span></div><div class="line">       least likely outcome, so test for that last. */</div><div class="line">    <span class="comment">/* 第一个插槽为dummy，继续查找 */</span></div><div class="line">    <span class="keyword">for</span> (perturb = hash; ; perturb &gt;&gt;= PERTURB_SHIFT) &#123;</div><div class="line">        <span class="comment">// 冲撞函数</span></div><div class="line">        i = (i &lt;&lt; <span class="number">2</span>) + i + perturb + <span class="number">1</span>;</div><div class="line">        entry = &amp;table[i &amp; mask];</div><div class="line">        <span class="keyword">if</span> (entry-&gt;key == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> freeslot == <span class="literal">NULL</span> ? entry : freeslot;</div><div class="line">        <span class="keyword">if</span> (entry-&gt;key == key</div><div class="line">            || (entry-&gt;hash == hash</div><div class="line">            &amp;&amp; entry-&gt;key != dummy</div><div class="line">            &amp;&amp; <span class="number">_</span>PyString_Eq(entry-&gt;key, key)))</div><div class="line">            <span class="keyword">return</span> entry;</div><div class="line">        <span class="comment">// 记录第一个为dummy的插槽，当key不存在是返回该插槽</span></div><div class="line">        <span class="keyword">if</span> (entry-&gt;key == dummy &amp;&amp; freeslot == <span class="literal">NULL</span>)</div><div class="line">            freeslot = entry;</div><div class="line">    &#125;</div><div class="line">    assert(<span class="number">0</span>);          <span class="comment">/* NOT REACHED */</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查找函数最后返回的插槽有三种情况：</p>
<ol>
<li>key存在，返回此插槽</li>
<li>key不存在，对应的插槽为NULL，返回此插槽</li>
<li>key不存在，对应的插槽有dummy，返回第一个dummy的插槽</li>
</ol>
<p><code>set_lookkey</code>与此类似，只不过比较元素时需要调用对应的比较函数。</p>
<h2 id="set的重新散列"><a href="#set的重新散列" class="headerlink" title="set的重新散列"></a>set的重新散列</h2><hr>
<p>为了减少哈希冲撞，当哈希表中的元素数量太多时需要扩大桶的长度以减少冲撞。Python中当填充的元素大于总的2/3时开始重新散列，会重新分配一个有效元素个数的两倍或者四倍的新的散列表。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">set_add_key</span><span class="params">(<span class="keyword">register</span> PySetObject *so, PyObject *key)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">long</span> hash;</div><div class="line">    <span class="keyword">register</span> Py_ssize_t n_used;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!PyString_CheckExact(key) ||</div><div class="line">        (hash = ((PyStringObject *) key)-&gt;ob_shash) == <span class="number">-1</span>) &#123;</div><div class="line">        hash = PyObject_Hash(key);</div><div class="line">        <span class="keyword">if</span> (hash == <span class="number">-1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    assert(so-&gt;fill &lt;= so-&gt;mask);  <span class="comment">/* at least one empty slot */</span></div><div class="line">    n_used = so-&gt;used;</div><div class="line">    Py_INCREF(key);</div><div class="line">    <span class="keyword">if</span> (set_insert_key(so, key, hash) == <span class="number">-1</span>) &#123;</div><div class="line">        Py_DECREF(key);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 填充的元素 &gt; 2/3 总数量</span></div><div class="line">    <span class="keyword">if</span> (!(so-&gt;used &gt; n_used &amp;&amp; so-&gt;fill*<span class="number">3</span> &gt;= (so-&gt;mask+<span class="number">1</span>)*<span class="number">2</span>))</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="comment">// 新分配的内存为2倍或者4倍有效元素的个数。</span></div><div class="line">    <span class="comment">// 可以知道一般情况下，有效元素占新分配元素的 1/6</span></div><div class="line">    <span class="comment">// 再占满一半才需要再次分配(2/3 - 1/6 = 1/2)</span></div><div class="line">    <span class="keyword">return</span> set_table_resize(so, so-&gt;used&gt;<span class="number">50000</span> ? so-&gt;used*<span class="number">2</span> : so-&gt;used*<span class="number">4</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python的Set容器&quot;&gt;&lt;a href=&quot;#Python的Set容器&quot; class=&quot;headerlink&quot; title=&quot;Python的Set容器&quot;&gt;&lt;/a&gt;Python的Set容器&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;与&lt;code&gt;Li
    
    </summary>
    
      <category term="python源码剖析" scheme="http://fanchao01.github.io/blog/categories/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Python源码剖析—信号处理机制</title>
    <link href="http://fanchao01.github.io/blog/2016/10/23/python-signal/"/>
    <id>http://fanchao01.github.io/blog/2016/10/23/python-signal/</id>
    <published>2016-10-23T07:00:00.000Z</published>
    <updated>2016-10-26T06:45:07.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python信号处理机制"><a href="#Python信号处理机制" class="headerlink" title="Python信号处理机制"></a>Python信号处理机制</h2><hr>
<p>本篇的信号处理机制不是指Python的<code>signal</code>模块的使用，而是指Python解释器本身如何处理信号以及如何实现<code>signal</code>模块。Python解释器处理信号机制需要做好两件事情：</p>
<ol>
<li>Python解释器与操作系统有关信号的交互</li>
<li>Python解释器实现信号语义的API接口和模块 </li>
</ol>
<p><img src="/blog/images/python_signal.jpg" alt="img"></p>
<p>大体上，Python解释器对信号的实现总体思路比较简单。Python解释器对信号做一层封装，在这层封装中处理信号，以及信号发生时的回调函数，使之能够纳入整个Python虚拟机的运行中。我们先从信号的初始化开始一点点揭露整个运作机制。</p>
<h2 id="信号机制的初始化"><a href="#信号机制的初始化" class="headerlink" title="信号机制的初始化"></a>信号机制的初始化</h2><hr>
<p>信号机制的初始化是在Python初始化整个解释器时开始的，Python在初始化函数中调用<code>initsigs</code>来进行整个系统以及<code>singal</code>模块的初始化。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// python/pythonrun.c  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">Py_InitializedEx</span><span class="params">(<span class="keyword">int</span> install_sigs)</span></div><div class="line">&#123;</div><div class="line">        ....</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (install_sigs)   <span class="comment">// 初始化时install_sigs==1</span></div><div class="line">        initsigs(); <span class="comment">/* Signal handling stuff, including initintr() */</span></div><div class="line">        </div><div class="line">        ....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 代码中PyOS_xxx系列都是Python解释器直接对系统调用的封装</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">initsigs</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SIGPIPE</span></div><div class="line">    PyOS_setsig(SIGPIPE, SIG_IGN);     <span class="comment">// 忽略SIGPIPE  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SIGXFZ</span></div><div class="line">    PyOS_setsig(SIGXFZ, SIG_IGN);      <span class="comment">// 忽略SIGXFZ </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SIGXFSZ</span></div><div class="line">    PyOS_setsig(SIGXFSZ, SIG_IGN);     <span class="comment">// 忽略SIGXFSZ  file size exceeded</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    PyOS_InitInterrupts(); <span class="comment">/* May imply initsignal() */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// python/modules/singalmodle.c</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyOS_InitInterrupts</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    initsignal();</div><div class="line">    <span class="number">_</span>PyImport_FixupExtension(<span class="string">"signal"</span>, <span class="string">"signal"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接进入到<code>singalmodule.c</code>中看<code>signal</code>模块以及信号的初始化。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="function">PyMODINIT_FUNC</span></div><div class="line"><span class="title">initsignal</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    PyObject *m, *d, *x;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WITH_THREAD</span></div><div class="line">    main_thread = PyThread_get_thread_ident();</div><div class="line">    main_pid = getpid();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="comment">/* Create the module and add the functions */</span></div><div class="line">    <span class="comment">// 初始化signal模块</span></div><div class="line">    m = Py_InitModule3(<span class="string">"signal"</span>, signal_methods, module_doc);</div><div class="line">    <span class="keyword">if</span> (m == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Add some symbolic constants to the module */</span></div><div class="line">    d = PyModule_GetDict(m);</div><div class="line">    <span class="comment">// 将SIG_DFL、SIGIGN 转化成Python整数对象</span></div><div class="line">    x = DefaultHandler = PyLong_FromVoidPtr((<span class="keyword">void</span> *)SIG_DFL);</div><div class="line">    <span class="keyword">if</span> (!x || PyDict_SetItemString(d, <span class="string">"SIG_DFL"</span>, x) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> finally;</div><div class="line"></div><div class="line">    x = IgnoreHandler = PyLong_FromVoidPtr((<span class="keyword">void</span> *)SIG_IGN);</div><div class="line">    <span class="keyword">if</span> (!x || PyDict_SetItemString(d, <span class="string">"SIG_IGN"</span>, x) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> finally;</div><div class="line"></div><div class="line">    x = PyInt_FromLong((<span class="keyword">long</span>)NSIG);</div><div class="line">    <span class="keyword">if</span> (!x || PyDict_SetItemString(d, <span class="string">"NSIG"</span>, x) &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">goto</span> finally;</div><div class="line">    Py_DECREF(x);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 获取signal模块中的默认中断处理函数，</div><div class="line">    * 实际就是 signal_default_int_handler    </div><div class="line">    */</div><div class="line">    x = IntHandler = PyDict_GetItemString(d, <span class="string">"default_int_handler"</span>);</div><div class="line">    <span class="keyword">if</span> (!x)</div><div class="line">        <span class="keyword">goto</span> finally;</div><div class="line">    Py_INCREF(IntHandler);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 初始化Python解释器中的Handler，</div><div class="line">    * 这个数组存储每个用户自定义的信号处理函数</div><div class="line">    * 以及标志是否发生该信号的标志。</div><div class="line">    */</div><div class="line">    Handlers[<span class="number">0</span>].tripped = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; NSIG; i++) &#123;</div><div class="line">        <span class="keyword">void</span> (*t)(<span class="keyword">int</span>);</div><div class="line">        t = PyOS_getsig(i);</div><div class="line">        Handlers[i].tripped = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (t == SIG_DFL)</div><div class="line">            Handlers[i].func = DefaultHandler;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t == SIG_IGN)</div><div class="line">            Handlers[i].func = IgnoreHandler;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            Handlers[i].func = Py_None; <span class="comment">/* None of our business */</span></div><div class="line">        Py_INCREF(Handlers[i].func);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* </span></div><div class="line">    * 为 SIGINT 设置Python解释器的信号处理函数signal_handler</div><div class="line">    * signal_handler 也会成为Python解释器与用户自定义处理函数的桥梁</div><div class="line">    */</div><div class="line">    <span class="keyword">if</span> (Handlers[SIGINT].func == DefaultHandler) &#123;</div><div class="line">        <span class="comment">/* Install default int handler */</span></div><div class="line">        Py_INCREF(IntHandler);</div><div class="line">        Py_DECREF(Handlers[SIGINT].func);</div><div class="line">        Handlers[SIGINT].func = IntHandler;</div><div class="line">        old_siginthandler = PyOS_setsig(SIGINT, signal_handler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现signal模块中的各个 SIGXXX 信号值和名称</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SIGHUP                  </span></div><div class="line">    x = PyInt_FromLong(SIGHUP);</div><div class="line">    PyDict_SetItemString(d, <span class="string">"SIGHUP"</span>, x);</div><div class="line">    Py_XDECREF(x);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    ....</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!PyErr_Occurred())</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Check for errors */</span></div><div class="line">  finally:</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到Python将用户自定义信号处理函数保存在<code>Handler</code>数组中，而实际上向系统注册<code>signal_handler</code>函数。这个<code>signal_handler</code>函数成为信号发生时沟通Python解释器和用户自定义信号处理函数的桥梁。可以从<code>signal.signal</code>的实现中清楚的看到这一点。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// python/signalmodule.c</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></div><div class="line"><span class="title">signal_signal</span><span class="params">(PyObject *self, PyObject *args)</span></div><div class="line">&#123;</div><div class="line">    PyObject *obj;</div><div class="line">    <span class="keyword">int</span> sig_num;</div><div class="line">    PyObject *old_handler;</div><div class="line">    <span class="keyword">void</span> (*func)(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">"iO:signal"</span>, &amp;sig_num, &amp;obj))</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MS_WINDOWS</span></div><div class="line">    <span class="comment">/* Validate that sig_num is one of the allowable signals */</span></div><div class="line">    <span class="keyword">switch</span> (sig_num) &#123;</div><div class="line">        <span class="keyword">case</span> SIGABRT: <span class="keyword">break</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SIGBREAK</span></div><div class="line">        <span class="comment">/* Issue #10003: SIGBREAK is not documented as permitted, but works</span></div><div class="line">           and corresponds to CTRL_BREAK_EVENT. */</div><div class="line">        <span class="keyword">case</span> SIGBREAK: <span class="keyword">break</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        <span class="keyword">case</span> SIGFPE: <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> SIGILL: <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> SIGINT: <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> SIGSEGV: <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> SIGTERM: <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            PyErr_SetString(PyExc_ValueError, <span class="string">"invalid signal value"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WITH_THREAD</span></div><div class="line"></div><div class="line">    <span class="comment">// 只有主函数才能设置信号处理函数</span></div><div class="line">    <span class="keyword">if</span> (PyThread_get_thread_ident() != main_thread) &#123;</div><div class="line">        PyErr_SetString(PyExc_ValueError,</div><div class="line">                        <span class="string">"signal only works in main thread"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">if</span> (sig_num &lt; <span class="number">1</span> || sig_num &gt;= NSIG) &#123;</div><div class="line">        PyErr_SetString(PyExc_ValueError,</div><div class="line">                        <span class="string">"signal number out of range"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (obj == IgnoreHandler)</div><div class="line">        func = SIG_IGN;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (obj == DefaultHandler)</div><div class="line">        func = SIG_DFL;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!PyCallable_Check(obj)) &#123;</div><div class="line">        PyErr_SetString(PyExc_TypeError,</div><div class="line"><span class="string">"signal handler must be signal.SIG_IGN, signal.SIG_DFL, or a callable object"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// 除了signal.SIG_IGN和signal.SIG_DFL之外</span></div><div class="line">        <span class="comment">// Python解释器向系统注册的都是signal_handler函数</span></div><div class="line">        func = signal_handler;</div><div class="line">    <span class="keyword">if</span> (PyOS_setsig(sig_num, func) == SIG_ERR) &#123;</div><div class="line">        PyErr_SetFromErrno(PyExc_RuntimeError);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 把实际的用户自定义信号处理函数，放入对应的Handler数组中</span></div><div class="line">    <span class="comment">// tripped标记对应信号值的信号是否发生了</span></div><div class="line">    old_handler = Handlers[sig_num].func;</div><div class="line">    Handlers[sig_num].tripped = <span class="number">0</span>;</div><div class="line">    Py_INCREF(obj);</div><div class="line">    Handlers[sig_num].func = obj;</div><div class="line">    <span class="keyword">if</span> (old_handler != <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> old_handler;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        Py_RETURN_NONE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="信号产生时Python的动作"><a href="#信号产生时Python的动作" class="headerlink" title="信号产生时Python的动作"></a>信号产生时Python的动作</h2><hr>
<p>当信号产生时，操作系统会调用Python解释器注册的信号处理函数，即上文中的<code>signal_handler</code>函数。这个函数将对应的<code>Handler</code>结构中的信号产生标志<code>tripped</code>设置为1，然后将一个统一信号处理函数<code>trip_signal</code>作为<code>pending_call</code>注册到Python虚拟机的执行栈中。于是，Python在虚拟机执行过程中调用<code>pending_call</code>并执行各个用户自定义的信号处理函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">signal_handler</span><span class="params">(<span class="keyword">int</span> sig_num)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> save_errno = errno;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(WITH_THREAD) &amp;&amp; defined(WITH_PTH)</span></div><div class="line">    <span class="keyword">if</span> (PyThread_get_thread_ident() != main_thread) &#123;</div><div class="line">        pth_raise(*(<span class="keyword">pth_t</span> *) main_thread, sig_num);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">#endif</div><div class="line">    &#123;</div><div class="line">#ifdef WITH_THREAD</div><div class="line">    <span class="comment">/* See NOTES section above */</span></div><div class="line">    <span class="keyword">if</span> (getpid() == main_pid)</div><div class="line">#endif</div><div class="line">    &#123;</div><div class="line">        trip_signal(sig_num);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_SIGACTION</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SIGCHLD</span></div><div class="line">    <span class="comment">/* To avoid infinite recursion, this signal remains</span></div><div class="line">       reset until explicit re-instated.</div><div class="line">       Don't clear the 'func' field as it is our pointer</div><div class="line">       to the Python handler... */</div><div class="line">    <span class="keyword">if</span> (sig_num != SIGCHLD)</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="comment">/* If the handler was not set up with sigaction, reinstall it.  See</span></div><div class="line">     * Python/pythonrun.c for the implementation of PyOS_setsig which</div><div class="line">     * makes this true.  See also issue8354. */</div><div class="line">    <span class="comment">// 重新设置信号处理</span></div><div class="line">    PyOS_setsig(sig_num, signal_handler);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Issue #10311: asynchronously executing signal handlers should not</span></div><div class="line">       mutate errno under the feet of unsuspecting C code. */</div><div class="line">    errno = save_errno;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">trip_signal</span><span class="params">(<span class="keyword">int</span> sig_num)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 信号产生了</span></div><div class="line">    Handlers[sig_num].tripped = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果正在处理信号，则不再向Python虚拟机提交</span></div><div class="line">    <span class="keyword">if</span> (is_tripped)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">/* Set is_tripped after setting .tripped, as it gets</span></div><div class="line">       cleared in PyErr_CheckSignals() before .tripped. */</div><div class="line">    is_tripped = <span class="number">1</span>;</div><div class="line">    <span class="comment">// 向Python虚拟机提交pending_call，纳入到整个虚拟机的执行过程中</span></div><div class="line">    Py_AddPendingCall(checksignals_witharg, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (wakeup_fd != <span class="number">-1</span>)</div><div class="line">        write(wakeup_fd, <span class="string">"\0"</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">checksignals_witharg</span><span class="params">(<span class="keyword">void</span> * arg)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> PyErr_CheckSignals();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">PyErr_CheckSignals</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    PyObject *f;</div><div class="line"></div><div class="line">    <span class="comment">// 已经在信号处理中</span></div><div class="line">    <span class="keyword">if</span> (!is_tripped)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 只主线程中处理信号</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WITH_THREAD</span></div><div class="line">    <span class="keyword">if</span> (PyThread_get_thread_ident() != main_thread)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * The is_tripped variable is meant to speed up the calls to</div><div class="line">     * PyErr_CheckSignals (both directly or via pending calls) when no</div><div class="line">     * signal has arrived. This variable is set to 1 when a signal arrives</div><div class="line">     * and it is set to 0 here, when we know some signals arrived. This way</div><div class="line">     * we can run the registered handlers with no signals blocked.</div><div class="line">     *</div><div class="line">     * <span class="doctag">NOTE:</span> with this approach we can have a situation where is_tripped is</div><div class="line">     *       1 but we have no more signals to handle (Handlers[i].tripped</div><div class="line">     *       is 0 for every signal i). This won't do us any harm (except</div><div class="line">     *       we're gonna spent some cycles for nothing). This happens when</div><div class="line">     *       we receive a signal i after we zero is_tripped and before we</div><div class="line">     *       check Handlers[i].tripped.</div><div class="line">     */</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 恢复该信号。对于信号处理可能有两种情况：</div><div class="line">    * 1. 在is_tripped = 0之前： 信号又发生了，则只在Handler中设置标志位，</div><div class="line">    *    不会再次提交到pendingcall，多个信号只处理一次;</div><div class="line">    * 2. 在is_tripped = 0之后： 信号又发生了，则会被再次提交到pendingcall</div><div class="line">    *    每发生一次信号调用一次信号处理函数。</div><div class="line">    */</div><div class="line">    is_tripped = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!(f = (PyObject *)PyEval_GetFrame()))</div><div class="line">        f = Py_None;</div><div class="line">    <span class="comment">// 按照信号值从小到大依次调用对应的信号处理函数</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; NSIG; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (Handlers[i].tripped) &#123;</div><div class="line">            PyObject *result = <span class="literal">NULL</span>;</div><div class="line">            PyObject *arglist = Py_BuildValue(<span class="string">"(iO)"</span>, i, f);</div><div class="line">            Handlers[i].tripped = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (arglist) &#123;</div><div class="line">                result = PyEval_CallObject(Handlers[i].func,</div><div class="line">                                           arglist);</div><div class="line">                Py_DECREF(arglist);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!result)</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">            Py_DECREF(result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里面的<code>PyErr_CheckSignals</code>函数也会被其他模块调用直接信号的处理。例如，在<code>file.read</code>读取文件过程中中断，Python对调用该函数进行信号处理。至此，可以看到整个信号处理的流程：</p>
<ol>
<li>初始化signal模块，将对应的操作系统信号值、函数转化成Python对象</li>
<li>用户设置信号就向操作系统注册函数<code>signal_handler</code>，并将用户自定义信号处理函数设置到对应的<code>Handler</code>数组中</li>
<li>当信号发生时，操作系统调用<code>signal_handler</code>设置<code>tripped=1</code>，然后调用<code>trip_signal</code>将统一处理函数<code>checksignals_witharg</code>作为<code>pendingcall</code>注册到Python虚拟机的执行栈中。</li>
<li>Python虚拟机在处理<code>pendingcall</code>时调用<code>checksignals_withargs</code>，从而信号处理函数得以执行。</li>
<li>另外，Python其他模块可以直接调用<code>PyErr_CheckSignals</code>进行信号处理。</li>
</ol>
<h2 id="Python信号的语义"><a href="#Python信号的语义" class="headerlink" title="Python信号的语义"></a>Python信号的语义</h2><hr>
<p>通过注释以及代码剖析可以归纳Python的信号语义：</p>
<ul>
<li>只有主线程能够设置、捕获和处理信号</li>
<li>信号设置一直有效（<code>signal_handler</code>中会再次注册信号处理函数)</li>
<li>多次信号，可能会被合并处理一次</li>
<li>按照信号值从小到大处理</li>
</ul>
<h2 id="信号实例"><a href="#信号实例" class="headerlink" title="信号实例"></a>信号实例</h2><hr>
<h3 id="主线程才能捕获信号"><a href="#主线程才能捕获信号" class="headerlink" title="主线程才能捕获信号"></a>主线程才能捕获信号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> threading                                                                 </div><div class="line"><span class="keyword">import</span> signal                                                                    </div><div class="line"><span class="keyword">import</span> time                                                                      </div><div class="line">                                                                                 </div><div class="line">SIG = []                                                                         </div><div class="line">                                                                                 </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sig_handler</span><span class="params">(*args)</span>:</span>                                                          </div><div class="line">    SIG.append(args)                                                             </div><div class="line">                                                                                 </div><div class="line">signal.signal(signal.SIGUSR1, sig_handler)                                       </div><div class="line">signal.signal(signal.SIGUSR2, sig_handler)                                       </div><div class="line">signal.signal(signal.SIGSYS, sig_handler)                                        </div><div class="line">                                                                                 </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span>                                                </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, *args)</span>:</span>                                                        </div><div class="line">        start = time.time()                                                      </div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:                                                              </div><div class="line">            <span class="keyword">if</span> time.time() &gt; start + <span class="number">10</span>:                                         </div><div class="line">                <span class="keyword">break</span>                                                            </div><div class="line">        <span class="keyword">print</span> <span class="string">'In Thread:'</span>, SIG                                                          </div><div class="line">                                                                                 </div><div class="line">t = MyThread()                                                                   </div><div class="line">t.start()                                                                        </div><div class="line"><span class="keyword">print</span> <span class="string">'start thread:'</span>, t                                                         </div><div class="line">t.join()                                                                         </div><div class="line"><span class="keyword">print</span> <span class="string">'In Main:'</span>, SIG</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/python<span class="comment"># python test_signal_main_thread.py</span></div><div class="line">start thread: &lt;MyThread(Thread-1, started 140229890316032)&gt;</div><div class="line">In Main: []</div><div class="line">In Thread: []          <span class="comment"># [1]</span></div></pre></td></tr></table></figure>
<ul>
<li>[1] Python中的线程都是分离的，因此主线程很快退出。信号不能发送到主线程，因此不能被执行。</li>
</ul>
<h3 id="信号可能只被处理一次"><a href="#信号可能只被处理一次" class="headerlink" title="信号可能只被处理一次"></a>信号可能只被处理一次</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> signal</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">SIG = []</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sig_handler</span><span class="params">(*args)</span>:</span></div><div class="line">    SIG.append(args)</div><div class="line"></div><div class="line">signal.signal(signal.SIGUSR1, sig_handler)</div><div class="line">signal.signal(signal.SIGUSR2, sig_handler)</div><div class="line">signal.signal(signal.SIGSYS, sig_handler)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, *args)</span>:</span></div><div class="line">        start = time.time()</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">if</span> time.time() &gt; start + <span class="number">10</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'In Thread:'</span>, SIG</div><div class="line"></div><div class="line">t = MyThread()</div><div class="line">t.start()</div><div class="line"><span class="keyword">print</span> <span class="string">'start thread:'</span>, t</div><div class="line">t.join()</div><div class="line"><span class="keyword">print</span> <span class="string">'In Main:'</span>, SIG</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python test_signal_signo.py       # kill -10  2856; kill -10 2856; kill -12 2856</span></div><div class="line">start thread: &lt;MyThread(Thread-1, started 140351081834240)&gt;</div><div class="line">In Thread: []       <span class="comment"># [1]</span></div><div class="line">In Main: [(10, &lt;frame object at 0x16e2d50&gt;), (12, &lt;frame object at 0x16e2d50&gt;)] <span class="comment"># [2]</span></div></pre></td></tr></table></figure>
<ul>
<li>[1] 主线程的<code>t.join</code>一直阻塞，因此在子线程没有退出前不能处理信号。（C语言的信号处理是可以打断堵塞信号的）</li>
<li>[2] 信号在有机会处理之前发生了两次信号，但是只处理了一次。</li>
</ul>
<h2 id="Python信号的特殊性"><a href="#Python信号的特殊性" class="headerlink" title="Python信号的特殊性"></a>Python信号的特殊性</h2><hr>
<p>Python的信号语义与Linux的C语言的信号语义有一些不同。</p>
<ul>
<li>Python信号的处理函数会一直有效；而Linux除非特殊设置否则信号处理函数默认只调用一次就被恢复</li>
<li>Python信号只能在主线程中设置、捕获和处理</li>
<li>Python信号不能打断堵塞操作(因为信号发生时子线程在运行)</li>
</ul>
<p>(完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python信号处理机制&quot;&gt;&lt;a href=&quot;#Python信号处理机制&quot; class=&quot;headerlink&quot; title=&quot;Python信号处理机制&quot;&gt;&lt;/a&gt;Python信号处理机制&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;本篇的信号处理机制不是指Python的&lt;code&gt;
    
    </summary>
    
      <category term="python源码剖析" scheme="http://fanchao01.github.io/blog/categories/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Python源码剖析—字符串对象PyStringObject</title>
    <link href="http://fanchao01.github.io/blog/2016/10/18/python-string/"/>
    <id>http://fanchao01.github.io/blog/2016/10/18/python-string/</id>
    <published>2016-10-18T07:00:00.000Z</published>
    <updated>2016-10-25T12:38:09.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python字符串对象PyStringObject"><a href="#Python字符串对象PyStringObject" class="headerlink" title="Python字符串对象PyStringObject"></a>Python字符串对象PyStringObject</h2><hr>
<p>Python的字符串对象是一个不可变对象，任何改变字符串字面值的操作都是重新创建一个新的字符串。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">astr = <span class="string">'astr'</span></div><div class="line"></div><div class="line">id(astr)</div><div class="line">Out[<span class="number">22</span>]: <span class="number">59244376L</span></div><div class="line"></div><div class="line">astr += <span class="string">'another'</span></div><div class="line"></div><div class="line">id(astr)</div><div class="line">Out[<span class="number">24</span>]: <span class="number">59947360L</span></div></pre></td></tr></table></figure>
<p>字符串对象在Python中用<code>PyStringObject</code>表示，扩展定义后如下。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  Py_ssize_t ob_refcnt;            <span class="comment">// 引用计数</span></div><div class="line">  <span class="keyword">struct</span> <span class="number">_</span>typeobject *ob_type;     <span class="comment">// 类型指针</span></div><div class="line">  Py_ssize_t ob_size；             <span class="comment">// 字符串的长度，不计算C语言中的结尾NULL</span></div><div class="line">  <span class="keyword">long</span> ob_shash;                   <span class="comment">// 字符串的hash值，没有计算则为-1</span></div><div class="line">  <span class="keyword">int</span> ob_sstate;                   <span class="comment">// 字符串对象的状态： 是否interned等</span></div><div class="line">  <span class="keyword">char</span> ob_sval[<span class="number">1</span>];                 <span class="comment">// 保存字符串的内存，默认先分配1个字符，用来保存额外的末尾NULL值</span></div><div class="line"> </div><div class="line">  <span class="comment">/* Invariants:</span></div><div class="line">   *     ob_sval contains space for 'ob_size+1' elements.</div><div class="line">   *     ob_sval[ob_size] == 0.</div><div class="line">   *     ob_shash is the hash of the string or -1 if not computed yet.</div><div class="line">   *     ob_sstate != 0 iff the string object is in stringobject.c's</div><div class="line">   *       'interned' dictionary; in this case the two references</div><div class="line">   *       from 'interned' to this object are *not counted* in ob_refcnt.</div><div class="line">   */</div><div class="line">&#125; PyStringObject;</div></pre></td></tr></table></figure>
<p><code>ob_type</code>字符串的类型指针，实际指向<code>PyString_Type</code></p>
<p><code>ob_size</code>保存的是字符串的实际长度，也是通过<code>len(s)</code>返回的长度值。而字符串实际占用的内存是<code>ob_size + 1</code>，因为C语言中需要额外的<code>NULL</code>作为字符串结束标识符。</p>
<p><code>ob_sval</code>是实际存储字符串的内存，分配时会请求<code>sizeof(PyStringObject)+size</code>的内存，这样以<code>ob_sval</code>开始的内存长度就是<code>size + 1</code>的长度，正好用来存放以<code>NULL</code>结尾的字符串。</p>
<p><code>ob_shash</code>是字符串的hash值，当字符串用来比较或者作为key时可以加速查找速度，默认值为-1。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span></span></div><div class="line"><span class="title">string_hash</span><span class="params">(PyStringObject *a)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> Py_ssize_t len;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *p;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">long</span> x;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_DEBUG</span></div><div class="line">    assert(<span class="number">_</span>Py_HashSecret_Initialized);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">if</span> (a-&gt;ob_shash != <span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> a-&gt;ob_shash;</div><div class="line">    len = Py_SIZE(a);</div><div class="line">    <span class="comment">/*</span></div><div class="line">      We make the hash of the empty string be 0, rather than using</div><div class="line">      (prefix ^ suffix), since this slightly obfuscates the hash secret</div><div class="line">    */</div><div class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</div><div class="line">        a-&gt;ob_shash = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) a-&gt;ob_sval;</div><div class="line">    x = <span class="number">_</span>Py_HashSecret.prefix;</div><div class="line">    x ^= *p &lt;&lt; <span class="number">7</span>;</div><div class="line">    <span class="keyword">while</span> (--len &gt;= <span class="number">0</span>)</div><div class="line">        x = (<span class="number">1000003</span>*x) ^ *p++;</div><div class="line">    x ^= Py_SIZE(a);</div><div class="line">    x ^= <span class="number">_</span>Py_HashSecret.suffix;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">-1</span>)</div><div class="line">        x = <span class="number">-2</span>;</div><div class="line">    a-&gt;ob_shash = x;</div><div class="line">    <span class="keyword">return</span> x;</div></pre></td></tr></table></figure>
<p><code>ob_sstate</code>记录字符串对象的状态。字符串可能有三种状态：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Python/objects/stringobject.h</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SSTATE_NOT_INTERNED 0           <span class="comment">// 字符串没有被interned</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SSTATE_INTERNED_MORTAL 1        <span class="comment">// 字符串被interned，可以被回收</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SSTATE_INTERNED_IMMORTAL 2      <span class="comment">// 字符串永久interned，不会被回收</span></span></div></pre></td></tr></table></figure>
<h2 id="字符串的interned"><a href="#字符串的interned" class="headerlink" title="字符串的interned"></a>字符串的interned</h2><hr>
<p>字符串对象是不可变对象，因此相同的字面值的变量可以绑定到相同的字符串对象上，这样减少了字符串对象的创建次数。这样的行为称为<code>interned</code>。默认情况下空字符串和单字符字符串会被<code>interned</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Python/objects/stringobject.c</span></div><div class="line"></div><div class="line"><span class="function">PyObject *</span></div><div class="line"><span class="title">PyString_FromString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">size_t</span> size;</div><div class="line">    <span class="keyword">register</span> PyStringObject *op;</div><div class="line"></div><div class="line">    assert(str != <span class="literal">NULL</span>);</div><div class="line">    size = <span class="built_in">strlen</span>(str);</div><div class="line">    <span class="keyword">if</span> (size &gt; PY_SSIZE_T_MAX - PyStringObject_SIZE) &#123;</div><div class="line">        PyErr_SetString(PyExc_OverflowError,</div><div class="line">            <span class="string">"string is too long for a Python string"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果是空字符串直接返回</span></div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span> &amp;&amp; (op = nullstring) != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COUNT_ALLOCS</span></div><div class="line">        null_strings++;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        Py_INCREF(op);</div><div class="line">        <span class="keyword">return</span> (PyObject *)op;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果是单字符串，先从characters中查找是否存在</span></div><div class="line">    <span class="keyword">if</span> (size == <span class="number">1</span> &amp;&amp; (op = characters[*str &amp; UCHAR_MAX]) != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COUNT_ALLOCS</span></div><div class="line">        one_strings++;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        Py_INCREF(op);</div><div class="line">        <span class="keyword">return</span> (PyObject *)op;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Inline PyObject_NewVar */</span></div><div class="line">    op = (PyStringObject *)PyObject_MALLOC(PyStringObject_SIZE + size);</div><div class="line">    <span class="keyword">if</span> (op == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> PyErr_NoMemory();</div><div class="line">    PyObject_INIT_VAR(op, &amp;PyString_Type, size);</div><div class="line">    op-&gt;ob_shash = <span class="number">-1</span>;</div><div class="line">    op-&gt;ob_sstate = SSTATE_NOT_INTERNED;</div><div class="line">    Py_MEMCPY(op-&gt;ob_sval, str, size+<span class="number">1</span>);</div><div class="line">    <span class="comment">/* share short strings */</span></div><div class="line">    <span class="comment">// 空字符串进行interned</span></div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        PyObject *t = (PyObject *)op;</div><div class="line">        PyString_InternInPlace(&amp;t);</div><div class="line">        op = (PyStringObject *)t;</div><div class="line">        nullstring = op;</div><div class="line">        Py_INCREF(op);</div><div class="line">    <span class="comment">// 单字符串保存在characters中，并且进行interned</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</div><div class="line">        PyObject *t = (PyObject *)op;</div><div class="line">        PyString_InternInPlace(&amp;t);</div><div class="line">        op = (PyStringObject *)t;</div><div class="line">        characters[*str &amp; UCHAR_MAX] = op;</div><div class="line">        Py_INCREF(op);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (PyObject *) op;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一些情况下，例如<code>__dict__</code>、模块名字等预计会被大量重复使用或者永久使用的字符串，在创建时也会调用<code>PyString_InternInPlace</code>进行<code>interned</code>操作。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// python/objects/stringobject.c</span></div><div class="line"></div><div class="line">PyAPI_FUNC(PyObject *) PyString_FromString(<span class="keyword">const</span> <span class="keyword">char</span> *);</div><div class="line"> </div><div class="line">PyAPI_FUNC(PyObject *) PyString_FromStringAndSize(<span class="keyword">const</span> <span class="keyword">char</span> *, Py_ssize_t);</div><div class="line"> </div><div class="line"><span class="comment">// SSTATE_INTERNED_MORTAL, 计数0会被回收</span></div><div class="line"><span class="function">PyObject *</span></div><div class="line"><span class="title">PyString_InternFromString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp)</span></div><div class="line">&#123;</div><div class="line">    PyObject *s = PyString_FromString(cp);</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    PyString_InternInPlace(&amp;s);</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// SSTATE_INTERNED_IMMORTAL, 永远不会被销毁</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyString_InternImmortal</span><span class="params">(PyObject **p)</span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyString_InternInPlace</span><span class="params">(PyObject **p)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> PyStringObject *s = (PyStringObject *)(*p);</div><div class="line"> </div><div class="line">    PyObject *t;</div><div class="line"> </div><div class="line">    <span class="comment">// 检查值使用在PyStringObject上, 派生类不适用</span></div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span> || !PyString_Check(s))</div><div class="line">        Py_FatalError(<span class="string">"PyString_InternInPlace: strings only please!"</span>);</div><div class="line">    <span class="comment">/* If it's a string subclass, we don't really know what putting it in the interned dict might do. */</span></div><div class="line"> </div><div class="line">    <span class="comment">// 不是字符串类型, 返回</span></div><div class="line">    <span class="keyword">if</span> (!PyString_CheckExact(s))</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// 本身已经intern了(标志位ob_sstate), 不重复进行, 返回</span></div><div class="line">    <span class="keyword">if</span> (PyString_CHECK_INTERNED(s))</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// 未初始化字典, 初始化之</span></div><div class="line">    <span class="keyword">if</span> (interned == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="comment">// 注意这里</span></div><div class="line">        interned = PyDict_New();</div><div class="line">        <span class="keyword">if</span> (interned == <span class="literal">NULL</span>) &#123;</div><div class="line">            PyErr_Clear(); <span class="comment">/* Don't leave an exception */</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// 在interned字典中已存在, 修改, 返回intern独享</span></div><div class="line">    t = PyDict_GetItem(interned, (PyObject *)s);</div><div class="line">    <span class="keyword">if</span> (t) &#123;</div><div class="line">        Py_INCREF(t);</div><div class="line">        Py_DECREF(*p);</div><div class="line">        *p = t;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// 在interned字典中不存在, 放进去</span></div><div class="line">    <span class="keyword">if</span> (PyDict_SetItem(interned, (PyObject *)s, (PyObject *)s)  <span class="number">0</span>) &#123;</div><div class="line">        PyErr_Clear();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/* 加入interned字典(key-value)会导致refcnt+2,</span></div><div class="line">     * 这里面去掉interned的引用，以使其正确回收</div><div class="line">     */</div><div class="line">    <span class="comment">/* The two references in interned are not counted by refcnt.</span></div><div class="line">       The string deallocator will take care of this */</div><div class="line">    Py_REFCNT(s) -= <span class="number">2</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// 修改字符串对象的ob_sstate标志位, SSTATE_INTERNED_MORTAL</span></div><div class="line">    PyString_CHECK_INTERNED(s) = SSTATE_INTERNED_MORTAL;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 其他代码大量进行intern操作</span></div><div class="line">dict_str = PyString_InternFromString(<span class="string">"__dict__"</span>)</div><div class="line">lenstr = PyString_InternFromString(<span class="string">"__len__"</span>)</div><div class="line">s_true = PyString_InternFromString(<span class="string">"true"</span>)</div><div class="line">empty_array = PyString_InternFromString(<span class="string">"[]"</span>)</div></pre></td></tr></table></figure>
<h2 id="字符串对象的回收"><a href="#字符串对象的回收" class="headerlink" title="字符串对象的回收"></a>字符串对象的回收</h2><hr>
<p>当字符串的引用计数为零时会被回收。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">string_dealloc</span><span class="params">(PyObject *op)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (PyString_CHECK_INTERNED(op)) &#123;</div><div class="line">        <span class="keyword">case</span> SSTATE_NOT_INTERNED:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="comment">// 从interned字典中去掉，然后再tp_free掉</span></div><div class="line">        <span class="keyword">case</span> SSTATE_INTERNED_MORTAL:</div><div class="line">            <span class="comment">/* revive dead object temporarily for DelItem */</span></div><div class="line">            Py_REFCNT(op) = <span class="number">3</span>;</div><div class="line">            <span class="keyword">if</span> (PyDict_DelItem(interned, op) != <span class="number">0</span>)</div><div class="line">                Py_FatalError(</div><div class="line">                    <span class="string">"deletion of interned string failed"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// 这种类型的字符串不会被回收，一直有引用</span></div><div class="line">        <span class="keyword">case</span> SSTATE_INTERNED_IMMORTAL:</div><div class="line">            Py_FatalError(<span class="string">"Immortal interned string died."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            Py_FatalError(<span class="string">"Inconsistent interned string state."</span>);</div><div class="line">    &#125;</div><div class="line">    Py_TYPE(op)-&gt;tp_free(op);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串对象的其他操作"><a href="#字符串对象的其他操作" class="headerlink" title="字符串对象的其他操作"></a>字符串对象的其他操作</h2><hr>
<p>可以通过字符串对象的类的结构中找到对象的操作函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// python/objects/stringobject.c</span></div><div class="line">PyTypeObject PyString_Type = &#123;</div><div class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</div><div class="line">    <span class="string">"str"</span>,</div><div class="line">    PyStringObject_SIZE,</div><div class="line">    <span class="keyword">sizeof</span>(<span class="keyword">char</span>),</div><div class="line">    string_dealloc,                             <span class="comment">/* tp_dealloc */</span></div><div class="line">    (printfunc)string_print,                    <span class="comment">/* tp_print */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getattr */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattr */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_compare */</span></div><div class="line">    string_repr,                                <span class="comment">/* tp_repr */</span></div><div class="line">    &amp;string_as_number,                          <span class="comment">/* tp_as_number */</span></div><div class="line">    &amp;string_as_sequence,                        <span class="comment">/* tp_as_sequence */</span></div><div class="line">    &amp;string_as_mapping,                         <span class="comment">/* tp_as_mapping */</span></div><div class="line">    (hashfunc)string_hash,                      <span class="comment">/* tp_hash */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_call */</span></div><div class="line">    string_str,                                 <span class="comment">/* tp_str */</span></div><div class="line">    PyObject_GenericGetAttr,                    <span class="comment">/* tp_getattro */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattro */</span></div><div class="line">    &amp;string_as_buffer,                          <span class="comment">/* tp_as_buffer */</span></div><div class="line">    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES |</div><div class="line">        Py_TPFLAGS_BASETYPE | Py_TPFLAGS_STRING_SUBCLASS |</div><div class="line">        Py_TPFLAGS_HAVE_NEWBUFFER,              <span class="comment">/* tp_flags */</span></div><div class="line">    string_doc,                                 <span class="comment">/* tp_doc */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_traverse */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_clear */</span></div><div class="line">    (richcmpfunc)string_richcompare,            <span class="comment">/* tp_richcompare */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_weaklistoffset */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iter */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iternext */</span></div><div class="line">    string_methods,                             <span class="comment">/* tp_methods */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_members */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getset */</span></div><div class="line">    &amp;PyBaseString_Type,                         <span class="comment">/* tp_base */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dict */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_get */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_set */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dictoffset */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_init */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_alloc */</span></div><div class="line">    string_new,                                 <span class="comment">/* tp_new */</span></div><div class="line">    PyObject_Del,                               <span class="comment">/* tp_free */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>tp_base</code>被赋值为<code>PyBaseString_Type</code>，因此字符串对象是<code>basestring</code>的子类。</p>
<p>(完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python字符串对象PyStringObject&quot;&gt;&lt;a href=&quot;#Python字符串对象PyStringObject&quot; class=&quot;headerlink&quot; title=&quot;Python字符串对象PyStringObject&quot;&gt;&lt;/a&gt;Python字符串对象
    
    </summary>
    
      <category term="python源码剖析" scheme="http://fanchao01.github.io/blog/categories/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Python源码剖析—整数对象PyIntObject</title>
    <link href="http://fanchao01.github.io/blog/2016/10/17/python-int/"/>
    <id>http://fanchao01.github.io/blog/2016/10/17/python-int/</id>
    <published>2016-10-17T07:00:00.000Z</published>
    <updated>2016-10-25T12:37:36.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整数对象的结构"><a href="#整数对象的结构" class="headerlink" title="整数对象的结构"></a>整数对象的结构</h2><hr>
<p>整数对象是固定大小的Python对象，内部只有一个<code>ob_ival</code>保存实际的整数值。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    <span class="keyword">long</span> ob_ival;</div><div class="line">&#125; PyIntObject;</div></pre></td></tr></table></figure>
<h2 id="整数对象的缓存"><a href="#整数对象的缓存" class="headerlink" title="整数对象的缓存"></a>整数对象的缓存</h2><hr>
<p>为了最大限度的减少内存分配和垃圾回收，Python对整数对象设计了缓存。整数对象的缓存由两种类别构成：</p>
<ol>
<li>小整数对象: 在Python启动时创建，永远不会回收</li>
<li>其他整数对象：创建时分配，回收时先缓存；在最高代的垃圾回收中整体回收</li>
</ol>
<p>在Python启动时会创建一批默认值为[5, 257)的小整数对象，存储在<code>small_ints</code>中。这些整数对象的生命周期为Python的生命周期，不会被回收。Python只所以这样处理是因此解释器内部会频繁用到这些小整数，如果每次都分配-回收-再分配显然效率不高，不如创建后一直保留用空间换时间。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NSMALLPOSINTS</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSMALLPOSINTS           257</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NSMALLNEGINTS</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSMALLNEGINTS           5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line"><span class="comment">/* References to small integers are saved in this array so that they</span></div><div class="line">   can be shared.</div><div class="line">   The integers that are saved are those in the range</div><div class="line">   -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).</div><div class="line">*/</div><div class="line"><span class="keyword">static</span> PyIntObject *small_ints[NSMALLNEGINTS + NSMALLPOSINTS];</div></pre></td></tr></table></figure>
<p>可以通过<code>id</code>命令查看小整数对象的特性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">id(<span class="number">246</span>)</div><div class="line">id(<span class="number">256</span>)</div><div class="line">Out[<span class="number">55</span>]: <span class="number">31363504L</span></div><div class="line"></div><div class="line">id(<span class="number">256</span>)</div><div class="line">Out[<span class="number">56</span>]: <span class="number">31363504L</span>  <span class="comment"># id不会改变</span></div><div class="line"></div><div class="line"></div><div class="line">id(<span class="number">257</span>)</div><div class="line">Out[<span class="number">53</span>]: <span class="number">60259096L</span></div><div class="line"></div><div class="line">id(<span class="number">257</span>)</div><div class="line">Out[<span class="number">54</span>]: <span class="number">60259024L</span> <span class="comment"># id会改变</span></div></pre></td></tr></table></figure>
<p>通过上面的例子我们可以知道，其他整数对象使用的内存是不固定的，申请时分配释放时回收。当然，这个回收并不一定是返还给系统内存，整数对象系统本身会缓存一部分整数对象。下面通过整数对象系统的初始化揭露整数的缓存方案。</p>
<h2 id="整数对象的初始化"><a href="#整数对象的初始化" class="headerlink" title="整数对象的初始化"></a>整数对象的初始化</h2><hr>
<p>当Python初始化时会调用<code>_PyInt_Init</code>函数进行整数的初始化。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span></div><div class="line"><span class="number">_</span>PyInt_Init(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    PyIntObject *v;</div><div class="line">    <span class="keyword">int</span> ival;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line">    <span class="keyword">for</span> (ival = -NSMALLNEGINTS; ival &lt; NSMALLPOSINTS; ival++) &#123;</div><div class="line">          <span class="keyword">if</span> (!free_list &amp;&amp; (free_list = fill_free_list()) == <span class="literal">NULL</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">/* PyObject_New is inlined */</span></div><div class="line">        v = free_list;</div><div class="line">        free_list = (PyIntObject *)Py_TYPE(v);</div><div class="line">        PyObject_INIT(v, &amp;PyInt_Type);</div><div class="line">        v-&gt;ob_ival = ival;</div><div class="line">        small_ints[ival + NSMALLNEGINTS] = v;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缓存会用到数据结构<code>PyIntBlock</code>以及<code>block_list</code>和<code>free_list</code>链表。<code>PyInBlock</code>用来一次申请多个整数对象的内存，然后再一个个用作<code>PyIntObject</code>，并且通过域<code>next</code>链接到<code>block_list</code>链表上。<code>free_list</code>中是空闲的<code>PyIntObject</code>的链表。<code>fill_free_list</code>初始化后的内存结构如下。</p>
<p><img src="/blog/images/pyint_freelist.jpg" alt="image"></p>
<p>然后通过<code>_PyInt_init</code>初始化为小整数，并将其指针存储到<code>samll_ints</code>数组中加快查找。<code>_PyInt_init</code>初始化后的内存结构如下。</p>
<p><img src="/blog/images/pyint_smallints.jpg" alt="image"></p>
<p>我们可以看到整数对象通过<code>PyIntBlock</code>和<code>free_list</code>进行内存申请和缓存的。</p>
<h2 id="整数对象的创建"><a href="#整数对象的创建" class="headerlink" title="整数对象的创建"></a>整数对象的创建</h2><hr>
<p>当新创建一个整数对象时，先从<code>free_list</code>中查找空闲的整数对象，如果有则直接使用；否则会重新分配<code>PyIntBlock</code>结构并进行初始化。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function">PyObject *</span></div><div class="line"><span class="title">PyInt_FromLong</span><span class="params">(<span class="keyword">long</span> ival)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> PyIntObject *v;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line">    <span class="keyword">if</span> (-NSMALLNEGINTS &lt;= ival &amp;&amp; ival &lt; NSMALLPOSINTS) &#123;       # 是小整数则直接使用</div><div class="line">        v = small_ints[ival + NSMALLNEGINTS];</div><div class="line">        Py_INCREF(v);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COUNT_ALLOCS</span></div><div class="line">        <span class="keyword">if</span> (ival &gt;= <span class="number">0</span>)</div><div class="line">            quick_int_allocs++;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            quick_neg_int_allocs++;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        <span class="keyword">return</span> (PyObject *) v;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">if</span> (free_list == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ((free_list = fill_free_list()) == <span class="literal">NULL</span>)             # 没有空闲的整数对象则分配</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* Inline PyObject_New */</span></div><div class="line">    v = free_list;</div><div class="line">    free_list = (PyIntObject *)Py_TYPE(v);</div><div class="line">    PyObject_INIT(v, &amp;PyInt_Type);</div><div class="line">    v-&gt;ob_ival = ival;</div><div class="line">    <span class="keyword">return</span> (PyObject *) v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个新的整数<code>257</code>之后的数据结构：</p>
<p><img src="/blog/images/pyint_257.jpg" alt="image"></p>
<h2 id="整数对象的回收"><a href="#整数对象的回收" class="headerlink" title="整数对象的回收"></a>整数对象的回收</h2><hr>
<p>当整数对象的引用计数归零时则对其进行回收，由函数<code>int_free</code>操作</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">int_free</span><span class="params">(PyIntObject *v)</span></div><div class="line">&#123;</div><div class="line">    Py_TYPE(v) = (<span class="keyword">struct</span> <span class="number">_</span>typeobject *)free_list;</div><div class="line">    free_list = v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到被回收的整数对象被连接到<code>free_list</code>链表中。这里有个问题，整数对象的内存什么时候才真正释放呢？</p>
<h2 id="整数对象的释放"><a href="#整数对象的释放" class="headerlink" title="整数对象的释放"></a>整数对象的释放</h2><hr>
<p>原来整数对象的真正释放是在最高代的<code>GC</code>中进行，当<code>GC</code>运行时会调用<code>PyInt_ClearFreeList</code>进行整数对象内存的释放<code>PyInt_ClearFreeList</code>对整个<code>block_list</code>进行遍历，如果其中所有的整数对象的引用计数都为零，则释放整个<code>block</code>。可见整数对象的内存是以<code>PyIntBlock</code>为单位申请和释放的。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">PyInt_ClearFreeList</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    PyIntObject *p;</div><div class="line">    PyIntBlock *<span class="built_in">list</span>, *next;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> u;                      <span class="comment">/* remaining unfreed ints per block */</span></div><div class="line">    <span class="keyword">int</span> freelist_size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">list</span> = block_list;</div><div class="line">    block_list = <span class="literal">NULL</span>;</div><div class="line">    free_list = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">        u = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, p = &amp;<span class="built_in">list</span>-&gt;objects[<span class="number">0</span>];</div><div class="line">             i &lt; N_INTOBJECTS;</div><div class="line">             i++, p++) &#123;</div><div class="line">            <span class="keyword">if</span> (PyInt_CheckExact(p) &amp;&amp; p-&gt;ob_refcnt != <span class="number">0</span>)</div><div class="line">                u++;</div><div class="line">        &#125;</div><div class="line">        next = <span class="built_in">list</span>-&gt;next;</div><div class="line">        <span class="keyword">if</span> (u) &#123;                        # 遍历block发现其有引用计数部位零的对象</div><div class="line">            <span class="built_in">list</span>-&gt;next = block_list;</div><div class="line">            block_list = <span class="built_in">list</span>;</div><div class="line">            # 将PyIntBlock中引用计数为零的整数对象重新挂到free_list链表中</div><div class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, p = &amp;<span class="built_in">list</span>-&gt;objects[<span class="number">0</span>];</div><div class="line">                 i &lt; N_INTOBJECTS;</div><div class="line">                 i++, p++) &#123;</div><div class="line">                <span class="keyword">if</span> (!PyInt_CheckExact(p) ||</div><div class="line">                    p-&gt;ob_refcnt == <span class="number">0</span>) &#123;</div><div class="line">                    Py_TYPE(p) = (<span class="keyword">struct</span> <span class="number">_</span>typeobject *)</div><div class="line">                        free_list;</div><div class="line">                    free_list = p;</div><div class="line">                &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line">               <span class="comment">/* 这段代码没有作用。小整数对象都在small_ints中？</span></div><div class="line">                */</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (-NSMALLNEGINTS &lt;= p-&gt;ob_ival &amp;&amp;</div><div class="line">                         p-&gt;ob_ival &lt; NSMALLPOSINTS &amp;&amp;</div><div class="line">                         small_ints[p-&gt;ob_ival +</div><div class="line">                                    NSMALLNEGINTS] == <span class="literal">NULL</span>) &#123;</div><div class="line">                    Py_INCREF(p);</div><div class="line">                    small_ints[p-&gt;ob_ival +</div><div class="line">                               NSMALLNEGINTS] = p;</div><div class="line">                &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;              # 整个block的整数对象引用计数均为零，释放整个block</div><div class="line">            PyMem_FREE(<span class="built_in">list</span>);</div><div class="line">        &#125;</div><div class="line">        freelist_size += u;</div><div class="line">        <span class="built_in">list</span> = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> freelist_size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="整数对象的操作符"><a href="#整数对象的操作符" class="headerlink" title="整数对象的操作符"></a>整数对象的操作符</h2><hr>
<p>整数对象定义了许多操作符，可以通过以下代码自行查看。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">static</span> PyNumberMethods int_as_number = &#123;</div><div class="line">    (binaryfunc)int_add,        <span class="comment">/*nb_add*/</span></div><div class="line">    (binaryfunc)int_sub,        <span class="comment">/*nb_subtract*/</span></div><div class="line">    (binaryfunc)int_mul,        <span class="comment">/*nb_multiply*/</span></div><div class="line">    (binaryfunc)int_classic_div, <span class="comment">/*nb_divide*/</span></div><div class="line">    (binaryfunc)int_mod,        <span class="comment">/*nb_remainder*/</span></div><div class="line">    (binaryfunc)int_divmod,     <span class="comment">/*nb_divmod*/</span></div><div class="line">    (ternaryfunc)int_pow,       <span class="comment">/*nb_power*/</span></div><div class="line">    (unaryfunc)int_neg,         <span class="comment">/*nb_negative*/</span></div><div class="line">    (unaryfunc)int_int,         <span class="comment">/*nb_positive*/</span></div><div class="line">    (unaryfunc)int_abs,         <span class="comment">/*nb_absolute*/</span></div><div class="line">    (inquiry)int_nonzero,       <span class="comment">/*nb_nonzero*/</span></div><div class="line">    (unaryfunc)int_invert,      <span class="comment">/*nb_invert*/</span></div><div class="line">    (binaryfunc)int_lshift,     <span class="comment">/*nb_lshift*/</span></div><div class="line">    (binaryfunc)int_rshift,     <span class="comment">/*nb_rshift*/</span></div><div class="line">    (binaryfunc)int_and,        <span class="comment">/*nb_and*/</span></div><div class="line">    (binaryfunc)int_xor,        <span class="comment">/*nb_xor*/</span></div><div class="line">    (binaryfunc)int_or,         <span class="comment">/*nb_or*/</span></div><div class="line">    int_coerce,                 <span class="comment">/*nb_coerce*/</span></div><div class="line">    (unaryfunc)int_int,         <span class="comment">/*nb_int*/</span></div><div class="line">    (unaryfunc)int_long,        <span class="comment">/*nb_long*/</span></div><div class="line">    (unaryfunc)int_float,       <span class="comment">/*nb_float*/</span></div><div class="line">    (unaryfunc)int_oct,         <span class="comment">/*nb_oct*/</span></div><div class="line">    (unaryfunc)int_hex,         <span class="comment">/*nb_hex*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_add*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_subtract*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_multiply*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_divide*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_remainder*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_power*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_lshift*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_rshift*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_and*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_xor*/</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/*nb_inplace_or*/</span></div><div class="line">    (binaryfunc)int_div,        <span class="comment">/* nb_floor_divide */</span></div><div class="line">    (binaryfunc)int_true_divide, <span class="comment">/* nb_true_divide */</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/* nb_inplace_floor_divide */</span></div><div class="line">    <span class="number">0</span>,                          <span class="comment">/* nb_inplace_true_divide */</span></div><div class="line">    (unaryfunc)int_int,         <span class="comment">/* nb_index */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">PyTypeObject PyInt_Type = &#123;</div><div class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</div><div class="line">    <span class="string">"int"</span>,</div><div class="line">    <span class="keyword">sizeof</span>(PyIntObject),</div><div class="line">    <span class="number">0</span>,</div><div class="line">    (destructor)int_dealloc,                    <span class="comment">/* tp_dealloc */</span></div><div class="line">    (printfunc)int_print,                       <span class="comment">/* tp_print */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getattr */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattr */</span></div><div class="line">    (cmpfunc)int_compare,                       <span class="comment">/* tp_compare */</span></div><div class="line">    (reprfunc)int_to_decimal_string,            <span class="comment">/* tp_repr */</span></div><div class="line">    &amp;int_as_number,                             <span class="comment">/* tp_as_number */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_sequence */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_mapping */</span></div><div class="line">    (hashfunc)int_hash,                         <span class="comment">/* tp_hash */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_call */</span></div><div class="line">    (reprfunc)int_to_decimal_string,            <span class="comment">/* tp_str */</span></div><div class="line">    PyObject_GenericGetAttr,                    <span class="comment">/* tp_getattro */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattro */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_buffer */</span></div><div class="line">    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_CHECKTYPES |</div><div class="line">        Py_TPFLAGS_BASETYPE | Py_TPFLAGS_INT_SUBCLASS,          <span class="comment">/* tp_flags */</span></div><div class="line">    int_doc,                                    <span class="comment">/* tp_doc */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_traverse */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_clear */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_richcompare */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_weaklistoffset */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iter */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iternext */</span></div><div class="line">    int_methods,                                <span class="comment">/* tp_methods */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_members */</span></div><div class="line">    int_getset,                                 <span class="comment">/* tp_getset */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_base */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dict */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_get */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_set */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dictoffset */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_init */</span></div><div class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_alloc */</span></div><div class="line">    int_new,                                    <span class="comment">/* tp_new */</span></div><div class="line">    (freefunc)int_free,                         <span class="comment">/* tp_free */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="intobject-c源码注释"><a href="#intobject-c源码注释" class="headerlink" title="intobject.c源码注释"></a>intobject.c源码注释</h2><hr>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># 略</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整数对象的结构&quot;&gt;&lt;a href=&quot;#整数对象的结构&quot; class=&quot;headerlink&quot; title=&quot;整数对象的结构&quot;&gt;&lt;/a&gt;整数对象的结构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;整数对象是固定大小的Python对象，内部只有一个&lt;code&gt;ob_ival&lt;/code&gt;
    
    </summary>
    
      <category term="python源码剖析" scheme="http://fanchao01.github.io/blog/categories/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Python源码剖析—循环垃圾回收器</title>
    <link href="http://fanchao01.github.io/blog/2016/10/11/python-gc/"/>
    <id>http://fanchao01.github.io/blog/2016/10/11/python-gc/</id>
    <published>2016-10-11T07:00:00.000Z</published>
    <updated>2016-10-25T12:37:00.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python垃圾回收概述"><a href="#Python垃圾回收概述" class="headerlink" title="Python垃圾回收概述"></a>Python垃圾回收概述</h2><hr>
<p>Python中的垃圾回收机制基于引用计数(ob_refcnt)，因此需要解决循环引用导致引用计数不能归零的问题。例如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create[1]</span></div><div class="line">list1=[]              <span class="comment"># del</span></div><div class="line">list2=[list1]         <span class="comment"># del</span></div><div class="line">list1.append(list2)</div><div class="line"></div><div class="line">list3 = []            <span class="comment"># del</span></div><div class="line">list4 = []</div><div class="line">list5 = [list3, list4] <span class="comment"># del</span></div><div class="line">list6 = [list3, list4]</div><div class="line">list3.append(list4)</div><div class="line"></div><div class="line"><span class="comment"># del[2]</span></div><div class="line"><span class="keyword">del</span> list1; <span class="keyword">del</span> list2;<span class="keyword">del</span> list3;<span class="keyword">del</span> list5 <span class="comment"># [2]</span></div><div class="line"><span class="comment"># list1.ob_refcnt == list2.ob_refcnt == 1</span></div><div class="line"></div><div class="line"><span class="comment"># collect[3]</span></div><div class="line">gc.collect()</div></pre></td></tr></table></figure>
<p>虽然<code>list1</code>与<code>list2</code>已经成为需要回收的垃圾，但是由于相互引用导致引用计数不能归零，从而不能触发自动回收。因此Python引入了<code>循环垃圾收集器</code>。</p>
<h2 id="循环垃圾收集器的原理"><a href="#循环垃圾收集器的原理" class="headerlink" title="循环垃圾收集器的原理"></a>循环垃圾收集器的原理</h2><hr>
<p>判断对象是否为垃圾的逻辑比较直白，有外部引用或者被有外部引用的对象引用的对象为非垃圾对象；否则为垃圾对象。具体过程为，遍历所有对象将对象中引用的元素(其他对象)的引用计数减一，最后引用计数不归零的对象(存在外部引用)不是垃圾对象；被不是垃圾对象引用的元素(其他对象)也不是垃圾对象；剩余的则为垃圾对象。可以归纳为如下步骤：</p>
<ol>
<li>创建可能存在循环应用的对象时，将该对象纳入链表进行管理</li>
<li>遍历所有纳入管理的对象，将对象引用的元素(其他对象)的引用计数减一</li>
<li><p>再次遍历:<br><1> 处理对象：对该对象进行标记<br>所有引用计数为零的对象没有外部引用，标记为可能是垃圾；<br>所有引用计数不为零的对象存在外部引用，必然不是垃圾。</1></p>
<p>|0   |可能是垃圾 |list1、list2、list3、list5|<br>|&gt;0  |不是垃圾   |list4、list6|</p>
<p><2> 处理对象：遍历不是垃圾对象中的元素，不是垃圾对象中的元素必然不是垃圾</2></p>
</li>
<li>最后没有被确定不是垃圾的对象就是垃圾对象</li>
</ol>
<p>这部分处理代码比较复杂，每个对象可能作为两种角色进行处理。作为代中的对象以及作为对象中的引用元素。如果作为元素被处理，则肯定不是垃圾。</p>
<p>各个阶段对象中的引用计数</p>
<p><img src="/blog/images/python-gcmodule.jpg" alt="image"></p>
<h2 id="垃圾对象不一定能被自动回收"><a href="#垃圾对象不一定能被自动回收" class="headerlink" title="垃圾对象不一定能被自动回收"></a>垃圾对象不一定能被自动回收</h2><hr>
<p>垃圾对象不一定能被自动回收。所以上面的步骤只能确定垃圾对象，然后对垃圾对象进行额外处理甄别不能回收和能被回收的部分。</p>
<ul>
<li>垃圾对象：没有外部引用的对象，也没有被有外部引用的对象引用</li>
<li>可回收对象：垃圾对象中能够被自动回收的对象</li>
<li>reachable：非垃圾对象，存在外部引用或者被外部引用的对象引用</li>
<li>unrechable: 垃圾对象</li>
<li>collectable: 可回收对象</li>
<li>finalizers: 垃圾对象中不能被自动回收的对象。一些对象存在析构函数并且相互引用，这样的对象Python不能自动确定回收顺序，因此不能被自动回收。</li>
</ul>
<h2 id="不是所有对象都纳入循环垃圾收集器"><a href="#不是所有对象都纳入循环垃圾收集器" class="headerlink" title="不是所有对象都纳入循环垃圾收集器"></a>不是所有对象都纳入循环垃圾收集器</h2><hr>
<p>一些基本对象不会产生循环引用，例如int、float、string等，所以没有必须使用循环垃圾收集器，基本的引用计数回收机制即可。还有一些容器类对象，他们中的元素都是基本元素不会引起循环引用，例如{‘a’:1}、(1, 2, 3)，因此也不纳入循环垃圾收集器。所以只有部分容器类对象、生成器、含<code>__del__</code>类等才纳入循环垃圾收集器。</p>
<h2 id="垃圾回收中的代"><a href="#垃圾回收中的代" class="headerlink" title="垃圾回收中的代"></a>垃圾回收中的代</h2><hr>
<p>如上分析，整个循环垃圾收集的效率严重依赖可能引起循环引用的对象的个数。为了减少垃圾回收的动作，Python将对象分代：存活越长的对象越不可能是垃圾，就减少对其进行垃圾回收的次数。那么<code>存活</code>的时间长短就用经过了几次垃圾回收来判断，于是刚创建的对象为一代，当经过一次垃圾回收还存活的对象放入二代；多次一代垃圾回收后，才进行一次二代垃圾回收。Python将整个对象分为三代，当分配足够数量的对象后(700)进行一次一代回收；当进行一定数量(10)一代回收后进行二代回收；同理进行三代回收。</p>
<h2 id="gcmodule-c源码分析"><a href="#gcmodule-c源码分析" class="headerlink" title="gcmodule.c源码分析"></a>gcmodule.c源码分析</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div><div class="line">1347</div><div class="line">1348</div><div class="line">1349</div><div class="line">1350</div><div class="line">1351</div><div class="line">1352</div><div class="line">1353</div><div class="line">1354</div><div class="line">1355</div><div class="line">1356</div><div class="line">1357</div><div class="line">1358</div><div class="line">1359</div><div class="line">1360</div><div class="line">1361</div><div class="line">1362</div><div class="line">1363</div><div class="line">1364</div><div class="line">1365</div><div class="line">1366</div><div class="line">1367</div><div class="line">1368</div><div class="line">1369</div><div class="line">1370</div><div class="line">1371</div><div class="line">1372</div><div class="line">1373</div><div class="line">1374</div><div class="line">1375</div><div class="line">1376</div><div class="line">1377</div><div class="line">1378</div><div class="line">1379</div><div class="line">1380</div><div class="line">1381</div><div class="line">1382</div><div class="line">1383</div><div class="line">1384</div><div class="line">1385</div><div class="line">1386</div><div class="line">1387</div><div class="line">1388</div><div class="line">1389</div><div class="line">1390</div><div class="line">1391</div><div class="line">1392</div><div class="line">1393</div><div class="line">1394</div><div class="line">1395</div><div class="line">1396</div><div class="line">1397</div><div class="line">1398</div><div class="line">1399</div><div class="line">1400</div><div class="line">1401</div><div class="line">1402</div><div class="line">1403</div><div class="line">1404</div><div class="line">1405</div><div class="line">1406</div><div class="line">1407</div><div class="line">1408</div><div class="line">1409</div><div class="line">1410</div><div class="line">1411</div><div class="line">1412</div><div class="line">1413</div><div class="line">1414</div><div class="line">1415</div><div class="line">1416</div><div class="line">1417</div><div class="line">1418</div><div class="line">1419</div><div class="line">1420</div><div class="line">1421</div><div class="line">1422</div><div class="line">1423</div><div class="line">1424</div><div class="line">1425</div><div class="line">1426</div><div class="line">1427</div><div class="line">1428</div><div class="line">1429</div><div class="line">1430</div><div class="line">1431</div><div class="line">1432</div><div class="line">1433</div><div class="line">1434</div><div class="line">1435</div><div class="line">1436</div><div class="line">1437</div><div class="line">1438</div><div class="line">1439</div><div class="line">1440</div><div class="line">1441</div><div class="line">1442</div><div class="line">1443</div><div class="line">1444</div><div class="line">1445</div><div class="line">1446</div><div class="line">1447</div><div class="line">1448</div><div class="line">1449</div><div class="line">1450</div><div class="line">1451</div><div class="line">1452</div><div class="line">1453</div><div class="line">1454</div><div class="line">1455</div><div class="line">1456</div><div class="line">1457</div><div class="line">1458</div><div class="line">1459</div><div class="line">1460</div><div class="line">1461</div><div class="line">1462</div><div class="line">1463</div><div class="line">1464</div><div class="line">1465</div><div class="line">1466</div><div class="line">1467</div><div class="line">1468</div><div class="line">1469</div><div class="line">1470</div><div class="line">1471</div><div class="line">1472</div><div class="line">1473</div><div class="line">1474</div><div class="line">1475</div><div class="line">1476</div><div class="line">1477</div><div class="line">1478</div><div class="line">1479</div><div class="line">1480</div><div class="line">1481</div><div class="line">1482</div><div class="line">1483</div><div class="line">1484</div><div class="line">1485</div><div class="line">1486</div><div class="line">1487</div><div class="line">1488</div><div class="line">1489</div><div class="line">1490</div><div class="line">1491</div><div class="line">1492</div><div class="line">1493</div><div class="line">1494</div><div class="line">1495</div><div class="line">1496</div><div class="line">1497</div><div class="line">1498</div><div class="line">1499</div><div class="line">1500</div><div class="line">1501</div><div class="line">1502</div><div class="line">1503</div><div class="line">1504</div><div class="line">1505</div><div class="line">1506</div><div class="line">1507</div><div class="line">1508</div><div class="line">1509</div><div class="line">1510</div><div class="line">1511</div><div class="line">1512</div><div class="line">1513</div><div class="line">1514</div><div class="line">1515</div><div class="line">1516</div><div class="line">1517</div><div class="line">1518</div><div class="line">1519</div><div class="line">1520</div><div class="line">1521</div><div class="line">1522</div><div class="line">1523</div><div class="line">1524</div><div class="line">1525</div><div class="line">1526</div><div class="line">1527</div><div class="line">1528</div><div class="line">1529</div><div class="line">1530</div><div class="line">1531</div><div class="line">1532</div><div class="line">1533</div><div class="line">1534</div><div class="line">1535</div><div class="line">1536</div><div class="line">1537</div><div class="line">1538</div><div class="line">1539</div><div class="line">1540</div><div class="line">1541</div><div class="line">1542</div><div class="line">1543</div><div class="line">1544</div><div class="line">1545</div><div class="line">1546</div><div class="line">1547</div><div class="line">1548</div><div class="line">1549</div><div class="line">1550</div><div class="line">1551</div><div class="line">1552</div><div class="line">1553</div><div class="line">1554</div><div class="line">1555</div><div class="line">1556</div><div class="line">1557</div><div class="line">1558</div><div class="line">1559</div><div class="line">1560</div><div class="line">1561</div><div class="line">1562</div><div class="line">1563</div><div class="line">1564</div><div class="line">1565</div><div class="line">1566</div><div class="line">1567</div><div class="line">1568</div><div class="line">1569</div><div class="line">1570</div><div class="line">1571</div><div class="line">1572</div><div class="line">1573</div><div class="line">1574</div><div class="line">1575</div><div class="line">1576</div><div class="line">1577</div><div class="line">1578</div><div class="line">1579</div><div class="line">1580</div><div class="line">1581</div><div class="line">1582</div><div class="line">1583</div><div class="line">1584</div><div class="line">1585</div><div class="line">1586</div><div class="line">1587</div><div class="line">1588</div><div class="line">1589</div><div class="line">1590</div><div class="line">1591</div><div class="line">1592</div><div class="line">1593</div><div class="line">1594</div><div class="line">1595</div><div class="line">1596</div><div class="line">1597</div><div class="line">1598</div><div class="line">1599</div><div class="line">1600</div><div class="line">1601</div><div class="line">1602</div><div class="line">1603</div><div class="line">1604</div><div class="line">1605</div><div class="line">1606</div><div class="line">1607</div><div class="line">1608</div><div class="line">1609</div><div class="line">1610</div><div class="line">1611</div><div class="line">1612</div><div class="line">1613</div><div class="line">1614</div><div class="line">1615</div><div class="line">1616</div><div class="line">1617</div><div class="line">1618</div><div class="line">1619</div><div class="line">1620</div><div class="line">1621</div><div class="line">1622</div><div class="line">1623</div><div class="line">1624</div><div class="line">1625</div><div class="line">1626</div><div class="line">1627</div><div class="line">1628</div><div class="line">1629</div><div class="line">1630</div><div class="line">1631</div><div class="line">1632</div><div class="line">1633</div><div class="line">1634</div><div class="line">1635</div><div class="line">1636</div><div class="line">1637</div><div class="line">1638</div><div class="line">1639</div><div class="line">1640</div><div class="line">1641</div><div class="line">1642</div><div class="line">1643</div><div class="line">1644</div><div class="line">1645</div><div class="line">1646</div><div class="line">1647</div><div class="line">1648</div><div class="line">1649</div><div class="line">1650</div><div class="line">1651</div><div class="line">1652</div><div class="line">1653</div><div class="line">1654</div><div class="line">1655</div><div class="line">1656</div><div class="line">1657</div><div class="line">1658</div><div class="line">1659</div><div class="line">1660</div><div class="line">1661</div><div class="line">1662</div><div class="line">1663</div><div class="line">1664</div><div class="line">1665</div><div class="line">1666</div><div class="line">1667</div><div class="line">1668</div><div class="line">1669</div><div class="line">1670</div><div class="line">1671</div><div class="line">1672</div><div class="line">1673</div><div class="line">1674</div><div class="line">1675</div><div class="line">1676</div><div class="line">1677</div><div class="line">1678</div><div class="line">1679</div><div class="line">1680</div><div class="line">1681</div><div class="line">1682</div><div class="line">1683</div><div class="line">1684</div><div class="line">1685</div><div class="line">1686</div><div class="line">1687</div><div class="line">1688</div><div class="line">1689</div><div class="line">1690</div><div class="line">1691</div><div class="line">1692</div><div class="line">1693</div><div class="line">1694</div><div class="line">1695</div><div class="line">1696</div><div class="line">1697</div><div class="line">1698</div><div class="line">1699</div><div class="line">1700</div><div class="line">1701</div><div class="line">1702</div><div class="line">1703</div><div class="line">1704</div><div class="line">1705</div><div class="line">1706</div><div class="line">1707</div><div class="line">1708</div><div class="line">1709</div><div class="line">1710</div><div class="line">1711</div><div class="line">1712</div><div class="line">1713</div><div class="line">1714</div><div class="line">1715</div><div class="line">1716</div><div class="line">1717</div><div class="line">1718</div><div class="line">1719</div><div class="line">1720</div><div class="line">1721</div><div class="line">1722</div><div class="line">1723</div><div class="line">1724</div><div class="line">1725</div><div class="line">1726</div><div class="line">1727</div><div class="line">1728</div><div class="line">1729</div><div class="line">1730</div><div class="line">1731</div><div class="line">1732</div><div class="line">1733</div><div class="line">1734</div><div class="line">1735</div><div class="line">1736</div><div class="line">1737</div><div class="line">1738</div><div class="line">1739</div><div class="line">1740</div><div class="line">1741</div><div class="line">1742</div><div class="line">1743</div><div class="line">1744</div><div class="line">1745</div><div class="line">1746</div><div class="line">1747</div><div class="line">1748</div><div class="line">1749</div><div class="line">1750</div><div class="line">1751</div><div class="line">1752</div><div class="line">1753</div><div class="line">1754</div><div class="line">1755</div><div class="line">1756</div><div class="line">1757</div><div class="line">1758</div><div class="line">1759</div><div class="line">1760</div><div class="line">1761</div><div class="line">1762</div><div class="line">1763</div><div class="line">1764</div><div class="line">1765</div><div class="line">1766</div><div class="line">1767</div><div class="line">1768</div><div class="line">1769</div><div class="line">1770</div><div class="line">1771</div><div class="line">1772</div><div class="line">1773</div><div class="line">1774</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"></div><div class="line">  Reference Cycle Garbage Collection</div><div class="line">  ==================================</div><div class="line"></div><div class="line">  Neil Schemenauer &lt;nas@arctrix.com&gt;</div><div class="line"></div><div class="line">  Based on a post on the python-dev list.  Ideas from Guido van Rossum,</div><div class="line">  Eric Tiedemann, and various others.</div><div class="line"></div><div class="line">  http://www.arctrix.com/nas/python/gc/</div><div class="line">  http://www.python.org/pipermail/python-dev/2000-March/003869.html</div><div class="line">  http://www.python.org/pipermail/python-dev/2000-March/004010.html</div><div class="line">  http://www.python.org/pipermail/python-dev/2000-March/004022.html</div><div class="line"></div><div class="line">  For a highlevel view of the collection process, read the collect</div><div class="line">  function.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">#include "Python.h"</div><div class="line">#include "frameobject.h"        /* for PyFrame_ClearFreeList */</div><div class="line"></div><div class="line">/* </div><div class="line"> * 带有垃圾回收头部的对象的内存模型</div><div class="line"> * ------------------------------</div><div class="line"> * g          o</div><div class="line"> * |PyGC_Head | PyObject | other|</div><div class="line"> * ------------------------------</div><div class="line"> *           </div><div class="line"> * 因此给定地址o计算g就是将地址减少sizeof(PyGC_HEAD)</div><div class="line"> * </div><div class="line"> * 说明：</div><div class="line"> * 1. 垃圾管理有两部分 引用计数 和 循环垃圾收集器</div><div class="line"> * 2. 简单的对象不产生循环引用使用引用计数即可：例如 int、float、string等</div><div class="line"> * 3. 有可能产生循环引用的对象(容器类)才需要循环垃圾收集器: 例如 list、dict</div><div class="line"> * 4. Python对一些容器类对象进行优化，如果容器内的元素不会产生循环引用，</div><div class="line"> *    则不会纳入循环引用管理: 例如 &#123;'a': 1&#125;, [1, 2, 'a']</div><div class="line"> */</div><div class="line">/* Get an object's GC head */</div><div class="line">#define AS_GC(o) ((PyGC_Head *)(o)-1)</div><div class="line"></div><div class="line">/* Get the object given the GC head */</div><div class="line">#define FROM_GC(g) ((PyObject *)(((PyGC_Head *)g)+1))</div><div class="line"></div><div class="line">/*** Global GC state ***/</div><div class="line"></div><div class="line">/* 每一代的寿命是比该代年轻的那代运行的次数</div><div class="line"> * 例如 第1代没运行一次，第2代年龄增加一岁</div><div class="line"> */</div><div class="line"></div><div class="line">struct gc_generation &#123;</div><div class="line">    PyGC_Head head;</div><div class="line">    /* 寿命 */</div><div class="line">    int threshold; /* collection threshold */</div><div class="line">    /* 年龄，到了寿命就该回收了 */</div><div class="line">    int count; /* count of allocations or collections of younger</div><div class="line">                  generations */</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/* Python只有3代 */</div><div class="line">#define NUM_GENERATIONS 3</div><div class="line">#define GEN_HEAD(n) (&amp;generations[n].head)</div><div class="line"></div><div class="line">/* linked lists of container objects */</div><div class="line">/* linked lists结构，初始化时每个链表指向自己的头</div><div class="line"> * 内存模型如下:</div><div class="line"> * ---------------------------</div><div class="line"> * g0                        |</div><div class="line"> * |next(g0)|prev(g0)|0|700|0|</div><div class="line"> * g1                        |</div><div class="line"> * |next(g1)|prev(g1)|0|10 |0| </div><div class="line"> * g2                         |</div><div class="line"> * |next(g2)|prev(g2)|0|10 |0|</div><div class="line"> * ---------------------------</div><div class="line"> * generation[i].head.next = generation[i].head.prev = &amp;generation[i]</div><div class="line"> * &amp;generation[i] == &amp;generation[i].head</div><div class="line"> */</div><div class="line">static struct gc_generation generations[NUM_GENERATIONS] = &#123;</div><div class="line">    /* PyGC_Head,                               threshold,      count */</div><div class="line">    &#123;&#123;&#123;GEN_HEAD(0), GEN_HEAD(0), 0&#125;&#125;,           700,            0&#125;,</div><div class="line">    &#123;&#123;&#123;GEN_HEAD(1), GEN_HEAD(1), 0&#125;&#125;,           10,             0&#125;,</div><div class="line">    &#123;&#123;&#123;GEN_HEAD(2), GEN_HEAD(2), 0&#125;&#125;,           10,             0&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">PyGC_Head *_PyGC_generation0 = GEN_HEAD(0);</div><div class="line"></div><div class="line">static int enabled = 1; /* automatic collection enabled? */</div><div class="line"></div><div class="line">/* true if we are currently running the collector */</div><div class="line">static int collecting = 0;</div><div class="line"></div><div class="line"></div><div class="line">/* list of uncollectable objects  */</div><div class="line"></div><div class="line">/* unreachable:</div><div class="line"> * 没有外部引用，只有被彼此循环引用的对象。例如</div><div class="line"> * list1=[];list2=[list1];list1.append(list2)</div><div class="line"> * del list1; del list2</div><div class="line"> * 那么list1和list2不能通过其他对象到达</div><div class="line"> *</div><div class="line"> * uncollectable:</div><div class="line"> * unreachable并且有 __del__ 方法的对象</div><div class="line"> *  __del__由用户自定义，可能引用了其他的对象。</div><div class="line"> */</div><div class="line">static PyObject *garbage = NULL;</div><div class="line"></div><div class="line">/* Python string to use if unhandled exception occurs */</div><div class="line">static PyObject *gc_str = NULL;</div><div class="line"></div><div class="line">/* Python string used to look for __del__ attribute. */</div><div class="line">static PyObject *delstr = NULL;</div><div class="line"></div><div class="line">/* This is the number of objects who survived the last full collection. It</div><div class="line">   approximates the number of long lived objects tracked by the GC.</div><div class="line"></div><div class="line">   (by "full collection", we mean a collection of the oldest generation).</div><div class="line">*/</div><div class="line"></div><div class="line">/* 经过一次第三代收集还存活的则为 long_lived </div><div class="line"> * 运行一次第三代的垃圾回收叫 full collection。</div><div class="line"> */</div><div class="line">static Py_ssize_t long_lived_total = 0;</div><div class="line"></div><div class="line">/* This is the number of objects who survived all "non-full" collections,</div><div class="line">   and are awaiting to undergo a full collection for the first time.</div><div class="line">*/</div><div class="line">/* 第二代回收时，不能被回收而移动到第三代的对象个数 */</div><div class="line">static Py_ssize_t long_lived_pending = 0;</div><div class="line"></div><div class="line">/*</div><div class="line">   NOTE: about the counting of long-lived objects.</div><div class="line"></div><div class="line">   To limit the cost of garbage collection, there are two strategies;</div><div class="line">     - make each collection faster, e.g. by scanning fewer objects</div><div class="line">     - do less collections</div><div class="line">   This heuristic is about the latter strategy.</div><div class="line"></div><div class="line">   In addition to the various configurable thresholds, we only trigger a</div><div class="line">   full collection if the ratio</div><div class="line">    long_lived_pending / long_lived_total</div><div class="line">   is above a given value (hardwired to 25%).</div><div class="line"></div><div class="line">   The reason is that, while "non-full" collections (i.e., collections of</div><div class="line">   the young and middle generations) will always examine roughly the same</div><div class="line">   number of objects -- determined by the aforementioned thresholds --,</div><div class="line">   the cost of a full collection is proportional to the total number of</div><div class="line">   long-lived objects, which is virtually unbounded.</div><div class="line"></div><div class="line">   Indeed, it has been remarked that doing a full collection every</div><div class="line">   &lt;constant number&gt; of object creations entails a dramatic performance</div><div class="line">   degradation in workloads which consist in creating and storing lots of</div><div class="line">   long-lived objects (e.g. building a large list of GC-tracked objects would</div><div class="line">   show quadratic performance, instead of linear as expected: see issue #4074).</div><div class="line"></div><div class="line">   Using the above ratio, instead, yields amortized linear performance in</div><div class="line">   the total number of objects (the effect of which can be summarized</div><div class="line">   thusly: "each full garbage collection is more and more costly as the</div><div class="line">   number of objects grows, but we do fewer and fewer of them").</div><div class="line"></div><div class="line">   This heuristic was suggested by Martin von Löwis on python-dev in</div><div class="line">   June 2008. His original analysis and proposal can be found at:</div><div class="line">    http://mail.python.org/pipermail/python-dev/2008-June/080579.html</div><div class="line">*/</div><div class="line"></div><div class="line">/*</div><div class="line">   NOTE: about untracking of mutable objects.</div><div class="line"></div><div class="line">   Certain types of container cannot participate in a reference cycle, and</div><div class="line">   so do not need to be tracked by the garbage collector. Untracking these</div><div class="line">   objects reduces the cost of garbage collections. However, determining</div><div class="line">   which objects may be untracked is not free, and the costs must be</div><div class="line">   weighed against the benefits for garbage collection.</div><div class="line"></div><div class="line">   There are two possible strategies for when to untrack a container:</div><div class="line"></div><div class="line">   i) When the container is created.</div><div class="line">   ii) When the container is examined by the garbage collector.</div><div class="line"></div><div class="line">   Tuples containing only immutable objects (integers, strings etc, and</div><div class="line">   recursively, tuples of immutable objects) do not need to be tracked.</div><div class="line">   The interpreter creates a large number of tuples, many of which will</div><div class="line">   not survive until garbage collection. It is therefore not worthwhile</div><div class="line">   to untrack eligible tuples at creation time.</div><div class="line"></div><div class="line">   Instead, all tuples except the empty tuple are tracked when created.</div><div class="line">   During garbage collection it is determined whether any surviving tuples</div><div class="line">   can be untracked. A tuple can be untracked if all of its contents are</div><div class="line">   already not tracked. Tuples are examined for untracking in all garbage</div><div class="line">   collection cycles. It may take more than one cycle to untrack a tuple.</div><div class="line"></div><div class="line">   Dictionaries containing only immutable objects also do not need to be</div><div class="line">   tracked. Dictionaries are untracked when created. If a tracked item is</div><div class="line">   inserted into a dictionary (either as a key or value), the dictionary</div><div class="line">   becomes tracked. During a full garbage collection (all generations),</div><div class="line">   the collector will untrack any dictionaries whose contents are not</div><div class="line">   tracked.</div><div class="line"></div><div class="line">   The module provides the python function is_tracked(obj), which returns</div><div class="line">   the CURRENT tracking status of the object. Subsequent garbage</div><div class="line">   collections may change the tracking status of the object.</div><div class="line"></div><div class="line">   Untracking of certain containers was introduced in issue #4688, and</div><div class="line">   the algorithm was refined in response to issue #14775.</div><div class="line">*/</div><div class="line"> /* 简单说：</div><div class="line">  * 垃圾回收的效率取决于纳入垃圾管理的对象的数量</div><div class="line">  */</div><div class="line"></div><div class="line">/* set for debugging information */</div><div class="line">#define DEBUG_STATS             (1&lt;&lt;0) /* print collection statistics */</div><div class="line">#define DEBUG_COLLECTABLE       (1&lt;&lt;1) /* print collectable objects */</div><div class="line">#define DEBUG_UNCOLLECTABLE     (1&lt;&lt;2) /* print uncollectable objects */</div><div class="line">#define DEBUG_INSTANCES         (1&lt;&lt;3) /* print instances */</div><div class="line">#define DEBUG_OBJECTS           (1&lt;&lt;4) /* print other objects */</div><div class="line">#define DEBUG_SAVEALL           (1&lt;&lt;5) /* save all garbage in gc.garbage */</div><div class="line">#define DEBUG_LEAK              DEBUG_COLLECTABLE | \</div><div class="line">                DEBUG_UNCOLLECTABLE | \</div><div class="line">                DEBUG_INSTANCES | \</div><div class="line">                DEBUG_OBJECTS | \</div><div class="line">                DEBUG_SAVEALL</div><div class="line">static int debug;</div><div class="line">static PyObject *tmod = NULL;</div><div class="line"></div><div class="line">/*--------------------------------------------------------------------------</div><div class="line">gc_refs values.</div><div class="line"></div><div class="line">Between collections, every gc'ed object has one of two gc_refs values:</div><div class="line"></div><div class="line">GC_UNTRACKED</div><div class="line">    The initial state; objects returned by PyObject_GC_Malloc are in this</div><div class="line">    state.  The object doesn't live in any generation list, and its</div><div class="line">    tp_traverse slot must not be called.</div><div class="line">    </div><div class="line">    没有纳入收集器管理的对象，例如 刚通过PyObject_GC_Malloc初始化的对象，</div><div class="line">    int，float等，当然也不存在任何"代"中。</div><div class="line"></div><div class="line">GC_REACHABLE</div><div class="line">    The object lives in some generation list, and its tp_traverse is safe to</div><div class="line">    call.  An object transitions to GC_REACHABLE when PyObject_GC_Track</div><div class="line">    is called.</div><div class="line"></div><div class="line">    纳入了收集器管理的对象，并且可以通过各对象的tp_traverse处理的对象</div><div class="line">    纳入管理，并且在有向图中可以到达(不存在循环引用)</div><div class="line"></div><div class="line"></div><div class="line">代中对象的处理和gc_refs：</div><div class="line">1. 遍历整个代中的对象，将对象中的所有元素gc_refs-1</div><div class="line">2. 再次遍历整个代中的对象，此时gc_refs：</div><div class="line">   0：对象只被代中的其他对象引用，例如：</div><div class="line">      list1=[]; list2=[list1];del list1;del list2</div><div class="line">      设置gc_refs = GC_TENTATIVELY_UNREACHABLE</div><div class="line"></div><div class="line">   &gt;0: 对象有外部引用</div><div class="line">      设置gc_refs = 1</div><div class="line"></div><div class="line">3. 遍历代中的对象中的元素，此时gc_refs：</div><div class="line">   GC_TENTATIVELY_UNREACHABLE: </div><div class="line">       说明之前作为代中的对象处理过，确实是unreachable</div><div class="line">       设置GC_REACHABLE</div><div class="line"></div><div class="line">   1，GC_UNTRACKED，GC_REACHABLE： </div><div class="line">       保持不变，仍在代中</div><div class="line"></div><div class="line">During a collection, gc_refs can temporarily take on other states:</div><div class="line"></div><div class="line"></div><div class="line">&gt;= 0</div><div class="line">    At the start of a collection, update_refs() copies the true refcount</div><div class="line">    to gc_refs, for each object in the generation being collected.</div><div class="line">    subtract_refs() then adjusts gc_refs so that it equals the number of</div><div class="line">    times an object is referenced directly from outside the generation</div><div class="line">    being collected.</div><div class="line">    gc_refs remains &gt;= 0 throughout these steps.</div><div class="line"></div><div class="line">GC_TENTATIVELY_UNREACHABLE</div><div class="line">    move_unreachable() then moves objects not reachable (whether directly or</div><div class="line">    indirectly) from outside the generation into an "unreachable" set.</div><div class="line">    Objects that are found to be reachable have gc_refs set to GC_REACHABLE</div><div class="line">    again.  Objects that are found to be unreachable have gc_refs set to</div><div class="line">    GC_TENTATIVELY_UNREACHABLE.  It's "tentatively" because the pass doing</div><div class="line">    this can't be sure until it ends, and GC_TENTATIVELY_UNREACHABLE may</div><div class="line">    transition back to GC_REACHABLE.</div><div class="line"></div><div class="line">    遍历时的临时状态，当遍历时将暂时不能到达的对象设置为该状态。</div><div class="line"></div><div class="line">    Only objects with GC_TENTATIVELY_UNREACHABLE still set are candidates</div><div class="line">    for collection.  If it's decided not to collect such an object (e.g.,</div><div class="line">    it has a __del__ method), its gc_refs is restored to GC_REACHABLE again.</div><div class="line">----------------------------------------------------------------------------</div><div class="line">*/</div><div class="line">#define GC_UNTRACKED                    _PyGC_REFS_UNTRACKED</div><div class="line">#define GC_REACHABLE                    _PyGC_REFS_REACHABLE</div><div class="line">#define GC_TENTATIVELY_UNREACHABLE      _PyGC_REFS_TENTATIVELY_UNREACHABLE</div><div class="line"></div><div class="line">#define IS_TRACKED(o) ((AS_GC(o))-&gt;gc.gc_refs != GC_UNTRACKED)</div><div class="line">#define IS_REACHABLE(o) ((AS_GC(o))-&gt;gc.gc_refs == GC_REACHABLE)</div><div class="line">#define IS_TENTATIVELY_UNREACHABLE(o) ( \</div><div class="line">    (AS_GC(o))-&gt;gc.gc_refs == GC_TENTATIVELY_UNREACHABLE)</div><div class="line"></div><div class="line">/*** list functions ***/</div><div class="line"></div><div class="line">static void</div><div class="line">gc_list_init(PyGC_Head *list)</div><div class="line">&#123;</div><div class="line">    list-&gt;gc.gc_prev = list;</div><div class="line">    list-&gt;gc.gc_next = list;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int</div><div class="line">gc_list_is_empty(PyGC_Head *list)</div><div class="line">&#123;</div><div class="line">    return (list-&gt;gc.gc_next == list);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#if 0</div><div class="line">/* This became unused after gc_list_move() was introduced. */</div><div class="line">/* Append `node` to `list`. */</div><div class="line">static void</div><div class="line">gc_list_append(PyGC_Head *node, PyGC_Head *list)</div><div class="line">&#123;</div><div class="line">    node-&gt;gc.gc_next = list;</div><div class="line">    node-&gt;gc.gc_prev = list-&gt;gc.gc_prev;</div><div class="line">    node-&gt;gc.gc_prev-&gt;gc.gc_next = node;</div><div class="line">    list-&gt;gc.gc_prev = node;</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line"></div><div class="line">/* Remove `node` from the gc list it's currently in. */</div><div class="line">static void</div><div class="line">gc_list_remove(PyGC_Head *node)</div><div class="line">&#123;</div><div class="line">    node-&gt;gc.gc_prev-&gt;gc.gc_next = node-&gt;gc.gc_next;</div><div class="line">    node-&gt;gc.gc_next-&gt;gc.gc_prev = node-&gt;gc.gc_prev;</div><div class="line">    node-&gt;gc.gc_next = NULL; /* object is not currently tracked */</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Move `node` from the gc list it's currently in (which is not explicitly</div><div class="line"> * named here) to the end of `list`.  This is semantically the same as</div><div class="line"> * gc_list_remove(node) followed by gc_list_append(node, list).</div><div class="line"> */</div><div class="line">static void</div><div class="line">gc_list_move(PyGC_Head *node, PyGC_Head *list)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *new_prev;</div><div class="line">    PyGC_Head *current_prev = node-&gt;gc.gc_prev;</div><div class="line">    PyGC_Head *current_next = node-&gt;gc.gc_next;</div><div class="line">    /* Unlink from current list. */</div><div class="line">    current_prev-&gt;gc.gc_next = current_next;</div><div class="line">    current_next-&gt;gc.gc_prev = current_prev;</div><div class="line">    /* Relink at end of new list. */</div><div class="line">    new_prev = node-&gt;gc.gc_prev = list-&gt;gc.gc_prev;</div><div class="line">    new_prev-&gt;gc.gc_next = list-&gt;gc.gc_prev = node;</div><div class="line">    node-&gt;gc.gc_next = list;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* append list `from` onto list `to`; `from` becomes an empty list */</div><div class="line">/* 将 from 整体挂到 to 的头部 */</div><div class="line">static void</div><div class="line">gc_list_merge(PyGC_Head *from, PyGC_Head *to)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *tail;</div><div class="line">    assert(from != to);</div><div class="line">    if (!gc_list_is_empty(from)) &#123;</div><div class="line">        tail = to-&gt;gc.gc_prev;</div><div class="line">        tail-&gt;gc.gc_next = from-&gt;gc.gc_next;</div><div class="line">        tail-&gt;gc.gc_next-&gt;gc.gc_prev = tail;</div><div class="line">        to-&gt;gc.gc_prev = from-&gt;gc.gc_prev;</div><div class="line">        to-&gt;gc.gc_prev-&gt;gc.gc_next = to;</div><div class="line">    &#125;</div><div class="line">    gc_list_init(from);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static Py_ssize_t</div><div class="line">gc_list_size(PyGC_Head *list)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc;</div><div class="line">    Py_ssize_t n = 0;</div><div class="line">    for (gc = list-&gt;gc.gc_next; gc != list; gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    return n;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Append objects in a GC list to a Python list.</div><div class="line"> * Return 0 if all OK, &lt; 0 if error (out of memory for list).</div><div class="line"> */</div><div class="line">static int</div><div class="line">append_objects(PyObject *py_list, PyGC_Head *gc_list)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc;</div><div class="line">    for (gc = gc_list-&gt;gc.gc_next; gc != gc_list; gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        PyObject *op = FROM_GC(gc);</div><div class="line">        if (op != py_list) &#123;</div><div class="line">            if (PyList_Append(py_list, op)) &#123;</div><div class="line">                return -1; /* exception */</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*** end of list stuff ***/</div><div class="line"></div><div class="line"></div><div class="line">/* Set all gc_refs = ob_refcnt.  After this, gc_refs is &gt; 0 for all objects</div><div class="line"> * in containers, and is GC_REACHABLE for all tracked gc objects not in</div><div class="line"> * containers.</div><div class="line"> */</div><div class="line">static void</div><div class="line">update_refs(PyGC_Head *containers)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc = containers-&gt;gc.gc_next;</div><div class="line">    for (; gc != containers; gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        assert(gc-&gt;gc.gc_refs == GC_REACHABLE);</div><div class="line">        gc-&gt;gc.gc_refs = Py_REFCNT(FROM_GC(gc));</div><div class="line">        /* Python's cyclic gc should never see an incoming refcount</div><div class="line">         * of 0:  if something decref'ed to 0, it should have been</div><div class="line">         * deallocated immediately at that time.</div><div class="line">         * Possible cause (if the assert triggers):  a tp_dealloc</div><div class="line">         * routine left a gc-aware object tracked during its teardown</div><div class="line">         * phase, and did something-- or allowed something to happen --</div><div class="line">         * that called back into Python.  gc can trigger then, and may</div><div class="line">         * see the still-tracked dying object.  Before this assert</div><div class="line">         * was added, such mistakes went on to allow gc to try to</div><div class="line">         * delete the object again.  In a debug build, that caused</div><div class="line">         * a mysterious segfault, when _Py_ForgetReference tried</div><div class="line">         * to remove the object from the doubly-linked list of all</div><div class="line">         * objects a second time.  In a release build, an actual</div><div class="line">         * double deallocation occurred, which leads to corruption</div><div class="line">         * of the allocator's internal bookkeeping pointers.  That's</div><div class="line">         * so serious that maybe this should be a release-build</div><div class="line">         * check instead of an assert?</div><div class="line">         */</div><div class="line">        assert(gc-&gt;gc.gc_refs != 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* A traversal callback for subtract_refs. */</div><div class="line">static int</div><div class="line">visit_decref(PyObject *op, void *data)</div><div class="line">&#123;</div><div class="line">    assert(op != NULL);</div><div class="line">    if (PyObject_IS_GC(op)) &#123;</div><div class="line">        PyGC_Head *gc = AS_GC(op);</div><div class="line">        /* We're only interested in gc_refs for objects in the</div><div class="line">         * generation being collected, which can be recognized</div><div class="line">         * because only they have positive gc_refs.</div><div class="line">         */</div><div class="line">        assert(gc-&gt;gc.gc_refs != 0); /* else refcount was too small */</div><div class="line">        if (gc-&gt;gc.gc_refs &gt; 0)</div><div class="line">            gc-&gt;gc.gc_refs--;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Subtract internal references from gc_refs.  After this, gc_refs is &gt;= 0</div><div class="line"> * for all objects in containers, and is GC_REACHABLE for all tracked gc</div><div class="line"> * objects not in containers.  The ones with gc_refs &gt; 0 are directly</div><div class="line"> * reachable from outside containers, and so can't be collected.</div><div class="line"> */</div><div class="line">/*</div><div class="line"> * 调用容器类的tp_traverse对每个元素的gc_refs-1，</div><div class="line"> * 如果gc_refs&gt;0说明元素在该容器外还有引用，所以不能回收</div><div class="line"> */</div><div class="line">static void</div><div class="line">subtract_refs(PyGC_Head *containers)</div><div class="line">&#123;</div><div class="line">    traverseproc traverse;</div><div class="line">    PyGC_Head *gc = containers-&gt;gc.gc_next;</div><div class="line">    for (; gc != containers; gc=gc-&gt;gc.gc_next) &#123;</div><div class="line">        traverse = Py_TYPE(FROM_GC(gc))-&gt;tp_traverse;</div><div class="line">        (void) traverse(FROM_GC(gc),</div><div class="line">                       (visitproc)visit_decref,</div><div class="line">                       NULL);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* A traversal callback for move_unreachable. */</div><div class="line">/* op 是容器类的元素；reachable是代本身 */</div><div class="line">static int</div><div class="line">visit_reachable(PyObject *op, PyGC_Head *reachable)</div><div class="line">&#123;</div><div class="line">    if (PyObject_IS_GC(op)) &#123;</div><div class="line">        PyGC_Head *gc = AS_GC(op);</div><div class="line">        const Py_ssize_t gc_refs = gc-&gt;gc.gc_refs;</div><div class="line"></div><div class="line">        if (gc_refs == 0) &#123;</div><div class="line">            /* This is in move_unreachable's 'young' list, but</div><div class="line">             * the traversal hasn't yet gotten to it.  All</div><div class="line">             * we need to do is tell move_unreachable that it's</div><div class="line">             * reachable.</div><div class="line">             */</div><div class="line">            /*</div><div class="line">             * 元素没有引用，说明只有元素所在的容器本身引用该元素</div><div class="line">             * 举例： list1 = []; list2=[]; list1.append(list2); </div><div class="line">             *        del list2</div><div class="line">             * </div><div class="line">             * list1-&gt;ob_refcnt == 1, list-&gt;gc_refs == 1</div><div class="line">             * list2-&gt;ob_refcnt == 1, list-&gt;gc_refs == 0</div><div class="line">             *</div><div class="line">             * 所以：</div><div class="line">             * list2作为list1的元素进入当前的处理，依然是reachable</div><div class="line">             */</div><div class="line">            gc-&gt;gc.gc_refs = 1;</div><div class="line">        &#125;</div><div class="line">        else if (gc_refs == GC_TENTATIVELY_UNREACHABLE) &#123;</div><div class="line">            /* This had gc_refs = 0 when move_unreachable got</div><div class="line">             * to it, but turns out it's reachable after all.</div><div class="line">             * Move it back to move_unreachable's 'young' list,</div><div class="line">             * and move_unreachable will eventually get to it</div><div class="line">             * again.</div><div class="line">             */</div><div class="line">            /*</div><div class="line">             * 元素之前经历过1次move_unreachable处理并且被认为是unreachable</div><div class="line">             * 例如：</div><div class="line">             * list1=[];list2=[list1]; list1.append(list2)</div><div class="line">             * del list1;</div><div class="line">             *</div><div class="line">             * 第一次，list1作为容器被move_unreachable处理</div><div class="line">             * 会被标记为GC_TENTATIVELY_UNREACHABLE，认为其可以被回收</div><div class="line">             *</div><div class="line">             * 第二次，list1作为list2的元素会进入到该处</div><div class="line">             * 此时证明list1确实是list2的元素，是reachable的</div><div class="line">             *</div><div class="line">             * 这里的reachable为代链表本身，就是将gc移动到了链表尾端</div><div class="line">             */</div><div class="line">            gc_list_move(gc, reachable);</div><div class="line">            gc-&gt;gc.gc_refs = 1;</div><div class="line">        &#125;</div><div class="line">        /* Else there's nothing to do.</div><div class="line">         * If gc_refs &gt; 0, it must be in move_unreachable's 'young'</div><div class="line">         * list, and move_unreachable will eventually get to it.</div><div class="line">         * If gc_refs == GC_REACHABLE, it's either in some other</div><div class="line">         * generation so we don't care about it, or move_unreachable</div><div class="line">         * already dealt with it.</div><div class="line">         * If gc_refs == GC_UNTRACKED, it must be ignored.</div><div class="line">         */</div><div class="line">        /*</div><div class="line">         * gc_refs &gt; 0 : 处理过了证明是reachable</div><div class="line">         * GC_REACHABLE：标记为reachable的元素</div><div class="line">         * GC_UNTRACKED：不需要循环垃圾收集器处理的元素</div><div class="line">         */</div><div class="line">         else &#123;</div><div class="line">            assert(gc_refs &gt; 0</div><div class="line">                   || gc_refs == GC_REACHABLE</div><div class="line">                   || gc_refs == GC_UNTRACKED);</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Move the unreachable objects from young to unreachable.  After this,</div><div class="line"> * all objects in young have gc_refs = GC_REACHABLE, and all objects in</div><div class="line"> * unreachable have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All tracked</div><div class="line"> * gc objects not in young or unreachable still have gc_refs = GC_REACHABLE.</div><div class="line"> * All objects in young after this are directly or indirectly reachable</div><div class="line"> * from outside the original young; and all objects in unreachable are</div><div class="line"> * not.</div><div class="line"> */</div><div class="line">static void</div><div class="line">move_unreachable(PyGC_Head *young, PyGC_Head *unreachable)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc = young-&gt;gc.gc_next;</div><div class="line"></div><div class="line">    /* Invariants:  all objects "to the left" of us in young have gc_refs</div><div class="line">     * = GC_REACHABLE, and are indeed reachable (directly or indirectly)</div><div class="line">     * from outside the young list as it was at entry.  All other objects</div><div class="line">     * from the original young "to the left" of us are in unreachable now,</div><div class="line">     * and have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All objects to the</div><div class="line">     * left of us in 'young' now have been scanned, and no objects here</div><div class="line">     * or to the right have been scanned yet.</div><div class="line">     */</div><div class="line"></div><div class="line">    while (gc != young) &#123;</div><div class="line">        PyGC_Head *next;</div><div class="line"></div><div class="line">        if (gc-&gt;gc.gc_refs) &#123;</div><div class="line">            /* gc is definitely reachable from outside the</div><div class="line">             * original 'young'.  Mark it as such, and traverse</div><div class="line">             * its pointers to find any other objects that may</div><div class="line">             * be directly reachable from it.  Note that the</div><div class="line">             * call to tp_traverse may append objects to young,</div><div class="line">             * so we have to wait until it returns to determine</div><div class="line">             * the next object to visit.</div><div class="line">             */</div><div class="line">            /* 例如：</div><div class="line">             * list1=[];list2=[list1];list1.append(list2)</div><div class="line">             * del list1;</div><div class="line">             * </div><div class="line">             * 经过subtract_refs后：</div><div class="line">             * list1.gc_refs==0; list2.gc_refs==1</div><div class="line">             * 所以此时的list2有外部的引用，所以是reachable</div><div class="line">             */</div><div class="line">            PyObject *op = FROM_GC(gc);</div><div class="line">            traverseproc traverse = Py_TYPE(op)-&gt;tp_traverse;</div><div class="line">            assert(gc-&gt;gc.gc_refs &gt; 0);</div><div class="line">            gc-&gt;gc.gc_refs = GC_REACHABLE;</div><div class="line">            (void) traverse(op,</div><div class="line">                            (visitproc)visit_reachable,</div><div class="line">                            (void *)young);</div><div class="line">            next = gc-&gt;gc.gc_next;</div><div class="line">            /* 如果对象op中的元素都是untracked的，标记op为untracked */</div><div class="line">            if (PyTuple_CheckExact(op)) &#123;</div><div class="line">                _PyTuple_MaybeUntrack(op);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            /* This *may* be unreachable.  To make progress,</div><div class="line">             * assume it is.  gc isn't directly reachable from</div><div class="line">             * any object we've already traversed, but may be</div><div class="line">             * reachable from an object we haven't gotten to yet.</div><div class="line">             * visit_reachable will eventually move gc back into</div><div class="line">             * young if that's so, and we'll see it again.</div><div class="line">             */</div><div class="line">            /* 代中的对象引用计数为0，说明没有外部引用，可能是unreachable</div><div class="line">             * 如果再作为对象(容器)的元素被visit_reachable处理到</div><div class="line">             * 说明该对象只作为reachable对象的元素，所以也是reachable</div><div class="line">             */</div><div class="line">            next = gc-&gt;gc.gc_next;</div><div class="line">            gc_list_move(gc, unreachable);</div><div class="line">            gc-&gt;gc.gc_refs = GC_TENTATIVELY_UNREACHABLE;</div><div class="line">        &#125;</div><div class="line">        gc = next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Return true if object has a finalization method.</div><div class="line"> * CAUTION:  An instance of an old-style class has to be checked for a</div><div class="line"> *__del__ method, and earlier versions of this used to call PyObject_HasAttr,</div><div class="line"> * which in turn could call the class's __getattr__ hook (if any).  That</div><div class="line"> * could invoke arbitrary Python code, mutating the object graph in arbitrary</div><div class="line"> * ways, and that was the source of some excruciatingly subtle bugs.</div><div class="line"> */</div><div class="line"></div><div class="line">/*</div><div class="line"> * 有几种自定义析构函数的方式：</div><div class="line"> * 1. 用户类定义了 __del__ 方法</div><div class="line"> * 2. 用户类通过定义 __getattr__ 间接定义了 __del__方法</div><div class="line"> * 3. 生成器定义了 __exit__方法</div><div class="line"> */</div><div class="line"></div><div class="line">static int</div><div class="line">has_finalizer(PyObject *op)</div><div class="line">&#123;</div><div class="line">    if (PyInstance_Check(op)) &#123;</div><div class="line">        assert(delstr != NULL);</div><div class="line">        return _PyInstance_Lookup(op, delstr) != NULL;</div><div class="line">    &#125;</div><div class="line">    else if (PyType_HasFeature(op-&gt;ob_type, Py_TPFLAGS_HEAPTYPE))</div><div class="line">        return op-&gt;ob_type-&gt;tp_del != NULL;</div><div class="line">    else if (PyGen_CheckExact(op))</div><div class="line">        return PyGen_NeedsFinalizing((PyGenObject *)op);</div><div class="line">    else</div><div class="line">        return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Try to untrack all currently tracked dictionaries */</div><div class="line">static void</div><div class="line">untrack_dicts(PyGC_Head *head)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *next, *gc = head-&gt;gc.gc_next;</div><div class="line">    while (gc != head) &#123;</div><div class="line">        PyObject *op = FROM_GC(gc);</div><div class="line">        next = gc-&gt;gc.gc_next;</div><div class="line">        if (PyDict_CheckExact(op))</div><div class="line">            _PyDict_MaybeUntrack(op);</div><div class="line">        gc = next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/* unreachable 链表中对象的状态为GC_TENTATIVELY_UNREACHABLE:</div><div class="line"> * 1. 具有 __del__ 方法，移动到 finalizers 链表修改状态为 GC_REACHABLE</div><div class="line"> * 2. 没有 __del__ 方法，保持不变</div><div class="line"> */</div><div class="line">/* Move the objects in unreachable with __del__ methods into `finalizers`.</div><div class="line"> * Objects moved into `finalizers` have gc_refs set to GC_REACHABLE; the</div><div class="line"> * objects remaining in unreachable are left at GC_TENTATIVELY_UNREACHABLE.</div><div class="line"> */</div><div class="line">static void</div><div class="line">move_finalizers(PyGC_Head *unreachable, PyGC_Head *finalizers)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc;</div><div class="line">    PyGC_Head *next;</div><div class="line"></div><div class="line">    /* March over unreachable.  Move objects with finalizers into</div><div class="line">     * `finalizers`.</div><div class="line">     */</div><div class="line">    /* 将 unreachable 链表中有析构函数的对象移到 finalizers */</div><div class="line">    for (gc = unreachable-&gt;gc.gc_next; gc != unreachable; gc = next) &#123;</div><div class="line">        PyObject *op = FROM_GC(gc);</div><div class="line"></div><div class="line">        assert(IS_TENTATIVELY_UNREACHABLE(op));</div><div class="line">        next = gc-&gt;gc.gc_next;</div><div class="line"></div><div class="line">        if (has_finalizer(op)) &#123;</div><div class="line">            gc_list_move(gc, finalizers);</div><div class="line">            gc-&gt;gc.gc_refs = GC_REACHABLE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* A traversal callback for move_finalizer_reachable. */</div><div class="line">static int</div><div class="line">visit_move(PyObject *op, PyGC_Head *tolist)</div><div class="line">&#123;</div><div class="line">    if (PyObject_IS_GC(op)) &#123;</div><div class="line">        if (IS_TENTATIVELY_UNREACHABLE(op)) &#123;</div><div class="line">            PyGC_Head *gc = AS_GC(op);</div><div class="line">            gc_list_move(gc, tolist);</div><div class="line">            gc-&gt;gc.gc_refs = GC_REACHABLE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Move objects that are reachable from finalizers, from the unreachable set</div><div class="line"> * into finalizers set.</div><div class="line"> */</div><div class="line">/*</div><div class="line"> * 将 finalizers 中的对象设置为 GC_REACHABLE</div><div class="line"> */</div><div class="line">static void</div><div class="line">move_finalizer_reachable(PyGC_Head *finalizers)</div><div class="line">&#123;</div><div class="line">    traverseproc traverse;</div><div class="line">    PyGC_Head *gc = finalizers-&gt;gc.gc_next;</div><div class="line">    for (; gc != finalizers; gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        /* Note that the finalizers list may grow during this. */</div><div class="line">        traverse = Py_TYPE(FROM_GC(gc))-&gt;tp_traverse;</div><div class="line">        (void) traverse(FROM_GC(gc),</div><div class="line">                        (visitproc)visit_move,</div><div class="line">                        (void *)finalizers);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Clear all weakrefs to unreachable objects, and if such a weakref has a</div><div class="line"> * callback, invoke it if necessary.  Note that it's possible for such</div><div class="line"> * weakrefs to be outside the unreachable set -- indeed, those are precisely</div><div class="line"> * the weakrefs whose callbacks must be invoked.  See gc_weakref.txt for</div><div class="line"> * overview &amp; some details.  Some weakrefs with callbacks may be reclaimed</div><div class="line"> * directly by this routine; the number reclaimed is the return value.  Other</div><div class="line"> * weakrefs with callbacks may be moved into the `old` generation.  Objects</div><div class="line"> * moved into `old` have gc_refs set to GC_REACHABLE; the objects remaining in</div><div class="line"> * unreachable are left at GC_TENTATIVELY_UNREACHABLE.  When this returns,</div><div class="line"> * no object in `unreachable` is weakly referenced anymore.</div><div class="line"> */</div><div class="line">static int</div><div class="line">handle_weakrefs(PyGC_Head *unreachable, PyGC_Head *old)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc;</div><div class="line">    PyObject *op;               /* generally FROM_GC(gc) */</div><div class="line">    PyWeakReference *wr;        /* generally a cast of op */</div><div class="line">    PyGC_Head wrcb_to_call;     /* weakrefs with callbacks to call */</div><div class="line">    PyGC_Head *next;</div><div class="line">    int num_freed = 0;</div><div class="line"></div><div class="line">    gc_list_init(&amp;wrcb_to_call);</div><div class="line"></div><div class="line">    /* Clear all weakrefs to the objects in unreachable.  If such a weakref</div><div class="line">     * also has a callback, move it into `wrcb_to_call` if the callback</div><div class="line">     * needs to be invoked.  Note that we cannot invoke any callbacks until</div><div class="line">     * all weakrefs to unreachable objects are cleared, lest the callback</div><div class="line">     * resurrect an unreachable object via a still-active weakref.  We</div><div class="line">     * make another pass over wrcb_to_call, invoking callbacks, after this</div><div class="line">     * pass completes.</div><div class="line">     */</div><div class="line">    for (gc = unreachable-&gt;gc.gc_next; gc != unreachable; gc = next) &#123;</div><div class="line">        PyWeakReference **wrlist;</div><div class="line"></div><div class="line">        op = FROM_GC(gc);</div><div class="line">        assert(IS_TENTATIVELY_UNREACHABLE(op));</div><div class="line">        next = gc-&gt;gc.gc_next;</div><div class="line"></div><div class="line">        if (! PyType_SUPPORTS_WEAKREFS(Py_TYPE(op)))</div><div class="line">            continue;</div><div class="line"></div><div class="line">        /* It supports weakrefs.  Does it have any? */</div><div class="line">        wrlist = (PyWeakReference **)</div><div class="line">                                PyObject_GET_WEAKREFS_LISTPTR(op);</div><div class="line"></div><div class="line">        /* `op` may have some weakrefs.  March over the list, clear</div><div class="line">         * all the weakrefs, and move the weakrefs with callbacks</div><div class="line">         * that must be called into wrcb_to_call.</div><div class="line">         */</div><div class="line">        for (wr = *wrlist; wr != NULL; wr = *wrlist) &#123;</div><div class="line">            PyGC_Head *wrasgc;                  /* AS_GC(wr) */</div><div class="line"></div><div class="line">            /* _PyWeakref_ClearRef clears the weakref but leaves</div><div class="line">             * the callback pointer intact.  Obscure:  it also</div><div class="line">             * changes *wrlist.</div><div class="line">             */</div><div class="line">            assert(wr-&gt;wr_object == op);</div><div class="line">            _PyWeakref_ClearRef(wr);</div><div class="line">            assert(wr-&gt;wr_object == Py_None);</div><div class="line">            if (wr-&gt;wr_callback == NULL)</div><div class="line">                continue;                       /* no callback */</div><div class="line"></div><div class="line">    /* Headache time.  `op` is going away, and is weakly referenced by</div><div class="line">     * `wr`, which has a callback.  Should the callback be invoked?  If wr</div><div class="line">     * is also trash, no:</div><div class="line">     *</div><div class="line">     * 1. There's no need to call it.  The object and the weakref are</div><div class="line">     *    both going away, so it's legitimate to pretend the weakref is</div><div class="line">     *    going away first.  The user has to ensure a weakref outlives its</div><div class="line">     *    referent if they want a guarantee that the wr callback will get</div><div class="line">     *    invoked.</div><div class="line">     *</div><div class="line">     * 2. It may be catastrophic to call it.  If the callback is also in</div><div class="line">     *    cyclic trash (CT), then although the CT is unreachable from</div><div class="line">     *    outside the current generation, CT may be reachable from the</div><div class="line">     *    callback.  Then the callback could resurrect insane objects.</div><div class="line">     *</div><div class="line">     * Since the callback is never needed and may be unsafe in this case,</div><div class="line">     * wr is simply left in the unreachable set.  Note that because we</div><div class="line">     * already called _PyWeakref_ClearRef(wr), its callback will never</div><div class="line">     * trigger.</div><div class="line">     *</div><div class="line">     * OTOH, if wr isn't part of CT, we should invoke the callback:  the</div><div class="line">     * weakref outlived the trash.  Note that since wr isn't CT in this</div><div class="line">     * case, its callback can't be CT either -- wr acted as an external</div><div class="line">     * root to this generation, and therefore its callback did too.  So</div><div class="line">     * nothing in CT is reachable from the callback either, so it's hard</div><div class="line">     * to imagine how calling it later could create a problem for us.  wr</div><div class="line">     * is moved to wrcb_to_call in this case.</div><div class="line">     */</div><div class="line">            if (IS_TENTATIVELY_UNREACHABLE(wr))</div><div class="line">                continue;</div><div class="line">            assert(IS_REACHABLE(wr));</div><div class="line"></div><div class="line">            /* Create a new reference so that wr can't go away</div><div class="line">             * before we can process it again.</div><div class="line">             */</div><div class="line">            Py_INCREF(wr);</div><div class="line"></div><div class="line">            /* Move wr to wrcb_to_call, for the next pass. */</div><div class="line">            wrasgc = AS_GC(wr);</div><div class="line">            assert(wrasgc != next); /* wrasgc is reachable, but</div><div class="line">                                       next isn't, so they can't</div><div class="line">                                       be the same */</div><div class="line">            gc_list_move(wrasgc, &amp;wrcb_to_call);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Invoke the callbacks we decided to honor.  It's safe to invoke them</div><div class="line">     * because they can't reference unreachable objects.</div><div class="line">     */</div><div class="line">    while (! gc_list_is_empty(&amp;wrcb_to_call)) &#123;</div><div class="line">        PyObject *temp;</div><div class="line">        PyObject *callback;</div><div class="line"></div><div class="line">        gc = wrcb_to_call.gc.gc_next;</div><div class="line">        op = FROM_GC(gc);</div><div class="line">        assert(IS_REACHABLE(op));</div><div class="line">        assert(PyWeakref_Check(op));</div><div class="line">        wr = (PyWeakReference *)op;</div><div class="line">        callback = wr-&gt;wr_callback;</div><div class="line">        assert(callback != NULL);</div><div class="line"></div><div class="line">        /* copy-paste of weakrefobject.c's handle_callback() */</div><div class="line">        temp = PyObject_CallFunctionObjArgs(callback, wr, NULL);</div><div class="line">        if (temp == NULL)</div><div class="line">            PyErr_WriteUnraisable(callback);</div><div class="line">        else</div><div class="line">            Py_DECREF(temp);</div><div class="line"></div><div class="line">        /* Give up the reference we created in the first pass.  When</div><div class="line">         * op's refcount hits 0 (which it may or may not do right now),</div><div class="line">         * op's tp_dealloc will decref op-&gt;wr_callback too.  Note</div><div class="line">         * that the refcount probably will hit 0 now, and because this</div><div class="line">         * weakref was reachable to begin with, gc didn't already</div><div class="line">         * add it to its count of freed objects.  Example:  a reachable</div><div class="line">         * weak value dict maps some key to this reachable weakref.</div><div class="line">         * The callback removes this key-&gt;weakref mapping from the</div><div class="line">         * dict, leaving no other references to the weakref (excepting</div><div class="line">         * ours).</div><div class="line">         */</div><div class="line">        Py_DECREF(op);</div><div class="line">        if (wrcb_to_call.gc.gc_next == gc) &#123;</div><div class="line">            /* object is still alive -- move it */</div><div class="line">            gc_list_move(gc, old);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            ++num_freed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return num_freed;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void</div><div class="line">debug_instance(char *msg, PyInstanceObject *inst)</div><div class="line">&#123;</div><div class="line">    char *cname;</div><div class="line">    /* simple version of instance_repr */</div><div class="line">    PyObject *classname = inst-&gt;in_class-&gt;cl_name;</div><div class="line">    if (classname != NULL &amp;&amp; PyString_Check(classname))</div><div class="line">        cname = PyString_AsString(classname);</div><div class="line">    else</div><div class="line">        cname = "?";</div><div class="line">    PySys_WriteStderr("gc: %.100s &lt;%.100s instance at %p&gt;\n",</div><div class="line">                      msg, cname, inst);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void</div><div class="line">debug_cycle(char *msg, PyObject *op)</div><div class="line">&#123;</div><div class="line">    if ((debug &amp; DEBUG_INSTANCES) &amp;&amp; PyInstance_Check(op)) &#123;</div><div class="line">        debug_instance(msg, (PyInstanceObject *)op);</div><div class="line">    &#125;</div><div class="line">    else if (debug &amp; DEBUG_OBJECTS) &#123;</div><div class="line">        PySys_WriteStderr("gc: %.100s &lt;%.100s %p&gt;\n",</div><div class="line">                          msg, Py_TYPE(op)-&gt;tp_name, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Handle uncollectable garbage (cycles with finalizers, and stuff reachable</div><div class="line"> * only from such cycles).</div><div class="line"> * If DEBUG_SAVEALL, all objects in finalizers are appended to the module</div><div class="line"> * garbage list (a Python list), else only the objects in finalizers with</div><div class="line"> * __del__ methods are appended to garbage.  All objects in finalizers are</div><div class="line"> * merged into the old list regardless.</div><div class="line"> * Returns 0 if all OK, &lt;0 on error (out of memory to grow the garbage list).</div><div class="line"> * The finalizers list is made empty on a successful return.</div><div class="line"> */</div><div class="line">/*</div><div class="line"> * 将有 finalizer 的对象放入到 garbage</div><div class="line"> * 剩余的 finalizers 中的所有对象放入下一代</div><div class="line"> * 这个时候：</div><div class="line"> * 1. 没有有析构函数的放入 garbage</div><div class="line"> * 2. 有析构函数的放入下一代</div><div class="line"> */</div><div class="line">static int</div><div class="line">handle_finalizers(PyGC_Head *finalizers, PyGC_Head *old)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc = finalizers-&gt;gc.gc_next;</div><div class="line"></div><div class="line">    if (garbage == NULL) &#123;</div><div class="line">        garbage = PyList_New(0);</div><div class="line">        if (garbage == NULL)</div><div class="line">            Py_FatalError("gc couldn't create gc.garbage list");</div><div class="line">    &#125;</div><div class="line">    for (; gc != finalizers; gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        PyObject *op = FROM_GC(gc);</div><div class="line"></div><div class="line">        if ((debug &amp; DEBUG_SAVEALL) || has_finalizer(op)) &#123;</div><div class="line">            if (PyList_Append(garbage, op) &lt; 0)</div><div class="line">                return -1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    gc_list_merge(finalizers, old);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Break reference cycles by clearing the containers involved.  This is</div><div class="line"> * tricky business as the lists can be changing and we don't know which</div><div class="line"> * objects may be freed.  It is possible I screwed something up here.</div><div class="line"> */</div><div class="line">/* 回收garbage */</div><div class="line">static void</div><div class="line">delete_garbage(PyGC_Head *collectable, PyGC_Head *old)</div><div class="line">&#123;</div><div class="line">    inquiry clear;</div><div class="line"></div><div class="line">    while (!gc_list_is_empty(collectable)) &#123;</div><div class="line">        PyGC_Head *gc = collectable-&gt;gc.gc_next;</div><div class="line">        PyObject *op = FROM_GC(gc);</div><div class="line"></div><div class="line">        assert(IS_TENTATIVELY_UNREACHABLE(op));</div><div class="line">        if (debug &amp; DEBUG_SAVEALL) &#123;</div><div class="line">            PyList_Append(garbage, op);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            if ((clear = Py_TYPE(op)-&gt;tp_clear) != NULL) &#123;</div><div class="line">                Py_INCREF(op);</div><div class="line">                clear(op);</div><div class="line">                Py_DECREF(op);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* clear 函数没有将自己从collectable链表中摘下来</div><div class="line">         * 说明还不能clear，则放入下一代</div><div class="line">         */</div><div class="line">        if (collectable-&gt;gc.gc_next == gc) &#123;</div><div class="line">            /* object is still alive, move it, it may die later */</div><div class="line">            gc_list_move(gc, old);</div><div class="line">            gc-&gt;gc.gc_refs = GC_REACHABLE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Clear all free lists</div><div class="line"> * All free lists are cleared during the collection of the highest generation.</div><div class="line"> * Allocated items in the free list may keep a pymalloc arena occupied.</div><div class="line"> * Clearing the free lists may give back memory to the OS earlier.</div><div class="line"> */</div><div class="line">/*</div><div class="line"> * 回收没有引用的lists</div><div class="line"> */</div><div class="line">static void</div><div class="line">clear_freelists(void)</div><div class="line">&#123;</div><div class="line">    (void)PyMethod_ClearFreeList();</div><div class="line">    (void)PyFrame_ClearFreeList();</div><div class="line">    (void)PyCFunction_ClearFreeList();</div><div class="line">    (void)PyTuple_ClearFreeList();</div><div class="line">#ifdef Py_USING_UNICODE</div><div class="line">    (void)PyUnicode_ClearFreeList();</div><div class="line">#endif</div><div class="line">    (void)PyInt_ClearFreeList();</div><div class="line">    (void)PyFloat_ClearFreeList();</div><div class="line">&#125;</div><div class="line"></div><div class="line">static double</div><div class="line">get_time(void)</div><div class="line">&#123;</div><div class="line">    double result = 0;</div><div class="line">    if (tmod != NULL) &#123;</div><div class="line">        PyObject *f = PyObject_CallMethod(tmod, "time", NULL);</div><div class="line">        if (f == NULL) &#123;</div><div class="line">            PyErr_Clear();</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            if (PyFloat_Check(f))</div><div class="line">                result = PyFloat_AsDouble(f);</div><div class="line">            Py_DECREF(f);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* This is the main function.  Read this to understand how the</div><div class="line"> * collection process works. */</div><div class="line">static Py_ssize_t</div><div class="line">collect(int generation)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    Py_ssize_t m = 0; /* # objects collected */</div><div class="line">    Py_ssize_t n = 0; /* # unreachable objects that couldn't be collected */</div><div class="line">    PyGC_Head *young; /* the generation we are examining */</div><div class="line">    PyGC_Head *old; /* next older generation */</div><div class="line">    PyGC_Head unreachable; /* non-problematic unreachable trash */</div><div class="line">    PyGC_Head finalizers;  /* objects with, &amp; reachable from, __del__ */</div><div class="line">    PyGC_Head *gc;</div><div class="line">    double t1 = 0.0;</div><div class="line"></div><div class="line">    if (delstr == NULL) &#123;</div><div class="line">        delstr = PyString_InternFromString("__del__");</div><div class="line">        if (delstr == NULL)</div><div class="line">            Py_FatalError("gc couldn't allocate \"__del__\"");</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (debug &amp; DEBUG_STATS) &#123;</div><div class="line">        PySys_WriteStderr("gc: collecting generation %d...\n",</div><div class="line">                          generation);</div><div class="line">        PySys_WriteStderr("gc: objects in each generation:");</div><div class="line">        for (i = 0; i &lt; NUM_GENERATIONS; i++)</div><div class="line">            PySys_WriteStderr(" %" PY_FORMAT_SIZE_T "d",</div><div class="line">                              gc_list_size(GEN_HEAD(i)));</div><div class="line">        t1 = get_time();</div><div class="line">        PySys_WriteStderr("\n");</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* update collection and allocation counters */</div><div class="line">    /* 递增老一代的年龄 */</div><div class="line">    if (generation+1 &lt; NUM_GENERATIONS)</div><div class="line">        generations[generation+1].count += 1;</div><div class="line">    /* 年轻的所有代都归零，因为会处理所有年轻代的对象*/</div><div class="line">    for (i = 0; i &lt;= generation; i++)</div><div class="line">        generations[i].count = 0;</div><div class="line"></div><div class="line">    /* merge younger generations with one we are currently collecting */</div><div class="line">    /* 收集第3代，则将第1,2代的对象都加入到第3代中 */</div><div class="line">    for (i = 0; i &lt; generation; i++) &#123;</div><div class="line">        gc_list_merge(GEN_HEAD(i), GEN_HEAD(generation));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* handy references */</div><div class="line">    young = GEN_HEAD(generation);</div><div class="line">    if (generation &lt; NUM_GENERATIONS-1)</div><div class="line">        old = GEN_HEAD(generation+1);</div><div class="line">    else</div><div class="line">        old = young;</div><div class="line"></div><div class="line">    /* Using ob_refcnt and gc_refs, calculate which objects in the</div><div class="line">     * container set are reachable from outside the set (i.e., have a</div><div class="line">     * refcount greater than 0 when all the references within the</div><div class="line">     * set are taken into account).</div><div class="line">     */</div><div class="line">    /* 将当前代的对象的引用计数复制到gc_refs=ob_refcnt */</div><div class="line">    update_refs(young);</div><div class="line">    </div><div class="line">    /* 将本代的所有容器内的元素gc_refs-1 */</div><div class="line">    subtract_refs(young);</div><div class="line"></div><div class="line">    /* Leave everything reachable from outside young in young, and move</div><div class="line">     * everything else (in young) to unreachable.</div><div class="line">     * NOTE:  This used to move the reachable objects into a reachable</div><div class="line">     * set instead.  But most things usually turn out to be reachable,</div><div class="line">     * so it's more efficient to move the unreachable things.</div><div class="line">     */</div><div class="line">    /* 将unreachable的容器放入unreachable链表中 */</div><div class="line">    gc_list_init(&amp;unreachable);</div><div class="line">    move_unreachable(young, &amp;unreachable);</div><div class="line"></div><div class="line">    /* Move reachable objects to next generation. */</div><div class="line">    /* 将剩余的reachable的容器放入老一代中 </div><div class="line">     * 如果当前是第2代，则累计long_lived_pending</div><div class="line">     */</div><div class="line">    if (young != old) &#123;</div><div class="line">        if (generation == NUM_GENERATIONS - 2) &#123;</div><div class="line">            long_lived_pending += gc_list_size(young);</div><div class="line">        &#125;</div><div class="line">        gc_list_merge(young, old);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        /* We only untrack dicts in full collections, to avoid quadratic</div><div class="line">           dict build-up. See issue #14775. */</div><div class="line">        untrack_dicts(young);</div><div class="line">        long_lived_pending = 0;</div><div class="line">        long_lived_total = gc_list_size(young);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* All objects in unreachable are trash, but objects reachable from</div><div class="line">     * finalizers can't safely be deleted.  Python programmers should take</div><div class="line">     * care not to create such things.  For Python, finalizers means</div><div class="line">     * instance objects with __del__ methods.  Weakrefs with callbacks</div><div class="line">     * can also call arbitrary Python code but they will be dealt with by</div><div class="line">     * handle_weakrefs().</div><div class="line">     */</div><div class="line">    /*</div><div class="line">     * unreachable中有析构函数的不能直接清除，所以需要移动到finalizers</div><div class="line">     * 将finalizers中的容器中的元素标记为reachable</div><div class="line">     */</div><div class="line">    gc_list_init(&amp;finalizers);</div><div class="line">    move_finalizers(&amp;unreachable, &amp;finalizers);</div><div class="line">    /* finalizers contains the unreachable objects with a finalizer;</div><div class="line">     * unreachable objects reachable *from* those are also uncollectable,</div><div class="line">     * and we move those into the finalizers list too.</div><div class="line">     */</div><div class="line">    /*</div><div class="line">     * finalizers中的对象中的元素也需要加入到finalizers，例如</div><div class="line">     * a = 0; class Test(object): def __del__(self): a; del a</div><div class="line">     * 如果Test是unreachable，那么a即使是reachable也不能被收集，</div><div class="line">     * 所以需要把其也加入到finalizers</div><div class="line">     */</div><div class="line">    move_finalizer_reachable(&amp;finalizers);</div><div class="line"></div><div class="line">    /* Collect statistics on collectable objects found and print</div><div class="line">     * debugging information.</div><div class="line">     */</div><div class="line">    for (gc = unreachable.gc.gc_next; gc != &amp;unreachable;</div><div class="line">                    gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        m++;</div><div class="line">        if (debug &amp; DEBUG_COLLECTABLE) &#123;</div><div class="line">            debug_cycle("collectable", FROM_GC(gc));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Clear weakrefs and invoke callbacks as necessary. */</div><div class="line">    m += handle_weakrefs(&amp;unreachable, old);</div><div class="line"></div><div class="line">    /* Call tp_clear on objects in the unreachable set.  This will cause</div><div class="line">     * the reference cycles to be broken.  It may also cause some objects</div><div class="line">     * in finalizers to be freed.</div><div class="line">     */</div><div class="line">    /* 清除可以清除的；把不能清除的放入老一代 */</div><div class="line">    delete_garbage(&amp;unreachable, old);</div><div class="line"></div><div class="line">    /* Collect statistics on uncollectable objects found and print</div><div class="line">     * debugging information. */</div><div class="line">    for (gc = finalizers.gc.gc_next;</div><div class="line">         gc != &amp;finalizers;</div><div class="line">         gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        n++;</div><div class="line">        if (debug &amp; DEBUG_UNCOLLECTABLE)</div><div class="line">            debug_cycle("uncollectable", FROM_GC(gc));</div><div class="line">    &#125;</div><div class="line">    if (debug &amp; DEBUG_STATS) &#123;</div><div class="line">        double t2 = get_time();</div><div class="line">        if (m == 0 &amp;&amp; n == 0)</div><div class="line">            PySys_WriteStderr("gc: done");</div><div class="line">        else</div><div class="line">            PySys_WriteStderr(</div><div class="line">                "gc: done, "</div><div class="line">                "%" PY_FORMAT_SIZE_T "d unreachable, "</div><div class="line">                "%" PY_FORMAT_SIZE_T "d uncollectable",</div><div class="line">                n+m, n);</div><div class="line">        if (t1 &amp;&amp; t2) &#123;</div><div class="line">            PySys_WriteStderr(", %.4fs elapsed", t2-t1);</div><div class="line">        &#125;</div><div class="line">        PySys_WriteStderr(".\n");</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Append instances in the uncollectable set to a Python</div><div class="line">     * reachable list of garbage.  The programmer has to deal with</div><div class="line">     * this if they insist on creating this type of structure.</div><div class="line">     */</div><div class="line">    /*</div><div class="line">     * 所以如果析构函数中有循环引用，那么可能永远不可能被清除</div><div class="line">     */</div><div class="line">    (void)handle_finalizers(&amp;finalizers, old);</div><div class="line"></div><div class="line">    /* Clear free list only during the collection of the highest</div><div class="line">     * generation */</div><div class="line">    if (generation == NUM_GENERATIONS-1) &#123;</div><div class="line">        clear_freelists();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (PyErr_Occurred()) &#123;</div><div class="line">        if (gc_str == NULL)</div><div class="line">            gc_str = PyString_FromString("garbage collection");</div><div class="line">        PyErr_WriteUnraisable(gc_str);</div><div class="line">        Py_FatalError("unexpected exception during garbage collection");</div><div class="line">    &#125;</div><div class="line">    return n+m;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static Py_ssize_t</div><div class="line">collect_generations(void)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    Py_ssize_t n = 0;</div><div class="line"></div><div class="line">    /* Find the oldest generation (highest numbered) where the count</div><div class="line">     * exceeds the threshold.  Objects in the that generation and</div><div class="line">     * generations younger than it will be collected. */</div><div class="line">    /*</div><div class="line">     * 垃圾回收的规则：</div><div class="line">     * 1. 每代的寿命到了才启动该代的垃圾回收(count&gt;threshold)</div><div class="line">     *    (第一代的寿命作为启动垃圾回收的入口)</div><div class="line">     * 2. 每代运行一次，则老一代年龄增长一岁</div><div class="line">     * 4. 每代运行时，处理所有比其年轻的代的对象</div><div class="line">     */ </div><div class="line">    for (i = NUM_GENERATIONS-1; i &gt;= 0; i--) &#123;</div><div class="line">        if (generations[i].count &gt; generations[i].threshold) &#123;</div><div class="line">            /* Avoid quadratic performance degradation in number</div><div class="line">               of tracked objects. See comments at the beginning</div><div class="line">               of this file, and issue #4074.</div><div class="line">            */</div><div class="line">            /* long_lived_pending:</div><div class="line">             * 在运行第三代收集之前，从第二代放入第三代的对象个数</div><div class="line">             * long_lived_total:</div><div class="line">             * 在运行第三代收集时，第三代中不能回收的对象个数</div><div class="line">             *</div><div class="line">             * 简单来说：第三代中新增加的对象数量大于25%才运行</div><div class="line">             */</div><div class="line">            if (i == NUM_GENERATIONS - 1</div><div class="line">                &amp;&amp; long_lived_pending &lt; long_lived_total / 4)</div><div class="line">                continue;</div><div class="line">            n = collect(i);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return n;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_enable__doc__,</div><div class="line">"enable() -&gt; None\n"</div><div class="line">"\n"</div><div class="line">"Enable automatic garbage collection.\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_enable(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    enabled = 1;</div><div class="line">    Py_INCREF(Py_None);</div><div class="line">    return Py_None;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_disable__doc__,</div><div class="line">"disable() -&gt; None\n"</div><div class="line">"\n"</div><div class="line">"Disable automatic garbage collection.\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_disable(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    enabled = 0;</div><div class="line">    Py_INCREF(Py_None);</div><div class="line">    return Py_None;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_isenabled__doc__,</div><div class="line">"isenabled() -&gt; status\n"</div><div class="line">"\n"</div><div class="line">"Returns true if automatic garbage collection is enabled.\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_isenabled(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    return PyBool_FromLong((long)enabled);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_collect__doc__,</div><div class="line">"collect([generation]) -&gt; n\n"</div><div class="line">"\n"</div><div class="line">"With no arguments, run a full collection.  The optional argument\n"</div><div class="line">"may be an integer specifying which generation to collect.  A ValueError\n"</div><div class="line">"is raised if the generation number is invalid.\n\n"</div><div class="line">"The number of unreachable objects is returned.\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_collect(PyObject *self, PyObject *args, PyObject *kws)</div><div class="line">&#123;</div><div class="line">    static char *keywords[] = &#123;"generation", NULL&#125;;</div><div class="line">    int genarg = NUM_GENERATIONS - 1;</div><div class="line">    Py_ssize_t n;</div><div class="line"></div><div class="line">    if (!PyArg_ParseTupleAndKeywords(args, kws, "|i", keywords, &amp;genarg))</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    else if (genarg &lt; 0 || genarg &gt;= NUM_GENERATIONS) &#123;</div><div class="line">        PyErr_SetString(PyExc_ValueError, "invalid generation");</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (collecting)</div><div class="line">        n = 0; /* already collecting, don't do anything */</div><div class="line">    else &#123;</div><div class="line">        collecting = 1;</div><div class="line">        n = collect(genarg);</div><div class="line">        collecting = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return PyInt_FromSsize_t(n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_set_debug__doc__,</div><div class="line">"set_debug(flags) -&gt; None\n"</div><div class="line">"\n"</div><div class="line">"Set the garbage collection debugging flags. Debugging information is\n"</div><div class="line">"written to sys.stderr.\n"</div><div class="line">"\n"</div><div class="line">"flags is an integer and can have the following bits turned on:\n"</div><div class="line">"\n"</div><div class="line">"  DEBUG_STATS - Print statistics during collection.\n"</div><div class="line">"  DEBUG_COLLECTABLE - Print collectable objects found.\n"</div><div class="line">"  DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects found.\n"</div><div class="line">"  DEBUG_INSTANCES - Print instance objects.\n"</div><div class="line">"  DEBUG_OBJECTS - Print objects other than instances.\n"</div><div class="line">"  DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.\n"</div><div class="line">"  DEBUG_LEAK - Debug leaking programs (everything but STATS).\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_set_debug(PyObject *self, PyObject *args)</div><div class="line">&#123;</div><div class="line">    if (!PyArg_ParseTuple(args, "i:set_debug", &amp;debug))</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    Py_INCREF(Py_None);</div><div class="line">    return Py_None;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_get_debug__doc__,</div><div class="line">"get_debug() -&gt; flags\n"</div><div class="line">"\n"</div><div class="line">"Get the garbage collection debugging flags.\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_get_debug(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    return Py_BuildValue("i", debug);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_set_thresh__doc__,</div><div class="line">"set_threshold(threshold0, [threshold1, threshold2]) -&gt; None\n"</div><div class="line">"\n"</div><div class="line">"Sets the collection thresholds.  Setting threshold0 to zero disables\n"</div><div class="line">"collection.\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_set_thresh(PyObject *self, PyObject *args)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    if (!PyArg_ParseTuple(args, "i|ii:set_threshold",</div><div class="line">                          &amp;generations[0].threshold,</div><div class="line">                          &amp;generations[1].threshold,</div><div class="line">                          &amp;generations[2].threshold))</div><div class="line">        return NULL;</div><div class="line">    for (i = 2; i &lt; NUM_GENERATIONS; i++) &#123;</div><div class="line">        /* generations higher than 2 get the same threshold */</div><div class="line">        generations[i].threshold = generations[2].threshold;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Py_INCREF(Py_None);</div><div class="line">    return Py_None;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_get_thresh__doc__,</div><div class="line">"get_threshold() -&gt; (threshold0, threshold1, threshold2)\n"</div><div class="line">"\n"</div><div class="line">"Return the current collection thresholds\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_get_thresh(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    return Py_BuildValue("(iii)",</div><div class="line">                         generations[0].threshold,</div><div class="line">                         generations[1].threshold,</div><div class="line">                         generations[2].threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_get_count__doc__,</div><div class="line">"get_count() -&gt; (count0, count1, count2)\n"</div><div class="line">"\n"</div><div class="line">"Return the current collection counts\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_get_count(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    return Py_BuildValue("(iii)",</div><div class="line">                         generations[0].count,</div><div class="line">                         generations[1].count,</div><div class="line">                         generations[2].count);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int</div><div class="line">referrersvisit(PyObject* obj, PyObject *objs)</div><div class="line">&#123;</div><div class="line">    Py_ssize_t i;</div><div class="line">    for (i = 0; i &lt; PyTuple_GET_SIZE(objs); i++)</div><div class="line">        if (PyTuple_GET_ITEM(objs, i) == obj)</div><div class="line">            return 1;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int</div><div class="line">gc_referrers_for(PyObject *objs, PyGC_Head *list, PyObject *resultlist)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *gc;</div><div class="line">    PyObject *obj;</div><div class="line">    traverseproc traverse;</div><div class="line">    for (gc = list-&gt;gc.gc_next; gc != list; gc = gc-&gt;gc.gc_next) &#123;</div><div class="line">        obj = FROM_GC(gc);</div><div class="line">        traverse = Py_TYPE(obj)-&gt;tp_traverse;</div><div class="line">        if (obj == objs || obj == resultlist)</div><div class="line">            continue;</div><div class="line">        if (traverse(obj, (visitproc)referrersvisit, objs)) &#123;</div><div class="line">            if (PyList_Append(resultlist, obj) &lt; 0)</div><div class="line">                return 0; /* error */</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 1; /* no error */</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_get_referrers__doc__,</div><div class="line">"get_referrers(*objs) -&gt; list\n\</div><div class="line">Return the list of objects that directly refer to any of objs.");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_get_referrers(PyObject *self, PyObject *args)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    PyObject *result = PyList_New(0);</div><div class="line">    if (!result) return NULL;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; NUM_GENERATIONS; i++) &#123;</div><div class="line">        if (!(gc_referrers_for(args, GEN_HEAD(i), result))) &#123;</div><div class="line">            Py_DECREF(result);</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Append obj to list; return true if error (out of memory), false if OK. */</div><div class="line">static int</div><div class="line">referentsvisit(PyObject *obj, PyObject *list)</div><div class="line">&#123;</div><div class="line">    return PyList_Append(list, obj) &lt; 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_get_referents__doc__,</div><div class="line">"get_referents(*objs) -&gt; list\n\</div><div class="line">Return the list of objects that are directly referred to by objs.");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_get_referents(PyObject *self, PyObject *args)</div><div class="line">&#123;</div><div class="line">    Py_ssize_t i;</div><div class="line">    PyObject *result = PyList_New(0);</div><div class="line"></div><div class="line">    if (result == NULL)</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; PyTuple_GET_SIZE(args); i++) &#123;</div><div class="line">        traverseproc traverse;</div><div class="line">        PyObject *obj = PyTuple_GET_ITEM(args, i);</div><div class="line"></div><div class="line">        if (! PyObject_IS_GC(obj))</div><div class="line">            continue;</div><div class="line">        traverse = Py_TYPE(obj)-&gt;tp_traverse;</div><div class="line">        if (! traverse)</div><div class="line">            continue;</div><div class="line">        if (traverse(obj, (visitproc)referentsvisit, result)) &#123;</div><div class="line">            Py_DECREF(result);</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_get_objects__doc__,</div><div class="line">"get_objects() -&gt; [...]\n"</div><div class="line">"\n"</div><div class="line">"Return a list of objects tracked by the collector (excluding the list\n"</div><div class="line">"returned).\n");</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_get_objects(PyObject *self, PyObject *noargs)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    PyObject* result;</div><div class="line"></div><div class="line">    result = PyList_New(0);</div><div class="line">    if (result == NULL)</div><div class="line">        return NULL;</div><div class="line">    for (i = 0; i &lt; NUM_GENERATIONS; i++) &#123;</div><div class="line">        if (append_objects(result, GEN_HEAD(i))) &#123;</div><div class="line">            Py_DECREF(result);</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyDoc_STRVAR(gc_is_tracked__doc__,</div><div class="line">"is_tracked(obj) -&gt; bool\n"</div><div class="line">"\n"</div><div class="line">"Returns true if the object is tracked by the garbage collector.\n"</div><div class="line">"Simple atomic objects will return false.\n"</div><div class="line">);</div><div class="line"></div><div class="line">static PyObject *</div><div class="line">gc_is_tracked(PyObject *self, PyObject *obj)</div><div class="line">&#123;</div><div class="line">    PyObject *result;</div><div class="line"></div><div class="line">    if (PyObject_IS_GC(obj) &amp;&amp; IS_TRACKED(obj))</div><div class="line">        result = Py_True;</div><div class="line">    else</div><div class="line">        result = Py_False;</div><div class="line">    Py_INCREF(result);</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">PyDoc_STRVAR(gc__doc__,</div><div class="line">"This module provides access to the garbage collector for reference cycles.\n"</div><div class="line">"\n"</div><div class="line">"enable() -- Enable automatic garbage collection.\n"</div><div class="line">"disable() -- Disable automatic garbage collection.\n"</div><div class="line">"isenabled() -- Returns true if automatic collection is enabled.\n"</div><div class="line">"collect() -- Do a full collection right now.\n"</div><div class="line">"get_count() -- Return the current collection counts.\n"</div><div class="line">"set_debug() -- Set debugging flags.\n"</div><div class="line">"get_debug() -- Get debugging flags.\n"</div><div class="line">"set_threshold() -- Set the collection thresholds.\n"</div><div class="line">"get_threshold() -- Return the current the collection thresholds.\n"</div><div class="line">"get_objects() -- Return a list of all objects tracked by the collector.\n"</div><div class="line">"is_tracked() -- Returns true if a given object is tracked.\n"</div><div class="line">"get_referrers() -- Return the list of objects that refer to an object.\n"</div><div class="line">"get_referents() -- Return the list of objects that an object refers to.\n");</div><div class="line"></div><div class="line">static PyMethodDef GcMethods[] = &#123;</div><div class="line">    &#123;"enable",             gc_enable,     METH_NOARGS,  gc_enable__doc__&#125;,</div><div class="line">    &#123;"disable",            gc_disable,    METH_NOARGS,  gc_disable__doc__&#125;,</div><div class="line">    &#123;"isenabled",          gc_isenabled,  METH_NOARGS,  gc_isenabled__doc__&#125;,</div><div class="line">    &#123;"set_debug",          gc_set_debug,  METH_VARARGS, gc_set_debug__doc__&#125;,</div><div class="line">    &#123;"get_debug",          gc_get_debug,  METH_NOARGS,  gc_get_debug__doc__&#125;,</div><div class="line">    &#123;"get_count",          gc_get_count,  METH_NOARGS,  gc_get_count__doc__&#125;,</div><div class="line">    &#123;"set_threshold",  gc_set_thresh, METH_VARARGS, gc_set_thresh__doc__&#125;,</div><div class="line">    &#123;"get_threshold",  gc_get_thresh, METH_NOARGS,  gc_get_thresh__doc__&#125;,</div><div class="line">    &#123;"collect",            (PyCFunction)gc_collect,</div><div class="line">        METH_VARARGS | METH_KEYWORDS,           gc_collect__doc__&#125;,</div><div class="line">    &#123;"get_objects",    gc_get_objects,METH_NOARGS,  gc_get_objects__doc__&#125;,</div><div class="line">    &#123;"is_tracked",     gc_is_tracked, METH_O,       gc_is_tracked__doc__&#125;,</div><div class="line">    &#123;"get_referrers",  gc_get_referrers, METH_VARARGS,</div><div class="line">        gc_get_referrers__doc__&#125;,</div><div class="line">    &#123;"get_referents",  gc_get_referents, METH_VARARGS,</div><div class="line">        gc_get_referents__doc__&#125;,</div><div class="line">    &#123;NULL,      NULL&#125;           /* Sentinel */</div><div class="line">&#125;;</div><div class="line"></div><div class="line">PyMODINIT_FUNC</div><div class="line">initgc(void)</div><div class="line">&#123;</div><div class="line">    PyObject *m;</div><div class="line"></div><div class="line">    m = Py_InitModule4("gc",</div><div class="line">                          GcMethods,</div><div class="line">                          gc__doc__,</div><div class="line">                          NULL,</div><div class="line">                          PYTHON_API_VERSION);</div><div class="line">    if (m == NULL)</div><div class="line">        return;</div><div class="line"></div><div class="line">    if (garbage == NULL) &#123;</div><div class="line">        garbage = PyList_New(0);</div><div class="line">        if (garbage == NULL)</div><div class="line">            return;</div><div class="line">    &#125;</div><div class="line">    Py_INCREF(garbage);</div><div class="line">    if (PyModule_AddObject(m, "garbage", garbage) &lt; 0)</div><div class="line">        return;</div><div class="line"></div><div class="line">    /* Importing can't be done in collect() because collect()</div><div class="line">     * can be called via PyGC_Collect() in Py_Finalize().</div><div class="line">     * This wouldn't be a problem, except that &lt;initialized&gt; is</div><div class="line">     * reset to 0 before calling collect which trips up</div><div class="line">     * the import and triggers an assertion.</div><div class="line">     */</div><div class="line">    if (tmod == NULL) &#123;</div><div class="line">        tmod = PyImport_ImportModuleNoBlock("time");</div><div class="line">        if (tmod == NULL)</div><div class="line">            PyErr_Clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">#define ADD_INT(NAME) if (PyModule_AddIntConstant(m, #NAME, NAME) &lt; 0) return</div><div class="line">    ADD_INT(DEBUG_STATS);</div><div class="line">    ADD_INT(DEBUG_COLLECTABLE);</div><div class="line">    ADD_INT(DEBUG_UNCOLLECTABLE);</div><div class="line">    ADD_INT(DEBUG_INSTANCES);</div><div class="line">    ADD_INT(DEBUG_OBJECTS);</div><div class="line">    ADD_INT(DEBUG_SAVEALL);</div><div class="line">    ADD_INT(DEBUG_LEAK);</div><div class="line">#undef ADD_INT</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* API to invoke gc.collect() from C */</div><div class="line">Py_ssize_t</div><div class="line">PyGC_Collect(void)</div><div class="line">&#123;</div><div class="line">    Py_ssize_t n;</div><div class="line"></div><div class="line">    if (collecting)</div><div class="line">        n = 0; /* already collecting, don't do anything */</div><div class="line">    else &#123;</div><div class="line">        collecting = 1;</div><div class="line">        n = collect(NUM_GENERATIONS - 1);</div><div class="line">        collecting = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return n;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* for debugging */</div><div class="line">void</div><div class="line">_PyGC_Dump(PyGC_Head *g)</div><div class="line">&#123;</div><div class="line">    _PyObject_Dump(FROM_GC(g));</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* extension modules might be compiled with GC support so these</div><div class="line">   functions must always be available */</div><div class="line"></div><div class="line">#undef PyObject_GC_Track</div><div class="line">#undef PyObject_GC_UnTrack</div><div class="line">#undef PyObject_GC_Del</div><div class="line">#undef _PyObject_GC_Malloc</div><div class="line"></div><div class="line">void</div><div class="line">PyObject_GC_Track(void *op)</div><div class="line">&#123;</div><div class="line">    _PyObject_GC_TRACK(op);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* for binary compatibility with 2.2 */</div><div class="line">void</div><div class="line">_PyObject_GC_Track(PyObject *op)</div><div class="line">&#123;</div><div class="line">    PyObject_GC_Track(op);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void</div><div class="line">PyObject_GC_UnTrack(void *op)</div><div class="line">&#123;</div><div class="line">    /* Obscure:  the Py_TRASHCAN mechanism requires that we be able to</div><div class="line">     * call PyObject_GC_UnTrack twice on an object.</div><div class="line">     */</div><div class="line">    if (IS_TRACKED(op))</div><div class="line">        _PyObject_GC_UNTRACK(op);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* for binary compatibility with 2.2 */</div><div class="line">void</div><div class="line">_PyObject_GC_UnTrack(PyObject *op)</div><div class="line">&#123;</div><div class="line">    PyObject_GC_UnTrack(op);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyObject *</div><div class="line">_PyObject_GC_Malloc(size_t basicsize)</div><div class="line">&#123;</div><div class="line">    PyObject *op;</div><div class="line">    PyGC_Head *g;</div><div class="line">    if (basicsize &gt; PY_SSIZE_T_MAX - sizeof(PyGC_Head))</div><div class="line">        return PyErr_NoMemory();</div><div class="line">    g = (PyGC_Head *)PyObject_MALLOC(</div><div class="line">        sizeof(PyGC_Head) + basicsize);</div><div class="line">    if (g == NULL)</div><div class="line">        return PyErr_NoMemory();</div><div class="line">    g-&gt;gc.gc_refs = GC_UNTRACKED;</div><div class="line">    /* 分配的PyObject &gt; 700 就执行垃圾回收 */</div><div class="line">    generations[0].count++; /* number of allocated GC objects */</div><div class="line">    if (generations[0].count &gt; generations[0].threshold &amp;&amp;</div><div class="line">        enabled &amp;&amp;</div><div class="line">        generations[0].threshold &amp;&amp;</div><div class="line">        !collecting &amp;&amp;</div><div class="line">        !PyErr_Occurred()) &#123;</div><div class="line">        collecting = 1;</div><div class="line">        collect_generations();</div><div class="line">        collecting = 0;</div><div class="line">    &#125;</div><div class="line">    op = FROM_GC(g);</div><div class="line">    return op;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyObject *</div><div class="line">_PyObject_GC_New(PyTypeObject *tp)</div><div class="line">&#123;</div><div class="line">    PyObject *op = _PyObject_GC_Malloc(_PyObject_SIZE(tp));</div><div class="line">    if (op != NULL)</div><div class="line">        op = PyObject_INIT(op, tp);</div><div class="line">    return op;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyVarObject *</div><div class="line">_PyObject_GC_NewVar(PyTypeObject *tp, Py_ssize_t nitems)</div><div class="line">&#123;</div><div class="line">    const size_t size = _PyObject_VAR_SIZE(tp, nitems);</div><div class="line">    PyVarObject *op = (PyVarObject *) _PyObject_GC_Malloc(size);</div><div class="line">    if (op != NULL)</div><div class="line">        op = PyObject_INIT_VAR(op, tp, nitems);</div><div class="line">    return op;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PyVarObject *</div><div class="line">_PyObject_GC_Resize(PyVarObject *op, Py_ssize_t nitems)</div><div class="line">&#123;</div><div class="line">    const size_t basicsize = _PyObject_VAR_SIZE(Py_TYPE(op), nitems);</div><div class="line">    PyGC_Head *g = AS_GC(op);</div><div class="line">    if (basicsize &gt; PY_SSIZE_T_MAX - sizeof(PyGC_Head))</div><div class="line">        return (PyVarObject *)PyErr_NoMemory();</div><div class="line">    g = (PyGC_Head *)PyObject_REALLOC(g,  sizeof(PyGC_Head) + basicsize);</div><div class="line">    if (g == NULL)</div><div class="line">        return (PyVarObject *)PyErr_NoMemory();</div><div class="line">    op = (PyVarObject *) FROM_GC(g);</div><div class="line">    Py_SIZE(op) = nitems;</div><div class="line">    return op;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void</div><div class="line">PyObject_GC_Del(void *op)</div><div class="line">&#123;</div><div class="line">    PyGC_Head *g = AS_GC(op);</div><div class="line">    if (IS_TRACKED(op))</div><div class="line">        gc_list_remove(g);</div><div class="line">    if (generations[0].count &gt; 0) &#123;</div><div class="line">        generations[0].count--;</div><div class="line">    &#125;</div><div class="line">    PyObject_FREE(g);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* for binary compatibility with 2.2 */</div><div class="line">#undef _PyObject_GC_Del</div><div class="line">void</div><div class="line">_PyObject_GC_Del(PyObject *op)</div><div class="line">&#123;</div><div class="line">    PyObject_GC_Del(op);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python垃圾回收概述&quot;&gt;&lt;a href=&quot;#Python垃圾回收概述&quot; class=&quot;headerlink&quot; title=&quot;Python垃圾回收概述&quot;&gt;&lt;/a&gt;Python垃圾回收概述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Python中的垃圾回收机制基于引用计数(ob_r
    
    </summary>
    
      <category term="python源码剖析" scheme="http://fanchao01.github.io/blog/categories/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Python源码剖析—统一内存管理</title>
    <link href="http://fanchao01.github.io/blog/2016/10/09/python-obmalloc/"/>
    <id>http://fanchao01.github.io/blog/2016/10/09/python-obmalloc/</id>
    <published>2016-10-09T07:00:00.000Z</published>
    <updated>2016-10-25T12:36:36.211Z</updated>
    
    <content type="html"><![CDATA[<p>(图片来自: <a href="https://nodefe.com/implement-of-pymalloc-from-source/" target="_blank" rel="external">https://nodefe.com/implement-of-pymalloc-from-source/</a>)<br><img src="/blog/images/obmalloc_global.jpg" alt="image"></p>
<h2 id="arena、pool和block"><a href="#arena、pool和block" class="headerlink" title="arena、pool和block"></a>arena、pool和block</h2><hr>
<p>Python的对象分配器将内存分为三个维度，从大到小叫做arena、pool以及blcok。</p>
<p><img src="/blog/images/arena.jpg" alt="image"></p>
<h3 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h3><p>一个arena分为两个部分。管理部分arena_object，每次需要创建一个arena时，先创建一个arena_object结构放入arenas数组。然后再申请256KB内存作为arena管理的内存部分。arena_object和arena的内存是分开的，通过域address标记。</p>
<h3 id="pool"><a href="#pool" class="headerlink" title="pool"></a>pool</h3><p>将arena的内存按照4KB再划分则为一个个pool。每个pool也分为两部分，内存的高端为pool_header用于管理分配出去的block、回收的block以及从来没有被分配出去的block；剩余的内存作为另一部分再被分为一个个block。每个pool一旦使用只能分配固定个数的block。pool的两部分在同一个连续的页内。</p>
<p>pool会有三种状态：</p>
<ul>
<li><p>used: 部分block被分配出去，另一部分还未被分配出去。该状态的pool会被放入usedpools中以加快搜寻可用pool的速度。如果used的pool中的最后的block也被分配出去则pool进入full状态，并且从usedpool中去掉。如果used的pool中的block全被回收则pool进入empty状态，并且从usedpool中去掉放入arena中的freepools链表中。</p>
</li>
<li><p>empy: 所有的block都没有被分配出去。有两种可能，一种是pool中的block都被回收了，从used状态转变而来，这样的pool放入arena的freepools链表中；另外一种是随着arena初始化而来，此时还没有作为pool存在，只是作为arena中没有被使用的内存部分。</p>
</li>
<li><p>full: 所有的block被分配出去了。不存在任何链表中，当有block被回收时进入used状态再放入usedpool中。</p>
</li>
</ul>
<h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>block是内存管理的最小单位，每次分配需要按照block对齐。每次分配和回收都是固定个数的block。当内存被回收时，所有的内存会放入pool中的链表freeblocks中。没有被分配出去的block存在两个地方，一部分从来没有被分配出去过，通过nextofset表明空闲的block的起始地址；另一部分是分配出去又被回收，会被放入freeblocks中。</p>
<p>被回收的block会将头部作为指针链接下一个被回收的block</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*(block **)ob = freeblocks</div><div class="line">*freeblocks = &amp;ob</div></pre></td></tr></table></figure>
<h2 id="pool的种类"><a href="#pool的种类" class="headerlink" title="pool的种类"></a>pool的种类</h2><hr>
<p>按照每次可以分配的block的个数，pool被分为几种类型(block size)，同时也是其在usedpool中的序号(szidx)。每页为4KB，每个8个block1算作一组，所以pool最多有64个类型。具体可以参见下面代码注释。</p>
<h2 id="python的obmalloc-c源码注释"><a href="#python的obmalloc-c源码注释" class="headerlink" title="python的obmalloc.c源码注释"></a>python的obmalloc.c源码注释</h2><hr>
<p>Objects/obmalloc.c</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div><div class="line">1347</div><div class="line">1348</div><div class="line">1349</div><div class="line">1350</div><div class="line">1351</div><div class="line">1352</div><div class="line">1353</div><div class="line">1354</div><div class="line">1355</div><div class="line">1356</div><div class="line">1357</div><div class="line">1358</div><div class="line">1359</div><div class="line">1360</div><div class="line">1361</div><div class="line">1362</div><div class="line">1363</div><div class="line">1364</div><div class="line">1365</div><div class="line">1366</div><div class="line">1367</div><div class="line">1368</div><div class="line">1369</div><div class="line">1370</div><div class="line">1371</div><div class="line">1372</div><div class="line">1373</div><div class="line">1374</div><div class="line">1375</div><div class="line">1376</div><div class="line">1377</div><div class="line">1378</div><div class="line">1379</div><div class="line">1380</div><div class="line">1381</div><div class="line">1382</div><div class="line">1383</div><div class="line">1384</div><div class="line">1385</div><div class="line">1386</div><div class="line">1387</div><div class="line">1388</div><div class="line">1389</div><div class="line">1390</div><div class="line">1391</div><div class="line">1392</div><div class="line">1393</div><div class="line">1394</div><div class="line">1395</div><div class="line">1396</div><div class="line">1397</div><div class="line">1398</div><div class="line">1399</div><div class="line">1400</div><div class="line">1401</div><div class="line">1402</div><div class="line">1403</div><div class="line">1404</div><div class="line">1405</div><div class="line">1406</div><div class="line">1407</div><div class="line">1408</div><div class="line">1409</div><div class="line">1410</div><div class="line">1411</div><div class="line">1412</div><div class="line">1413</div><div class="line">1414</div><div class="line">1415</div><div class="line">1416</div><div class="line">1417</div><div class="line">1418</div><div class="line">1419</div><div class="line">1420</div><div class="line">1421</div><div class="line">1422</div><div class="line">1423</div><div class="line">1424</div><div class="line">1425</div><div class="line">1426</div><div class="line">1427</div><div class="line">1428</div><div class="line">1429</div><div class="line">1430</div><div class="line">1431</div><div class="line">1432</div><div class="line">1433</div><div class="line">1434</div><div class="line">1435</div><div class="line">1436</div><div class="line">1437</div><div class="line">1438</div><div class="line">1439</div><div class="line">1440</div><div class="line">1441</div><div class="line">1442</div><div class="line">1443</div><div class="line">1444</div><div class="line">1445</div><div class="line">1446</div><div class="line">1447</div><div class="line">1448</div><div class="line">1449</div><div class="line">1450</div><div class="line">1451</div><div class="line">1452</div><div class="line">1453</div><div class="line">1454</div><div class="line">1455</div><div class="line">1456</div><div class="line">1457</div><div class="line">1458</div><div class="line">1459</div><div class="line">1460</div><div class="line">1461</div><div class="line">1462</div><div class="line">1463</div><div class="line">1464</div><div class="line">1465</div><div class="line">1466</div><div class="line">1467</div><div class="line">1468</div><div class="line">1469</div><div class="line">1470</div><div class="line">1471</div><div class="line">1472</div><div class="line">1473</div><div class="line">1474</div><div class="line">1475</div><div class="line">1476</div><div class="line">1477</div><div class="line">1478</div><div class="line">1479</div><div class="line">1480</div><div class="line">1481</div><div class="line">1482</div><div class="line">1483</div><div class="line">1484</div><div class="line">1485</div><div class="line">1486</div><div class="line">1487</div><div class="line">1488</div><div class="line">1489</div><div class="line">1490</div><div class="line">1491</div><div class="line">1492</div><div class="line">1493</div><div class="line">1494</div><div class="line">1495</div><div class="line">1496</div><div class="line">1497</div><div class="line">1498</div><div class="line">1499</div><div class="line">1500</div><div class="line">1501</div><div class="line">1502</div><div class="line">1503</div><div class="line">1504</div><div class="line">1505</div><div class="line">1506</div><div class="line">1507</div><div class="line">1508</div><div class="line">1509</div><div class="line">1510</div><div class="line">1511</div><div class="line">1512</div><div class="line">1513</div><div class="line">1514</div><div class="line">1515</div><div class="line">1516</div><div class="line">1517</div><div class="line">1518</div><div class="line">1519</div><div class="line">1520</div><div class="line">1521</div><div class="line">1522</div><div class="line">1523</div><div class="line">1524</div><div class="line">1525</div><div class="line">1526</div><div class="line">1527</div><div class="line">1528</div><div class="line">1529</div><div class="line">1530</div><div class="line">1531</div><div class="line">1532</div><div class="line">1533</div><div class="line">1534</div><div class="line">1535</div><div class="line">1536</div><div class="line">1537</div><div class="line">1538</div><div class="line">1539</div><div class="line">1540</div><div class="line">1541</div><div class="line">1542</div><div class="line">1543</div><div class="line">1544</div><div class="line">1545</div><div class="line">1546</div><div class="line">1547</div><div class="line">1548</div><div class="line">1549</div><div class="line">1550</div><div class="line">1551</div><div class="line">1552</div><div class="line">1553</div><div class="line">1554</div><div class="line">1555</div><div class="line">1556</div><div class="line">1557</div><div class="line">1558</div><div class="line">1559</div><div class="line">1560</div><div class="line">1561</div><div class="line">1562</div><div class="line">1563</div><div class="line">1564</div><div class="line">1565</div><div class="line">1566</div><div class="line">1567</div><div class="line">1568</div><div class="line">1569</div><div class="line">1570</div><div class="line">1571</div><div class="line">1572</div><div class="line">1573</div><div class="line">1574</div><div class="line">1575</div><div class="line">1576</div><div class="line">1577</div><div class="line">1578</div><div class="line">1579</div><div class="line">1580</div><div class="line">1581</div><div class="line">1582</div><div class="line">1583</div><div class="line">1584</div><div class="line">1585</div><div class="line">1586</div><div class="line">1587</div><div class="line">1588</div><div class="line">1589</div><div class="line">1590</div><div class="line">1591</div><div class="line">1592</div><div class="line">1593</div><div class="line">1594</div><div class="line">1595</div><div class="line">1596</div><div class="line">1597</div><div class="line">1598</div><div class="line">1599</div><div class="line">1600</div><div class="line">1601</div><div class="line">1602</div><div class="line">1603</div><div class="line">1604</div><div class="line">1605</div><div class="line">1606</div><div class="line">1607</div><div class="line">1608</div><div class="line">1609</div><div class="line">1610</div><div class="line">1611</div><div class="line">1612</div><div class="line">1613</div><div class="line">1614</div><div class="line">1615</div><div class="line">1616</div><div class="line">1617</div><div class="line">1618</div><div class="line">1619</div><div class="line">1620</div><div class="line">1621</div><div class="line">1622</div><div class="line">1623</div><div class="line">1624</div><div class="line">1625</div><div class="line">1626</div><div class="line">1627</div><div class="line">1628</div><div class="line">1629</div><div class="line">1630</div><div class="line">1631</div><div class="line">1632</div><div class="line">1633</div><div class="line">1634</div><div class="line">1635</div><div class="line">1636</div><div class="line">1637</div><div class="line">1638</div><div class="line">1639</div><div class="line">1640</div><div class="line">1641</div><div class="line">1642</div><div class="line">1643</div><div class="line">1644</div><div class="line">1645</div><div class="line">1646</div><div class="line">1647</div><div class="line">1648</div><div class="line">1649</div><div class="line">1650</div><div class="line">1651</div><div class="line">1652</div><div class="line">1653</div><div class="line">1654</div><div class="line">1655</div><div class="line">1656</div><div class="line">1657</div><div class="line">1658</div><div class="line">1659</div><div class="line">1660</div><div class="line">1661</div><div class="line">1662</div><div class="line">1663</div><div class="line">1664</div><div class="line">1665</div><div class="line">1666</div><div class="line">1667</div><div class="line">1668</div><div class="line">1669</div><div class="line">1670</div><div class="line">1671</div><div class="line">1672</div><div class="line">1673</div><div class="line">1674</div><div class="line">1675</div><div class="line">1676</div><div class="line">1677</div><div class="line">1678</div><div class="line">1679</div><div class="line">1680</div><div class="line">1681</div><div class="line">1682</div><div class="line">1683</div><div class="line">1684</div><div class="line">1685</div><div class="line">1686</div><div class="line">1687</div><div class="line">1688</div><div class="line">1689</div><div class="line">1690</div><div class="line">1691</div><div class="line">1692</div><div class="line">1693</div><div class="line">1694</div><div class="line">1695</div><div class="line">1696</div><div class="line">1697</div><div class="line">1698</div><div class="line">1699</div><div class="line">1700</div><div class="line">1701</div><div class="line">1702</div><div class="line">1703</div><div class="line">1704</div><div class="line">1705</div><div class="line">1706</div><div class="line">1707</div><div class="line">1708</div><div class="line">1709</div><div class="line">1710</div><div class="line">1711</div><div class="line">1712</div><div class="line">1713</div><div class="line">1714</div><div class="line">1715</div><div class="line">1716</div><div class="line">1717</div><div class="line">1718</div><div class="line">1719</div><div class="line">1720</div><div class="line">1721</div><div class="line">1722</div><div class="line">1723</div><div class="line">1724</div><div class="line">1725</div><div class="line">1726</div><div class="line">1727</div><div class="line">1728</div><div class="line">1729</div><div class="line">1730</div><div class="line">1731</div><div class="line">1732</div><div class="line">1733</div><div class="line">1734</div><div class="line">1735</div><div class="line">1736</div><div class="line">1737</div><div class="line">1738</div><div class="line">1739</div><div class="line">1740</div><div class="line">1741</div><div class="line">1742</div><div class="line">1743</div><div class="line">1744</div><div class="line">1745</div><div class="line">1746</div><div class="line">1747</div><div class="line">1748</div><div class="line">1749</div><div class="line">1750</div><div class="line">1751</div><div class="line">1752</div><div class="line">1753</div><div class="line">1754</div><div class="line">1755</div><div class="line">1756</div><div class="line">1757</div><div class="line">1758</div><div class="line">1759</div><div class="line">1760</div><div class="line">1761</div><div class="line">1762</div><div class="line">1763</div><div class="line">1764</div><div class="line">1765</div><div class="line">1766</div><div class="line">1767</div><div class="line">1768</div><div class="line">1769</div><div class="line">1770</div><div class="line">1771</div><div class="line">1772</div><div class="line">1773</div><div class="line">1774</div><div class="line">1775</div><div class="line">1776</div><div class="line">1777</div><div class="line">1778</div><div class="line">1779</div><div class="line">1780</div><div class="line">1781</div><div class="line">1782</div><div class="line">1783</div><div class="line">1784</div><div class="line">1785</div><div class="line">1786</div><div class="line">1787</div><div class="line">1788</div><div class="line">1789</div><div class="line">1790</div><div class="line">1791</div><div class="line">1792</div><div class="line">1793</div><div class="line">1794</div><div class="line">1795</div><div class="line">1796</div><div class="line">1797</div><div class="line">1798</div><div class="line">1799</div><div class="line">1800</div><div class="line">1801</div><div class="line">1802</div><div class="line">1803</div><div class="line">1804</div><div class="line">1805</div><div class="line">1806</div><div class="line">1807</div><div class="line">1808</div><div class="line">1809</div><div class="line">1810</div><div class="line">1811</div><div class="line">1812</div><div class="line">1813</div><div class="line">1814</div><div class="line">1815</div><div class="line">1816</div><div class="line">1817</div><div class="line">1818</div><div class="line">1819</div><div class="line">1820</div><div class="line">1821</div><div class="line">1822</div><div class="line">1823</div><div class="line">1824</div><div class="line">1825</div><div class="line">1826</div><div class="line">1827</div><div class="line">1828</div><div class="line">1829</div><div class="line">1830</div><div class="line">1831</div><div class="line">1832</div><div class="line">1833</div><div class="line">1834</div><div class="line">1835</div><div class="line">1836</div><div class="line">1837</div><div class="line">1838</div><div class="line">1839</div><div class="line">1840</div><div class="line">1841</div><div class="line">1842</div><div class="line">1843</div><div class="line">1844</div><div class="line">1845</div><div class="line">1846</div><div class="line">1847</div><div class="line">1848</div><div class="line">1849</div><div class="line">1850</div><div class="line">1851</div><div class="line">1852</div><div class="line">1853</div><div class="line">1854</div><div class="line">1855</div><div class="line">1856</div><div class="line">1857</div><div class="line">1858</div><div class="line">1859</div><div class="line">1860</div><div class="line">1861</div><div class="line">1862</div><div class="line">1863</div><div class="line">1864</div><div class="line">1865</div><div class="line">1866</div><div class="line">1867</div><div class="line">1868</div><div class="line">1869</div><div class="line">1870</div><div class="line">1871</div><div class="line">1872</div><div class="line">1873</div><div class="line">1874</div><div class="line">1875</div><div class="line">1876</div><div class="line">1877</div><div class="line">1878</div><div class="line">1879</div><div class="line">1880</div><div class="line">1881</div><div class="line">1882</div><div class="line">1883</div><div class="line">1884</div><div class="line">1885</div><div class="line">1886</div><div class="line">1887</div><div class="line">1888</div><div class="line">1889</div><div class="line">1890</div><div class="line">1891</div><div class="line">1892</div><div class="line">1893</div><div class="line">1894</div><div class="line">1895</div><div class="line">1896</div><div class="line">1897</div><div class="line">1898</div><div class="line">1899</div><div class="line">1900</div><div class="line">1901</div><div class="line">1902</div><div class="line">1903</div><div class="line">1904</div><div class="line">1905</div><div class="line">1906</div><div class="line">1907</div><div class="line">1908</div><div class="line">1909</div><div class="line">1910</div><div class="line">1911</div><div class="line">1912</div><div class="line">1913</div><div class="line">1914</div><div class="line">1915</div><div class="line">1916</div><div class="line">1917</div><div class="line">1918</div><div class="line">1919</div><div class="line">1920</div><div class="line">1921</div><div class="line">1922</div><div class="line">1923</div><div class="line">1924</div><div class="line">1925</div><div class="line">1926</div><div class="line">1927</div><div class="line">1928</div><div class="line">1929</div><div class="line">1930</div><div class="line">1931</div><div class="line">1932</div><div class="line">1933</div><div class="line">1934</div><div class="line">1935</div><div class="line">1936</div><div class="line">1937</div><div class="line">1938</div><div class="line">1939</div><div class="line">1940</div><div class="line">1941</div><div class="line">1942</div><div class="line">1943</div><div class="line">1944</div><div class="line">1945</div><div class="line">1946</div><div class="line">1947</div><div class="line">1948</div><div class="line">1949</div><div class="line">1950</div><div class="line">1951</div><div class="line">1952</div><div class="line">1953</div><div class="line">1954</div><div class="line">1955</div><div class="line">1956</div><div class="line">1957</div><div class="line">1958</div><div class="line">1959</div><div class="line">1960</div><div class="line">1961</div><div class="line">1962</div><div class="line">1963</div><div class="line">1964</div><div class="line">1965</div><div class="line">1966</div><div class="line">1967</div><div class="line">1968</div><div class="line">1969</div><div class="line">1970</div><div class="line">1971</div><div class="line">1972</div><div class="line">1973</div><div class="line">1974</div><div class="line">1975</div><div class="line">1976</div><div class="line">1977</div><div class="line">1978</div><div class="line">1979</div><div class="line">1980</div><div class="line">1981</div><div class="line">1982</div><div class="line">1983</div><div class="line">1984</div><div class="line">1985</div><div class="line">1986</div><div class="line">1987</div><div class="line">1988</div><div class="line">1989</div><div class="line">1990</div><div class="line">1991</div><div class="line">1992</div><div class="line">1993</div><div class="line">1994</div><div class="line">1995</div><div class="line">1996</div><div class="line">1997</div><div class="line">1998</div><div class="line">1999</div><div class="line">2000</div><div class="line">2001</div><div class="line">2002</div><div class="line">2003</div><div class="line">2004</div><div class="line">2005</div><div class="line">2006</div><div class="line">2007</div><div class="line">2008</div><div class="line">2009</div><div class="line">2010</div><div class="line">2011</div><div class="line">2012</div><div class="line">2013</div><div class="line">2014</div><div class="line">2015</div><div class="line">2016</div><div class="line">2017</div><div class="line">2018</div><div class="line">2019</div><div class="line">2020</div><div class="line">2021</div><div class="line">2022</div><div class="line">2023</div><div class="line">2024</div><div class="line">2025</div><div class="line">2026</div><div class="line">2027</div><div class="line">2028</div><div class="line">2029</div><div class="line">2030</div><div class="line">2031</div><div class="line">2032</div><div class="line">2033</div><div class="line">2034</div><div class="line">2035</div><div class="line">2036</div><div class="line">2037</div><div class="line">2038</div><div class="line">2039</div><div class="line">2040</div><div class="line">2041</div><div class="line">2042</div><div class="line">2043</div><div class="line">2044</div><div class="line">2045</div><div class="line">2046</div><div class="line">2047</div><div class="line">2048</div><div class="line">2049</div><div class="line">2050</div><div class="line">2051</div><div class="line">2052</div><div class="line">2053</div><div class="line">2054</div><div class="line">2055</div><div class="line">2056</div><div class="line">2057</div></pre></td><td class="code"><pre><div class="line">#include "Python.h"</div><div class="line"></div><div class="line">#if defined(__has_feature)  /* Clang */</div><div class="line"> #if __has_feature(address_sanitizer)  /* is ASAN enabled? */</div><div class="line">  #define ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS \</div><div class="line">        __attribute__((no_address_safety_analysis)) \</div><div class="line">        __attribute__ ((noinline))</div><div class="line"> #else</div><div class="line">  #define ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS</div><div class="line"> #endif</div><div class="line">#else</div><div class="line"> #if defined(__SANITIZE_ADDRESS__)  /* GCC 4.8.x, is ASAN enabled? */</div><div class="line">  #define ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS \</div><div class="line">        __attribute__((no_address_safety_analysis)) \</div><div class="line">        __attribute__ ((noinline))</div><div class="line"> #else</div><div class="line">  #define ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS</div><div class="line"> #endif</div><div class="line">#endif</div><div class="line"></div><div class="line">#ifdef WITH_PYMALLOC</div><div class="line"></div><div class="line">#ifdef HAVE_MMAP</div><div class="line"> #include &lt;sys/mman.h&gt;</div><div class="line"> #ifdef MAP_ANONYMOUS</div><div class="line">  #define ARENAS_USE_MMAP</div><div class="line"> #endif</div><div class="line">#endif</div><div class="line"></div><div class="line">#ifdef WITH_VALGRIND</div><div class="line">#include &lt;valgrind/valgrind.h&gt;</div><div class="line"></div><div class="line">/* If we're using GCC, use __builtin_expect() to reduce overhead of</div><div class="line">   the valgrind checks */</div><div class="line">#if defined(__GNUC__) &amp;&amp; (__GNUC__ &gt; 2) &amp;&amp; defined(__OPTIMIZE__)</div><div class="line">#  define UNLIKELY(value) __builtin_expect((value), 0)</div><div class="line">#else</div><div class="line">#  define UNLIKELY(value) (value)</div><div class="line">#endif</div><div class="line"></div><div class="line">/* -1 indicates that we haven't checked that we're running on valgrind yet. */</div><div class="line">static int running_on_valgrind = -1;</div><div class="line">#endif</div><div class="line"></div><div class="line">/* An object allocator for Python.</div><div class="line"></div><div class="line">   Here is an introduction to the layers of the Python memory architecture,</div><div class="line">   showing where the object allocator is actually used (layer +2), It is</div><div class="line">   called for every object allocation and deallocation (PyObject_New/Del),</div><div class="line">   unless the object-specific allocators implement a proprietary allocation</div><div class="line">   scheme (ex.: ints use a simple free list). This is also the place where</div><div class="line">   the cyclic garbage collector operates selectively on container objects.</div><div class="line"></div><div class="line"> * -2层为物理存储器</div><div class="line"> * -1层为操作系统的内存管理子系统</div><div class="line"> *  0层为C语言库的内存分配器：例如malloc\free</div><div class="line"> *  1层Python对0层的简单封装：主要解决标准C语言未定义清楚的情况，例如malloc(0)</div><div class="line"> *  2层Python统一对象分配器：下面讲到的内存管理主要在这一层次</div><div class="line"> *  3层Python的各对象分配器：每个类型自己管理类型对象的分配和回收，实际上就是缓存</div><div class="line"></div><div class="line">    Object-specific allocators</div><div class="line">    _____   ______   ______       ________</div><div class="line">   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |</div><div class="line">+3 | &lt;----- Object-specific memory -----&gt; | &lt;-- Non-object memory --&gt; |</div><div class="line">    _______________________________       |                           |</div><div class="line">   [   Python's object allocator   ]      |                           |</div><div class="line">+2 | ####### Object memory ####### | &lt;------ Internal buffers ------&gt; |</div><div class="line">    ______________________________________________________________    |</div><div class="line">   [          Python's raw memory allocator (PyMem_ API)          ]   |</div><div class="line">+1 | &lt;----- Python memory (under PyMem manager's control) ------&gt; |   |</div><div class="line">    __________________________________________________________________</div><div class="line">   [    Underlying general-purpose allocator (ex: C library malloc)   ]</div><div class="line"> 0 | &lt;------ Virtual memory allocated for the python process -------&gt; |</div><div class="line"></div><div class="line">   =========================================================================</div><div class="line">    _______________________________________________________________________</div><div class="line">   [                OS-specific Virtual Memory Manager (VMM)               ]</div><div class="line">-1 | &lt;--- Kernel dynamic storage allocation &amp; management (page-based) ---&gt; |</div><div class="line">    __________________________________   __________________________________</div><div class="line">   [                                  ] [                                  ]</div><div class="line">-2 | &lt;-- Physical memory: ROM/RAM --&gt; | | &lt;-- Secondary storage (swap) --&gt; |</div><div class="line"></div><div class="line">*/</div><div class="line">/*==========================================================================*/</div><div class="line"></div><div class="line">/* A fast, special-purpose memory allocator for small blocks, to be used</div><div class="line">   on top of a general-purpose malloc -- heavily based on previous art. */</div><div class="line"></div><div class="line">/* Vladimir Marangozov -- August 2000 */</div><div class="line"></div><div class="line">/*</div><div class="line"> * "Memory management is where the rubber meets the road -- if we do the wrong</div><div class="line"> * thing at any level, the results will not be good. And if we don't make the</div><div class="line"> * levels work well together, we are in serious trouble." (1)</div><div class="line"> *</div><div class="line"> * (1) Paul R. Wilson, Mark S. Johnstone, Michael Neely, and David Boles,</div><div class="line"> *    "Dynamic Storage Allocation: A Survey and Critical Review",</div><div class="line"> *    in Proc. 1995 Int'l. Workshop on Memory Management, September 1995.</div><div class="line"> */</div><div class="line"></div><div class="line">/* #undef WITH_MEMORY_LIMITS */         /* disable mem limit checks  */</div><div class="line"></div><div class="line">/*==========================================================================*/</div><div class="line"></div><div class="line">/*</div><div class="line"> * Allocation strategy abstract:</div><div class="line"> *</div><div class="line"> * For small requests, the allocator sub-allocates &lt;Big&gt; blocks of memory.</div><div class="line"> * Requests greater than SMALL_REQUEST_THRESHOLD bytes are routed to the</div><div class="line"> * system's allocator. </div><div class="line"> *</div><div class="line"> * Small requests are grouped in size classes spaced 8 bytes apart, due</div><div class="line"> * to the required valid alignment of the returned address. Requests of</div><div class="line"> * a particular size are serviced from memory pools of 4K (one VMM page).</div><div class="line"> * Pools are fragmented on demand and contain free lists of blocks of one</div><div class="line"> * particular size class. In other words, there is a fixed-size allocator</div><div class="line"> * for each size class. Free pools are shared by the different allocators</div><div class="line"> * thus minimizing the space reserved for a particular size class.</div><div class="line"> *</div><div class="line"> * This allocation strategy is a variant of what is known as "simple</div><div class="line"> * segregated storage based on array of free lists". The main drawback of</div><div class="line"> * simple segregated storage is that we might end up with lot of reserved</div><div class="line"> * memory for the different free lists, which degenerate in time. To avoid</div><div class="line"> * this, we partition each free list in pools and we share dynamically the</div><div class="line"> * reserved space between all free lists. This technique is quite efficient</div><div class="line"> * for memory intensive programs which allocate mainly small-sized blocks.</div><div class="line"> *</div><div class="line"> * 将内存按照大小分成(最多)64组，每8byte分为一组，每1个byte也叫1个block(uchar)。一个分配单元包含不等的block</div><div class="line"> *</div><div class="line"> * block: 1个block是一个字节(uchar)，内存分配的最小单位，只能分配整数个block的内存。实际上block只是一个抽象的概念或者说单位，没有实际的代码结构对应。</div><div class="line"> *</div><div class="line"> * 注意：这里面的size指请求的内存的大小nbytes；PyObject_Malloc代码中的size变量指请求的内存折算成的block个数(nblocks)。</div><div class="line"> *</div><div class="line"> * pool：1个pool包含一个pool_header和多个block。实际上就是pool的管理单元pool_header以及余下的可以分配出去的内存。同一个pool每次分配出去的内存都是固定数量的block，用szidx表示。szidx=1那么pool每次分配出16个block。1个pool实际上就是分配的一页4K内存，模型如下：</div><div class="line"> *</div><div class="line"> *  ---------------------------------------------------------</div><div class="line"> * | pool_header  |用于对齐的废弃内存 |     可以分配的blocks|</div><div class="line"> *  ---------------------------------------------------------</div><div class="line"> *</div><div class="line"> * For small requests we have the following table:</div><div class="line"> *</div><div class="line"> * Request in bytes     Size of allocated block      Size class idx</div><div class="line"> * ----------------------------------------------------------------</div><div class="line"> *        1-8                     8                       0</div><div class="line"> *        9-16                   16                       1</div><div class="line"> *       17-24                   24                       2</div><div class="line"> *       25-32                   32                       3</div><div class="line"> *       33-40                   40                       4</div><div class="line"> *       41-48                   48                       5</div><div class="line"> *       49-56                   56                       6</div><div class="line"> *       57-64                   64                       7</div><div class="line"> *       65-72                   72                       8</div><div class="line"> *        ...                   ...                     ...</div><div class="line"> *      497-504                 504                      62</div><div class="line"> *      505-512                 512                      63 </div><div class="line"> *</div><div class="line"> *      0, SMALL_REQUEST_THRESHOLD + 1 and up: routed to the underlying</div><div class="line"> *      allocator.</div><div class="line"> */</div><div class="line"></div><div class="line">/*==========================================================================*/</div><div class="line"></div><div class="line">/*</div><div class="line"> * -- Main tunable settings section --</div><div class="line"> */</div><div class="line"></div><div class="line">/*</div><div class="line"> * Alignment of addresses returned to the user. 8-bytes alignment works</div><div class="line"> * on most current architectures (with 32-bit or 64-bit address busses).</div><div class="line"> * The alignment value is also used for grouping small requests in size</div><div class="line"> * classes spaced ALIGNMENT bytes apart.</div><div class="line"> *</div><div class="line"> * You shouldn't change this unless you know what you are doing.</div><div class="line"> */</div><div class="line">#define ALIGNMENT               8               /* must be 2^N */</div><div class="line">#define ALIGNMENT_SHIFT         3</div><div class="line">#define ALIGNMENT_MASK          (ALIGNMENT - 1)</div><div class="line"></div><div class="line">/* Return the number of bytes in size class I, as a uint. */</div><div class="line">#define INDEX2SIZE(I) (((uint)(I) + 1) &lt;&lt; ALIGNMENT_SHIFT)</div><div class="line"></div><div class="line">/*</div><div class="line"> * Max size threshold below which malloc requests are considered to be</div><div class="line"> * small enough in order to use preallocated memory pools. You can tune</div><div class="line"> * this value according to your application behaviour and memory needs.</div><div class="line"> *</div><div class="line"> * The following invariants must hold:</div><div class="line"> *      1) ALIGNMENT &lt;= SMALL_REQUEST_THRESHOLD &lt;= 512</div><div class="line"> *      2) SMALL_REQUEST_THRESHOLD is evenly divisible by ALIGNMENT</div><div class="line"> *</div><div class="line"> * Note: a size threshold of 512 guarantees that newly created dictionaries</div><div class="line"> * will be allocated from preallocated memory pools on 64-bit.</div><div class="line"> *</div><div class="line"> * Although not required, for better performance and space efficiency,</div><div class="line"> * it is recommended that SMALL_REQUEST_THRESHOLD is set to a power of 2.</div><div class="line"> *</div><div class="line"> * SMALL_REQUEST_THRESHOLD必须大于等于ALIGNMENT，不然内存管理无意义；</div><div class="line"> * 必须小于等于512 是因为usedpools代码写死最多支持64个不同单位szidx的pools。</div><div class="line"> */</div><div class="line">#define SMALL_REQUEST_THRESHOLD 512 </div><div class="line">#define NB_SMALL_SIZE_CLASSES   (SMALL_REQUEST_THRESHOLD / ALIGNMENT)</div><div class="line"></div><div class="line">/*</div><div class="line"> * The system's VMM page size can be obtained on most unices with a</div><div class="line"> * getpagesize() call or deduced from various header files. To make</div><div class="line"> * things simpler, we assume that it is 4K, which is OK for most systems.</div><div class="line"> * It is probably better if this is the native page size, but it doesn't</div><div class="line"> * have to be.  In theory, if SYSTEM_PAGE_SIZE is larger than the native page</div><div class="line"> * size, then `POOL_ADDR(p)-&gt;arenaindex' could rarely cause a segmentation</div><div class="line"> * violation fault.  4K is apparently OK for all the platforms that python</div><div class="line"> * currently targets.</div><div class="line"> */</div><div class="line">#define SYSTEM_PAGE_SIZE        (4 * 1024)</div><div class="line">#define SYSTEM_PAGE_SIZE_MASK   (SYSTEM_PAGE_SIZE - 1)</div><div class="line"></div><div class="line">/*</div><div class="line"> * Maximum amount of memory managed by the allocator for small requests.</div><div class="line"> */</div><div class="line">#ifdef WITH_MEMORY_LIMITS</div><div class="line">#ifndef SMALL_MEMORY_LIMIT</div><div class="line">#define SMALL_MEMORY_LIMIT      (64 * 1024 * 1024)      /* 64 MB -- more? */</div><div class="line">#endif</div><div class="line">#endif</div><div class="line"></div><div class="line">/*</div><div class="line"> * The allocator sub-allocates &lt;Big&gt; blocks of memory (called arenas) aligned</div><div class="line"> * on a page boundary. This is a reserved virtual address space for the</div><div class="line"> * current process (obtained through a malloc()/mmap() call). In no way this</div><div class="line"> * means that the memory arenas will be used entirely. A malloc(&lt;Big&gt;) is</div><div class="line"> * usually an address range reservation for &lt;Big&gt; bytes, unless all pages within</div><div class="line"> * this space are referenced subsequently. So malloc'ing big blocks and not</div><div class="line"> * using them does not mean "wasting memory". It's an addressable range</div><div class="line"> * wastage... </div><div class="line"> *</div><div class="line"> * Arenas are allocated with mmap() on systems supporting anonymous memory</div><div class="line"> * mappings to reduce heap fragmentation.</div><div class="line"> *</div><div class="line"> * arena：1个arena为256KB，每个arena中包含多个pool。1个arena中的pool(1个页)的szidx可以不同。</div><div class="line"> * arena有3种组织结构：</div><div class="line"> * 1. arenas数组，arena_object数组，arena_object.address是从系统请求的ARENA_SIZE内存的地址</div><div class="line"> * 2. unused_arena_objects单向链表，链接所有空闲的arena</div><div class="line"> * 3. usable_arenas双向链表，链接所有部分内存被分配出去的arena</div><div class="line"> */</div><div class="line">#define ARENA_SIZE              (256 &lt;&lt; 10)     /* 256KB */</div><div class="line"></div><div class="line">#ifdef WITH_MEMORY_LIMITS</div><div class="line">#define MAX_ARENAS              (SMALL_MEMORY_LIMIT / ARENA_SIZE)</div><div class="line">#endif</div><div class="line"></div><div class="line">/*</div><div class="line"> * Size of the pools used for small blocks. Should be a power of 2,</div><div class="line"> * between 1K and SYSTEM_PAGE_SIZE, that is: 1k, 2k, 4k.</div><div class="line"> *</div><div class="line"> * POOL的大小，一般为4K</div><div class="line"> */</div><div class="line">#define POOL_SIZE               SYSTEM_PAGE_SIZE        /* must be 2^N */</div><div class="line">#define POOL_SIZE_MASK          SYSTEM_PAGE_SIZE_MASK</div><div class="line"></div><div class="line">/*</div><div class="line"> * -- End of tunable settings section --</div><div class="line"> */</div><div class="line"></div><div class="line">/*==========================================================================*/</div><div class="line"></div><div class="line">/*</div><div class="line"> * Locking</div><div class="line"> *</div><div class="line"> * To reduce lock contention, it would probably be better to refine the</div><div class="line"> * crude function locking with per size class locking. I'm not positive</div><div class="line"> * however, whether it's worth switching to such locking policy because</div><div class="line"> * of the performance penalty it might introduce.</div><div class="line"> *</div><div class="line"> * The following macros describe the simplest (should also be the fastest)</div><div class="line"> * lock object on a particular platform and the init/fini/lock/unlock</div><div class="line"> * operations on it. The locks defined here are not expected to be recursive</div><div class="line"> * because it is assumed that they will always be called in the order:</div><div class="line"> * INIT, [LOCK, UNLOCK]*, FINI.</div><div class="line"> */</div><div class="line"></div><div class="line">/*</div><div class="line"> * Python's threads are serialized, so object malloc locking is disabled.</div><div class="line"> */</div><div class="line">#define SIMPLELOCK_DECL(lock)   /* simple lock declaration              */</div><div class="line">#define SIMPLELOCK_INIT(lock)   /* allocate (if needed) and initialize  */</div><div class="line">#define SIMPLELOCK_FINI(lock)   /* free/destroy an existing lock        */</div><div class="line">#define SIMPLELOCK_LOCK(lock)   /* acquire released lock */</div><div class="line">#define SIMPLELOCK_UNLOCK(lock) /* release acquired lock */</div><div class="line"></div><div class="line">/*</div><div class="line"> * Basic types</div><div class="line"> * I don't care if these are defined in &lt;sys/types.h&gt; or elsewhere. Axiom.</div><div class="line"> */</div><div class="line">#undef  uchar</div><div class="line">#define uchar   unsigned char   /* assuming == 8 bits  */</div><div class="line"></div><div class="line">#undef  uint</div><div class="line">#define uint    unsigned int    /* assuming &gt;= 16 bits */</div><div class="line"></div><div class="line">#undef  ulong</div><div class="line">#define ulong   unsigned long   /* assuming &gt;= 32 bits */</div><div class="line"></div><div class="line">#undef uptr</div><div class="line">#define uptr    Py_uintptr_t</div><div class="line"></div><div class="line">/* When you say memory, my mind reasons in terms of (pointers to) blocks */</div><div class="line">typedef uchar block;</div><div class="line"></div><div class="line">/* Pool for small blocks. */</div><div class="line">struct pool_header &#123;</div><div class="line">    /* 用于对齐，使一个Pool的2个block处是nextpool。</div><div class="line">     * 当pool回收时可以加快再分配 */</div><div class="line">    union &#123; block *_padding;</div><div class="line">            uint count; &#125; ref;          /* number of allocated blocks    */</div><div class="line">    /* 1个Pool内未被分配出去的/回收的内存的链表 */</div><div class="line">    block *freeblock;                   /* pool's free list head         */</div><div class="line">    /* 链接相同szidx的pool，在不同的链表下作用不同 */</div><div class="line">    struct pool_header *nextpool;       /* next pool of this size class  */</div><div class="line">    struct pool_header *prevpool;       /* previous pool       ""        */</div><div class="line">    /* 所处的arena在arenas数组中的小标</div><div class="line">     * 当释放内存时用来判断给定的内存地址是否是由Pool分配出去的*/</div><div class="line">    uint arenaindex;                    /* index into arenas of base adr */</div><div class="line">    /* Pool每次只能分配指定szidx的blocks个内存 */</div><div class="line">    uint szidx;                         /* block size class index        */</div><div class="line">    /* 从来没有被分配出去的连续的剩余内存的偏移地址 */</div><div class="line">    uint nextoffset;                    /* bytes to virgin block         */</div><div class="line">    /* 可用内存的最大偏移量</div><div class="line">    uint maxnextoffset;                 /* largest valid nextoffset      */</div><div class="line">&#125;;</div><div class="line"></div><div class="line">typedef struct pool_header *poolp;</div><div class="line"></div><div class="line">/* Record keeping for arenas. */</div><div class="line">struct arena_object &#123;</div><div class="line">    /* The address of the arena, as returned by malloc.  Note that 0</div><div class="line">     * will never be returned by a successful malloc, and is used</div><div class="line">     * here to mark an arena_object that doesn't correspond to an</div><div class="line">     * allocated arena.</div><div class="line">     */</div><div class="line">    /*</div><div class="line">     * 一个arena的内存起始值256KB</div><div class="line">     */</div><div class="line">    uptr address;</div><div class="line"></div><div class="line">    /* Pool-aligned pointer to the next pool to be carved off. */</div><div class="line">    /* 剩余的连续地址的pool的地址 */</div><div class="line">    block* pool_address;</div><div class="line"></div><div class="line">    /* The number of available pools in the arena:  free pools + never-</div><div class="line">     * allocated pools.</div><div class="line">     */</div><div class="line">    /* 空闲的Pool数量, 被回收的pool的链表 */</div><div class="line">    uint nfreepools;</div><div class="line"></div><div class="line">    /* The total number of pools in the arena, whether or not available. */</div><div class="line">    uint ntotalpools;</div><div class="line"></div><div class="line">    /* Singly-linked list of available pools. */</div><div class="line">    /* 空闲Pool的链表 */</div><div class="line">    struct pool_header* freepools;</div><div class="line"></div><div class="line">    /* Whenever this arena_object is not associated with an allocated</div><div class="line">     * arena, the nextarena member is used to link all unassociated</div><div class="line">     * arena_objects in the singly-linked `unused_arena_objects` list.</div><div class="line">     * The prevarena member is unused in this case.</div><div class="line">     *</div><div class="line">     * When this arena_object is associated with an allocated arena</div><div class="line">     * with at least one available pool, both members are used in the</div><div class="line">     * doubly-linked `usable_arenas` list, which is maintained in</div><div class="line">     * increasing order of `nfreepools` values.</div><div class="line">     *</div><div class="line">     * Else this arena_object is associated with an allocated arena</div><div class="line">     * all of whose pools are in use.  `nextarena` and `prevarena`</div><div class="line">     * are both meaningless in this case.</div><div class="line">     */</div><div class="line">    /* arena还有两种组织结构：</div><div class="line">     * 第一种：unused_arena_objects</div><div class="line">     * 第二种：usable_arenas </div><div class="line">    struct arena_object* nextarena;</div><div class="line">    struct arena_object* prevarena;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">#undef  ROUNDUP</div><div class="line">#define ROUNDUP(x)              (((x) + ALIGNMENT_MASK) &amp; ~ALIGNMENT_MASK)</div><div class="line">#define POOL_OVERHEAD           ROUNDUP(sizeof(struct pool_header))</div><div class="line"></div><div class="line">#define DUMMY_SIZE_IDX          0xffff  /* size class of newly cached pools */</div><div class="line"></div><div class="line">/* Round pointer P down to the closest pool-aligned address &lt;= P, as a poolp */</div><div class="line">/* 给定free的内存地址，向上对齐找到所属的POOL */</div><div class="line">#define POOL_ADDR(P) ((poolp)((uptr)(P) &amp; ~(uptr)POOL_SIZE_MASK))</div><div class="line"></div><div class="line">/* Return total number of blocks in pool of size index I, as a uint. */</div><div class="line">/* POOL中有多少个block，(POOL_SIZE - pool_object的大小) / 分配单位的大小)</div><div class="line">#define NUMBLOCKS(I) ((uint)(POOL_SIZE - POOL_OVERHEAD) / INDEX2SIZE(I))</div><div class="line"></div><div class="line">/*==========================================================================*/</div><div class="line"></div><div class="line">/*</div><div class="line"> * This malloc lock</div><div class="line"> */</div><div class="line">SIMPLELOCK_DECL(_malloc_lock)</div><div class="line">#define LOCK()          SIMPLELOCK_LOCK(_malloc_lock)</div><div class="line">#define UNLOCK()        SIMPLELOCK_UNLOCK(_malloc_lock)</div><div class="line">#define LOCK_INIT()     SIMPLELOCK_INIT(_malloc_lock)</div><div class="line">#define LOCK_FINI()     SIMPLELOCK_FINI(_malloc_lock)</div><div class="line"></div><div class="line">/*</div><div class="line"> * Pool table -- headed, circular, doubly-linked lists of partially used pools.</div><div class="line"></div><div class="line">This is involved.  For an index i, usedpools[i+i] is the header for a list of</div><div class="line">all partially used pools holding small blocks with "size class idx" i. So</div><div class="line">usedpools[0] corresponds to blocks of size 8, usedpools[2] to blocks of size</div><div class="line">16, and so on:  index 2*i &lt;-&gt; blocks of size (i+1)&lt;&lt;ALIGNMENT_SHIFT.</div><div class="line"></div><div class="line">Pools are carved off an arena's highwater mark (an arena_object's pool_address</div><div class="line">member) as needed.  Once carved off, a pool is in one of three states forever</div><div class="line">after:</div><div class="line"></div><div class="line">used == partially used, neither empty nor full</div><div class="line">    At least one block in the pool is currently allocated, and at least one</div><div class="line">    block in the pool is not currently allocated (note this implies a pool</div><div class="line">    has room for at least two blocks).</div><div class="line">    This is a pool's initial state, as a pool is created only when malloc</div><div class="line">    needs space.</div><div class="line">    The pool holds blocks of a fixed size, and is in the circular list headed</div><div class="line">    at usedpools[i] (see above).  It's linked to the other used pools of the</div><div class="line">    same size class via the pool_header's nextpool and prevpool members.</div><div class="line">    If all but one block is currently allocated, a malloc can cause a</div><div class="line">    transition to the full state.  If all but one block is not currently</div><div class="line">    allocated, a free can cause a transition to the empty state.</div><div class="line"></div><div class="line">full == all the pool's blocks are currently allocated</div><div class="line">    On transition to full, a pool is unlinked from its usedpools[] list.</div><div class="line">    It's not linked to from anything then anymore, and its nextpool and</div><div class="line">    prevpool members are meaningless until it transitions back to used.</div><div class="line">    A free of a block in a full pool puts the pool back in the used state.</div><div class="line">    Then it's linked in at the front of the appropriate usedpools[] list, so</div><div class="line">    that the next allocation for its size class will reuse the freed block.</div><div class="line"></div><div class="line">empty == all the pool's blocks are currently available for allocation</div><div class="line">    On transition to empty, a pool is unlinked from its usedpools[] list,</div><div class="line">    and linked to the front of its arena_object's singly-linked freepools list,</div><div class="line">    via its nextpool member.  The prevpool member has no meaning in this case.</div><div class="line">    Empty pools have no inherent size class:  the next time a malloc finds</div><div class="line">    an empty list in usedpools[], it takes the first pool off of freepools.</div><div class="line">    If the size class needed happens to be the same as the size class the pool</div><div class="line">    last had, some pool initialization can be skipped.</div><div class="line"></div><div class="line"></div><div class="line">Block Management</div><div class="line"></div><div class="line">Blocks within pools are again carved out as needed.  pool-&gt;freeblock points to</div><div class="line">the start of a singly-linked list of free blocks within the pool.  When a</div><div class="line">block is freed, it's inserted at the front of its pool's freeblock list.  Note</div><div class="line">that the available blocks in a pool are *not* linked all together when a pool</div><div class="line">is initialized.  Instead only "the first two" (lowest addresses) blocks are</div><div class="line">set up, returning the first such block, and setting pool-&gt;freeblock to a</div><div class="line">one-block list holding the second such block.  This is consistent with that</div><div class="line">pymalloc strives at all levels (arena, pool, and block) never to touch a piece</div><div class="line">of memory until it's actually needed.</div><div class="line"></div><div class="line">So long as a pool is in the used state, we're certain there *is* a block</div><div class="line">available for allocating, and pool-&gt;freeblock is not NULL.  If pool-&gt;freeblock</div><div class="line">points to the end of the free list before we've carved the entire pool into</div><div class="line">blocks, that means we simply haven't yet gotten to one of the higher-address</div><div class="line">blocks.  The offset from the pool_header to the start of "the next" virgin</div><div class="line">block is stored in the pool_header nextoffset member, and the largest value</div><div class="line">of nextoffset that makes sense is stored in the maxnextoffset member when a</div><div class="line">pool is initialized.  All the blocks in a pool have been passed out at least</div><div class="line">once when and only when nextoffset &gt; maxnextoffset.</div><div class="line"></div><div class="line"></div><div class="line">Major obscurity:  While the usedpools vector is declared to have poolp</div><div class="line">entries, it doesn't really.  It really contains two pointers per (conceptual)</div><div class="line">poolp entry, the nextpool and prevpool members of a pool_header.  The</div><div class="line">excruciating initialization code below fools C so that</div><div class="line"></div><div class="line">    usedpool[i+i]</div><div class="line"></div><div class="line">"acts like" a genuine poolp, but only so long as you only reference its</div><div class="line">nextpool and prevpool members.  The "- 2*sizeof(block *)" gibberish is</div><div class="line">compensating for that a pool_header's nextpool and prevpool members</div><div class="line">immediately follow a pool_header's first two members:</div><div class="line"></div><div class="line">    union &#123; block *_padding;</div><div class="line">            uint count; &#125; ref;</div><div class="line">    block *freeblock;</div><div class="line"></div><div class="line">each of which consume sizeof(block *) bytes.  So what usedpools[i+i] really</div><div class="line">contains is a fudged-up pointer p such that *if* C believes it's a poolp</div><div class="line">pointer, then p-&gt;nextpool and p-&gt;prevpool are both p (meaning that the headed</div><div class="line">circular list is empty).</div><div class="line"></div><div class="line">It's unclear why the usedpools setup is so convoluted.  It could be to</div><div class="line">minimize the amount of cache required to hold this heavily-referenced table</div><div class="line">(which only *needs* the two interpool pointer members of a pool_header). OTOH,</div><div class="line">referencing code has to remember to "double the index" and doing so isn't</div><div class="line">free, usedpools[0] isn't a strictly legal pointer, and we're crucially relying</div><div class="line">on that C doesn't insert any padding anywhere in a pool_header at or before</div><div class="line">the prevpool member.</div><div class="line"></div><div class="line">**************************************************************************** */</div><div class="line"></div><div class="line">#define PTA(x)  ((poolp )((uchar *)&amp;(usedpools[2*(x)]) - 2*sizeof(block *)))</div><div class="line">#define PT(x)   PTA(x), PTA(x)</div><div class="line"></div><div class="line">static poolp usedpools[2 * ((NB_SMALL_SIZE_CLASSES + 7) / 8) * 8] = &#123;</div><div class="line">    PT(0), PT(1), PT(2), PT(3), PT(4), PT(5), PT(6), PT(7)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 8</div><div class="line">    , PT(8), PT(9), PT(10), PT(11), PT(12), PT(13), PT(14), PT(15)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 16</div><div class="line">    , PT(16), PT(17), PT(18), PT(19), PT(20), PT(21), PT(22), PT(23)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 24</div><div class="line">    , PT(24), PT(25), PT(26), PT(27), PT(28), PT(29), PT(30), PT(31)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 32</div><div class="line">    , PT(32), PT(33), PT(34), PT(35), PT(36), PT(37), PT(38), PT(39)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 40</div><div class="line">    , PT(40), PT(41), PT(42), PT(43), PT(44), PT(45), PT(46), PT(47)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 48</div><div class="line">    , PT(48), PT(49), PT(50), PT(51), PT(52), PT(53), PT(54), PT(55)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 56</div><div class="line">    , PT(56), PT(57), PT(58), PT(59), PT(60), PT(61), PT(62), PT(63)</div><div class="line">#if NB_SMALL_SIZE_CLASSES &gt; 64</div><div class="line">#error "NB_SMALL_SIZE_CLASSES should be less than 64"</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 64 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 56 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 48 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 40 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 32 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 24 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt; 16 */</div><div class="line">#endif /* NB_SMALL_SIZE_CLASSES &gt;  8 */</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/*==========================================================================</div><div class="line">Arena management.</div><div class="line"></div><div class="line">`arenas` is a vector of arena_objects.  It contains maxarenas entries, some of</div><div class="line">which may not be currently used (== they're arena_objects that aren't</div><div class="line">currently associated with an allocated arena).  Note that arenas proper are</div><div class="line">separately malloc'ed.</div><div class="line"></div><div class="line">Prior to Python 2.5, arenas were never free()'ed.  Starting with Python 2.5,</div><div class="line">we do try to free() arenas, and use some mild heuristic strategies to increase</div><div class="line">the likelihood that arenas eventually can be freed.</div><div class="line"></div><div class="line">unused_arena_objects</div><div class="line"></div><div class="line">    This is a singly-linked list of the arena_objects that are currently not</div><div class="line">    being used (no arena is associated with them).  Objects are taken off the</div><div class="line">    head of the list in new_arena(), and are pushed on the head of the list in</div><div class="line">    PyObject_Free() when the arena is empty.  Key invariant:  an arena_object</div><div class="line">    is on this list if and only if its .address member is 0.</div><div class="line"></div><div class="line">    arena_object的单向链表，用.nextarena链接，.address为0</div><div class="line">    刚从new_arena分配或者空闲的时候会加入该链表</div><div class="line"></div><div class="line">usable_arenas</div><div class="line"></div><div class="line">    This is a doubly-linked list of the arena_objects associated with arenas</div><div class="line">    that have pools available.  These pools are either waiting to be reused,</div><div class="line">    or have not been used before.  The list is sorted to have the most-</div><div class="line">    allocated arenas first (ascending order based on the nfreepools member).</div><div class="line">    This means that the next allocation will come from a heavily used arena,</div><div class="line">    which gives the nearly empty arenas a chance to be returned to the system.</div><div class="line">    In my unscientific tests this dramatically improved the number of arenas</div><div class="line">    that could be freed.</div><div class="line"></div><div class="line">    arena_object的双向链表，并且arena_object中有可用的pools。</div><div class="line">    已分配出内存最多的arena排在前面，以便最空闲的arena有机会因为内存都被回收而被回收。</div><div class="line"></div><div class="line">Note that an arena_object associated with an arena all of whose pools are</div><div class="line">currently in use isn't on either list.</div><div class="line">注意所有pools都被使用了的arena不会在这两个链表中。</div><div class="line">*/</div><div class="line"></div><div class="line">/* Array of objects used to track chunks of memory (arenas). */</div><div class="line">static struct arena_object* arenas = NULL;</div><div class="line">/* Number of slots currently allocated in the `arenas` vector. */</div><div class="line">static uint maxarenas = 0;</div><div class="line"></div><div class="line">/* The head of the singly-linked, NULL-terminated list of available</div><div class="line"> * arena_objects.</div><div class="line"> */</div><div class="line">static struct arena_object* unused_arena_objects = NULL;</div><div class="line"></div><div class="line">/* The head of the doubly-linked, NULL-terminated at each end, list of</div><div class="line"> * arena_objects associated with arenas that have pools available.</div><div class="line"> */</div><div class="line">static struct arena_object* usable_arenas = NULL;</div><div class="line"></div><div class="line">/* How many arena_objects do we initially allocate?</div><div class="line"> * 16 = can allocate 16 arenas = 16 * ARENA_SIZE = 4MB before growing the</div><div class="line"> * `arenas` vector.</div><div class="line"> */</div><div class="line">#define INITIAL_ARENA_OBJECTS 16</div><div class="line"></div><div class="line">/* Number of arenas allocated that haven't been free()'d. */</div><div class="line">static size_t narenas_currently_allocated = 0;</div><div class="line"></div><div class="line">#ifdef PYMALLOC_DEBUG</div><div class="line">/* Total number of times malloc() called to allocate an arena. */</div><div class="line">static size_t ntimes_arena_allocated = 0;</div><div class="line">/* High water mark (max value ever seen) for narenas_currently_allocated. */</div><div class="line">static size_t narenas_highwater = 0;</div><div class="line">#endif</div><div class="line"></div><div class="line">/* Allocate a new arena.  If we run out of memory, return NULL.  Else</div><div class="line"> * allocate a new arena, and return the address of an arena_object</div><div class="line"> * describing the new arena.  It's expected that the caller will set</div><div class="line"> * `usable_arenas` to the return value.</div><div class="line"> */</div><div class="line">static struct arena_object*</div><div class="line">new_arena(void)</div><div class="line">&#123;</div><div class="line">    struct arena_object* arenaobj;</div><div class="line">    uint excess;        /* number of bytes above pool alignment */</div><div class="line">    void *address;</div><div class="line">    int err;</div><div class="line"></div><div class="line">#ifdef PYMALLOC_DEBUG</div><div class="line">    if (Py_GETENV("PYTHONMALLOCSTATS"))</div><div class="line">        _PyObject_DebugMallocStats();</div><div class="line">#endif</div><div class="line">    /* Python初始化，或者所有的arenas都耗尽了 */</div><div class="line">    if (unused_arena_objects == NULL) &#123;</div><div class="line">        uint i;</div><div class="line">        uint numarenas;</div><div class="line">        size_t nbytes;</div><div class="line"></div><div class="line">        /* Double the number of arena objects on each allocation.</div><div class="line">         * Note that it's possible for `numarenas` to overflow.</div><div class="line">         */</div><div class="line">        /* 每次分配arena的数量倍增 16 -&gt; 32 */</div><div class="line">        numarenas = maxarenas ? maxarenas &lt;&lt; 1 : INITIAL_ARENA_OBJECTS;</div><div class="line">        /* 溢出导致不能再分配arena了 */</div><div class="line">        if (numarenas &lt;= maxarenas)</div><div class="line">            return NULL;                /* overflow */</div><div class="line">#if SIZEOF_SIZE_T &lt;= SIZEOF_INT</div><div class="line">        if (numarenas &gt; PY_SIZE_MAX / sizeof(*arenas))</div><div class="line">            return NULL;                /* overflow */</div><div class="line">#endif</div><div class="line">        nbytes = numarenas * sizeof(*arenas);</div><div class="line">        arenaobj = (struct arena_object *)realloc(arenas, nbytes);</div><div class="line">        if (arenaobj == NULL)</div><div class="line">            return NULL;</div><div class="line">        arenas = arenaobj;</div><div class="line"></div><div class="line">        /* We might need to fix pointers that were copied.  However,</div><div class="line">         * new_arena only gets called when all the pages in the</div><div class="line">         * previous arenas are full.  Thus, there are *no* pointers</div><div class="line">         * into the old array. Thus, we don't have to worry about</div><div class="line">         * invalid pointers.  Just to be sure, some asserts:</div><div class="line">         */</div><div class="line">        /* usable_arenas 和 unused_arena_objects 都为空。</div><div class="line">         * 所有的pools都分配出去了，才会导致申请新的arena</div><div class="line">         */ </div><div class="line">        assert(usable_arenas == NULL);</div><div class="line">        assert(unused_arena_objects == NULL);</div><div class="line"></div><div class="line">        /* Put the new arenas on the unused_arena_objects list. */</div><div class="line">        for (i = maxarenas; i &lt; numarenas; ++i) &#123;</div><div class="line">            arenas[i].address = 0;              /* mark as unassociated */</div><div class="line">            arenas[i].nextarena = i &lt; numarenas - 1 ?</div><div class="line">                                   &amp;arenas[i+1] : NULL;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* Update globals. */</div><div class="line">        unused_arena_objects = &amp;arenas[maxarenas];</div><div class="line">        maxarenas = numarenas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Take the next available arena object off the head of the list. */</div><div class="line">    assert(unused_arena_objects != NULL);</div><div class="line">    arenaobj = unused_arena_objects;</div><div class="line">    unused_arena_objects = arenaobj-&gt;nextarena;</div><div class="line">    assert(arenaobj-&gt;address == 0);</div><div class="line">    /* 分配1个arena的内存 64个POOL */</div><div class="line">#ifdef ARENAS_USE_MMAP</div><div class="line">    address = mmap(NULL, ARENA_SIZE, PROT_READ|PROT_WRITE,</div><div class="line">                   MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</div><div class="line">    err = (address == MAP_FAILED);</div><div class="line">#else</div><div class="line">    address = malloc(ARENA_SIZE);</div><div class="line">    err = (address == 0);</div><div class="line">#endif    </div><div class="line">    if (err) &#123;</div><div class="line">        /* The allocation failed: return NULL after putting the</div><div class="line">         * arenaobj back.</div><div class="line">         */</div><div class="line">        arenaobj-&gt;nextarena = unused_arena_objects;</div><div class="line">        unused_arena_objects = arenaobj;</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    /* arena中的address就是分配的256KB内存的地址 */</div><div class="line">    arenaobj-&gt;address = (uptr)address;</div><div class="line"></div><div class="line">    ++narenas_currently_allocated;</div><div class="line">#ifdef PYMALLOC_DEBUG</div><div class="line">    ++ntimes_arena_allocated;</div><div class="line">    if (narenas_currently_allocated &gt; narenas_highwater)</div><div class="line">        narenas_highwater = narenas_currently_allocated;</div><div class="line">#endif</div><div class="line">    /* 注意这里的freepools =  NULL */</div><div class="line">    arenaobj-&gt;freepools = NULL;</div><div class="line">    /* pool_address &lt;- first pool-aligned address in the arena</div><div class="line">       nfreepools &lt;- number of whole pools that fit after alignment */</div><div class="line">    arenaobj-&gt;pool_address = (block*)arenaobj-&gt;address;</div><div class="line">    arenaobj-&gt;nfreepools = ARENA_SIZE / POOL_SIZE;</div><div class="line">    assert(POOL_SIZE * arenaobj-&gt;nfreepools == ARENA_SIZE);</div><div class="line">    /* 将arena的内存按照Pool对齐 */</div><div class="line">    excess = (uint)(arenaobj-&gt;address &amp; POOL_SIZE_MASK);</div><div class="line">    if (excess != 0) &#123;</div><div class="line">        --arenaobj-&gt;nfreepools;</div><div class="line">        arenaobj-&gt;pool_address += POOL_SIZE - excess;</div><div class="line">    &#125;</div><div class="line">    arenaobj-&gt;ntotalpools = arenaobj-&gt;nfreepools;</div><div class="line"></div><div class="line">    return arenaobj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">Py_ADDRESS_IN_RANGE(P, POOL)</div><div class="line"></div><div class="line">Return true if and only if P is an address that was allocated by pymalloc.</div><div class="line">POOL must be the pool address associated with P, i.e., POOL = POOL_ADDR(P)</div><div class="line">(the caller is asked to compute this because the macro expands POOL more than</div><div class="line">once, and for efficiency it's best for the caller to assign POOL_ADDR(P) to a</div><div class="line">variable and pass the latter to the macro; because Py_ADDRESS_IN_RANGE is</div><div class="line">called on every alloc/realloc/free, micro-efficiency is important here).</div><div class="line"></div><div class="line">Tricky:  Let B be the arena base address associated with the pool, B =</div><div class="line">arenas[(POOL)-&gt;arenaindex].address.  Then P belongs to the arena if and only if</div><div class="line"></div><div class="line">    B &lt;= P &lt; B + ARENA_SIZE</div><div class="line"></div><div class="line">Subtracting B throughout, this is true iff</div><div class="line"></div><div class="line">    0 &lt;= P-B &lt; ARENA_SIZE</div><div class="line"></div><div class="line">By using unsigned arithmetic, the "0 &lt;=" half of the test can be skipped.</div><div class="line"></div><div class="line">Obscure:  A PyMem "free memory" function can call the pymalloc free or realloc</div><div class="line">before the first arena has been allocated.  `arenas` is still NULL in that</div><div class="line">case.  We're relying on that maxarenas is also 0 in that case, so that</div><div class="line">(POOL)-&gt;arenaindex &lt; maxarenas  must be false, saving us from trying to index</div><div class="line">into a NULL arenas.</div><div class="line"></div><div class="line">Details:  given P and POOL, the arena_object corresponding to P is AO =</div><div class="line">arenas[(POOL)-&gt;arenaindex].  Suppose obmalloc controls P.  Then (barring wild</div><div class="line">stores, etc), POOL is the correct address of P's pool, AO.address is the</div><div class="line">correct base address of the pool's arena, and P must be within ARENA_SIZE of</div><div class="line">AO.address.  In addition, AO.address is not 0 (no arena can start at address 0</div><div class="line">(NULL)).  Therefore Py_ADDRESS_IN_RANGE correctly reports that obmalloc</div><div class="line">controls P.</div><div class="line"></div><div class="line">Now suppose obmalloc does not control P (e.g., P was obtained via a direct</div><div class="line">call to the system malloc() or realloc()).  (POOL)-&gt;arenaindex may be anything</div><div class="line">in this case -- it may even be uninitialized trash.  If the trash arenaindex</div><div class="line">is &gt;= maxarenas, the macro correctly concludes at once that obmalloc doesn't</div><div class="line">control P.</div><div class="line"></div><div class="line">Else arenaindex is &lt; maxarena, and AO is read up.  If AO corresponds to an</div><div class="line">allocated arena, obmalloc controls all the memory in slice AO.address :</div><div class="line">AO.address+ARENA_SIZE.  By case assumption, P is not controlled by obmalloc,</div><div class="line">so P doesn't lie in that slice, so the macro correctly reports that P is not</div><div class="line">controlled by obmalloc.</div><div class="line"></div><div class="line">Finally, if P is not controlled by obmalloc and AO corresponds to an unused</div><div class="line">arena_object (one not currently associated with an allocated arena),</div><div class="line">AO.address is 0, and the second test in the macro reduces to:</div><div class="line"></div><div class="line">    P &lt; ARENA_SIZE</div><div class="line"></div><div class="line">If P &gt;= ARENA_SIZE (extremely likely), the macro again correctly concludes</div><div class="line">that P is not controlled by obmalloc.  However, if P &lt; ARENA_SIZE, this part</div><div class="line">of the test still passes, and the third clause (AO.address != 0) is necessary</div><div class="line">to get the correct result:  AO.address is 0 in this case, so the macro</div><div class="line">correctly reports that P is not controlled by obmalloc (despite that P lies in</div><div class="line">slice AO.address : AO.address + ARENA_SIZE).</div><div class="line"></div><div class="line">Note:  The third (AO.address != 0) clause was added in Python 2.5.  Before</div><div class="line">2.5, arenas were never free()'ed, and an arenaindex &lt; maxarena always</div><div class="line">corresponded to a currently-allocated arena, so the "P is not controlled by</div><div class="line">obmalloc, AO corresponds to an unused arena_object, and P &lt; ARENA_SIZE" case</div><div class="line">was impossible.</div><div class="line"></div><div class="line">Note that the logic is excruciating, and reading up possibly uninitialized</div><div class="line">memory when P is not controlled by obmalloc (to get at (POOL)-&gt;arenaindex)</div><div class="line">creates problems for some memory debuggers.  The overwhelming advantage is</div><div class="line">that this test determines whether an arbitrary address is controlled by</div><div class="line">obmalloc in a small constant time, independent of the number of arenas</div><div class="line">obmalloc controls.  Since this test is needed at every entry point, it's</div><div class="line">extremely desirable that it be this fast.</div><div class="line"></div><div class="line">Since Py_ADDRESS_IN_RANGE may be reading from memory which was not allocated</div><div class="line">by Python, it is important that (POOL)-&gt;arenaindex is read only once, as</div><div class="line">another thread may be concurrently modifying the value without holding the</div><div class="line">GIL.  To accomplish this, the arenaindex_temp variable is used to store</div><div class="line">(POOL)-&gt;arenaindex for the duration of the Py_ADDRESS_IN_RANGE macro's</div><div class="line">execution.  The caller of the macro is responsible for declaring this</div><div class="line">variable.</div><div class="line">*/</div><div class="line">#define Py_ADDRESS_IN_RANGE(P, POOL)                    \</div><div class="line">    ((arenaindex_temp = (POOL)-&gt;arenaindex) &lt; maxarenas &amp;&amp;              \</div><div class="line">     (uptr)(P) - arenas[arenaindex_temp].address &lt; (uptr)ARENA_SIZE &amp;&amp; \</div><div class="line">     arenas[arenaindex_temp].address != 0)</div><div class="line"></div><div class="line"></div><div class="line">/* This is only useful when running memory debuggers such as</div><div class="line"> * Purify or Valgrind.  Uncomment to use.</div><div class="line"> *</div><div class="line">#define Py_USING_MEMORY_DEBUGGER</div><div class="line"> */</div><div class="line"></div><div class="line">#ifdef Py_USING_MEMORY_DEBUGGER</div><div class="line"></div><div class="line">/* Py_ADDRESS_IN_RANGE may access uninitialized memory by design</div><div class="line"> * This leads to thousands of spurious warnings when using</div><div class="line"> * Purify or Valgrind.  By making a function, we can easily</div><div class="line"> * suppress the uninitialized memory reads in this one function.</div><div class="line"> * So we won't ignore real errors elsewhere.</div><div class="line"> *</div><div class="line"> * Disable the macro and use a function.</div><div class="line"> */</div><div class="line"></div><div class="line">#undef Py_ADDRESS_IN_RANGE</div><div class="line"></div><div class="line">#if defined(__GNUC__) &amp;&amp; ((__GNUC__ == 3) &amp;&amp; (__GNUC_MINOR__ &gt;= 1) || \</div><div class="line">                          (__GNUC__ &gt;= 4))</div><div class="line">#define Py_NO_INLINE __attribute__((__noinline__))</div><div class="line">#else</div><div class="line">#define Py_NO_INLINE</div><div class="line">#endif</div><div class="line"></div><div class="line">/* Don't make static, to try to ensure this isn't inlined. */</div><div class="line">int Py_ADDRESS_IN_RANGE(void *P, poolp pool) Py_NO_INLINE;</div><div class="line">#undef Py_NO_INLINE</div><div class="line">#endif</div><div class="line"></div><div class="line">/*==========================================================================*/</div><div class="line"></div><div class="line">/* malloc.  Note that nbytes==0 tries to return a non-NULL pointer, distinct</div><div class="line"> * from all other currently live pointers.  This may not be possible.</div><div class="line"> */</div><div class="line"></div><div class="line">/*</div><div class="line"> * The basic blocks are ordered by decreasing execution frequency,</div><div class="line"> * which minimizes the number of jumps in the most common cases,</div><div class="line"> * improves branching prediction and instruction scheduling (small</div><div class="line"> * block allocations typically result in a couple of instructions).</div><div class="line"> * Unless the optimizer reorders everything, being too smart...</div><div class="line"> */</div><div class="line"></div><div class="line">#undef PyObject_Malloc</div><div class="line">void *</div><div class="line">PyObject_Malloc(size_t nbytes)</div><div class="line">&#123;</div><div class="line">    block *bp;</div><div class="line">    poolp pool;</div><div class="line">    poolp next;</div><div class="line">    uint size;</div><div class="line"></div><div class="line">#ifdef WITH_VALGRIND</div><div class="line">    if (UNLIKELY(running_on_valgrind == -1))</div><div class="line">        running_on_valgrind = RUNNING_ON_VALGRIND;</div><div class="line">    if (UNLIKELY(running_on_valgrind))</div><div class="line">        goto redirect;</div><div class="line">#endif</div><div class="line"></div><div class="line">    /*</div><div class="line">     * Limit ourselves to PY_SSIZE_T_MAX bytes to prevent security holes.</div><div class="line">     * Most python internals blindly use a signed Py_ssize_t to track</div><div class="line">     * things without checking for overflows or negatives.</div><div class="line">     * As size_t is unsigned, checking for nbytes &lt; 0 is not required.</div><div class="line">     */</div><div class="line">    if (nbytes &gt; PY_SSIZE_T_MAX)</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * This implicitly redirects malloc(0).</div><div class="line">     */</div><div class="line">    /* 等同于 0 &lt; nbytes &lt;= SMALL_REQUEST_THRESHOLD */</div><div class="line">    if ((nbytes - 1) &lt; SMALL_REQUEST_THRESHOLD) &#123;</div><div class="line">        LOCK();</div><div class="line">        /*</div><div class="line">         * Most frequent paths first</div><div class="line">         */</div><div class="line">        size = (uint)(nbytes - 1) &gt;&gt; ALIGNMENT_SHIFT;</div><div class="line">        pool = usedpools[size + size];</div><div class="line">        /* usedpools是一个环状链表 */</div><div class="line">        if (pool != pool-&gt;nextpool) &#123;</div><div class="line">            /*</div><div class="line">             * There is a used pool for this size class.</div><div class="line">             * Pick up the head block of its free list.</div><div class="line">             */</div><div class="line">            ++pool-&gt;ref.count;</div><div class="line">            /* freeblock 是一个链表。freeblock是头，</div><div class="line">             * 每个指针存储在可分配单元的第一个block中 </div><div class="line">             */</div><div class="line">            bp = pool-&gt;freeblock;</div><div class="line">            assert(bp != NULL);</div><div class="line">            /* freeblock不为空 */</div><div class="line">            if ((pool-&gt;freeblock = *(block **)bp) != NULL) &#123;</div><div class="line">                UNLOCK();</div><div class="line">                return (void *)bp;</div><div class="line">            &#125;</div><div class="line">            /*</div><div class="line">             * Reached the end of the free list, try to extend it.</div><div class="line">             */</div><div class="line">            /* 至少还有1个size的block可供分配 */</div><div class="line">            if (pool-&gt;nextoffset &lt;= pool-&gt;maxnextoffset) &#123;</div><div class="line">                /* There is room for another block. */</div><div class="line">                pool-&gt;freeblock = (block*)pool +</div><div class="line">                                  pool-&gt;nextoffset;</div><div class="line">                pool-&gt;nextoffset += INDEX2SIZE(size);</div><div class="line">                *(block **)(pool-&gt;freeblock) = NULL;</div><div class="line">                UNLOCK();</div><div class="line">                return (void *)bp;</div><div class="line">            &#125;</div><div class="line">            /* Pool is full, unlink from used pools. */</div><div class="line">            /* Pool都分配出去了，从used pools中拆除去 */</div><div class="line">            next = pool-&gt;nextpool;</div><div class="line">            pool = pool-&gt;prevpool;</div><div class="line">            next-&gt;prevpool = pool;</div><div class="line">            pool-&gt;nextpool = next;</div><div class="line">            UNLOCK();</div><div class="line">            return (void *)bp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* There isn't a pool of the right size class immediately</div><div class="line">         * available:  use a free pool.</div><div class="line">         */</div><div class="line">        /* 没有空闲的pool，也没有空闲的arena */</div><div class="line">        if (usable_arenas == NULL) &#123;</div><div class="line">            /* No arena has a free pool:  allocate a new arena. */</div><div class="line">#ifdef WITH_MEMORY_LIMITS</div><div class="line">            if (narenas_currently_allocated &gt;= MAX_ARENAS) &#123;</div><div class="line">                UNLOCK();</div><div class="line">                goto redirect;</div><div class="line">            &#125;</div><div class="line">#endif</div><div class="line">            usable_arenas = new_arena();</div><div class="line">            if (usable_arenas == NULL) &#123;</div><div class="line">                UNLOCK();</div><div class="line">                goto redirect;</div><div class="line">            &#125;</div><div class="line">            usable_arenas-&gt;nextarena =</div><div class="line">                usable_arenas-&gt;prevarena = NULL;</div><div class="line">        &#125;</div><div class="line">        assert(usable_arenas-&gt;address != 0);</div><div class="line"></div><div class="line">        /* Try to get a cached free pool. */</div><div class="line">        pool = usable_arenas-&gt;freepools;</div><div class="line">        /* arena不是新分配的，新分配的arena.freepools == NULL */</div><div class="line">        if (pool != NULL) &#123;</div><div class="line">            /* Unlink from cached pools. */</div><div class="line">            usable_arenas-&gt;freepools = pool-&gt;nextpool;</div><div class="line"></div><div class="line">            /* This arena already had the smallest nfreepools</div><div class="line">             * value, so decreasing nfreepools doesn't change</div><div class="line">             * that, and we don't need to rearrange the</div><div class="line">             * usable_arenas list.  However, if the arena has</div><div class="line">             * become wholly allocated, we need to remove its</div><div class="line">             * arena_object from usable_arenas.</div><div class="line">             */</div><div class="line">            /* arena都分配出去了，从usable_arenas中拆除 */</div><div class="line">            --usable_arenas-&gt;nfreepools;</div><div class="line">            if (usable_arenas-&gt;nfreepools == 0) &#123;</div><div class="line">                /* Wholly allocated:  remove. */</div><div class="line">                assert(usable_arenas-&gt;freepools == NULL);</div><div class="line">                assert(usable_arenas-&gt;nextarena == NULL ||</div><div class="line">                       usable_arenas-&gt;nextarena-&gt;prevarena ==</div><div class="line">                       usable_arenas);</div><div class="line"></div><div class="line">                usable_arenas = usable_arenas-&gt;nextarena;</div><div class="line">                if (usable_arenas != NULL) &#123;</div><div class="line">                    usable_arenas-&gt;prevarena = NULL;</div><div class="line">                    assert(usable_arenas-&gt;address != 0);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                /* nfreepools &gt; 0:  it must be that freepools</div><div class="line">                 * isn't NULL, or that we haven't yet carved</div><div class="line">                 * off all the arena's pools for the first</div><div class="line">                 * time.</div><div class="line">                 */</div><div class="line">                assert(usable_arenas-&gt;freepools != NULL ||</div><div class="line">                       usable_arenas-&gt;pool_address &lt;=</div><div class="line">                       (block*)usable_arenas-&gt;address +</div><div class="line">                           ARENA_SIZE - POOL_SIZE);</div><div class="line">            &#125;</div><div class="line">        init_pool:</div><div class="line">            /* Frontlink to used pools. */</div><div class="line">            next = usedpools[size + size]; /* == prev */</div><div class="line">            pool-&gt;nextpool = next;</div><div class="line">            pool-&gt;prevpool = next;</div><div class="line">            next-&gt;nextpool = pool;</div><div class="line">            next-&gt;prevpool = pool;</div><div class="line">            pool-&gt;ref.count = 1;</div><div class="line">            /* 正好回收的pool的szidx和这次用于分配的size一样 </div><div class="line">             * 不需要初始化了</div><div class="line">             */</div><div class="line">            if (pool-&gt;szidx == size) &#123;</div><div class="line">                /* Luckily, this pool last contained blocks</div><div class="line">                 * of the same size class, so its header</div><div class="line">                 * and free list are already initialized.</div><div class="line">                 */</div><div class="line">                bp = pool-&gt;freeblock;</div><div class="line">                pool-&gt;freeblock = *(block **)bp;</div><div class="line">                UNLOCK();</div><div class="line">                return (void *)bp;</div><div class="line">            &#125;</div><div class="line">            /*</div><div class="line">             * Initialize the pool header, set up the free list to</div><div class="line">             * contain just the second block, and return the first</div><div class="line">             * block.</div><div class="line">             */</div><div class="line">            pool-&gt;szidx = size;</div><div class="line">            size = INDEX2SIZE(size);</div><div class="line">            bp = (block *)pool + POOL_OVERHEAD;</div><div class="line">            pool-&gt;nextoffset = POOL_OVERHEAD + (size &lt;&lt; 1);</div><div class="line">            pool-&gt;maxnextoffset = POOL_SIZE - size;</div><div class="line">            pool-&gt;freeblock = bp + size;</div><div class="line">            *(block **)(pool-&gt;freeblock) = NULL;</div><div class="line">            UNLOCK();</div><div class="line">            return (void *)bp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* Carve off a new pool. */</div><div class="line">        /* 从usable_arenas中找到一个空闲的Pool */</div><div class="line">        assert(usable_arenas-&gt;nfreepools &gt; 0);</div><div class="line">        assert(usable_arenas-&gt;freepools == NULL);</div><div class="line">        /* pool_address空闲的POOL的地址 */</div><div class="line">        pool = (poolp)usable_arenas-&gt;pool_address;</div><div class="line">        assert((block*)pool &lt;= (block*)usable_arenas-&gt;address +</div><div class="line">                               ARENA_SIZE - POOL_SIZE);</div><div class="line">        /* pool 所在的arena在arenas的下标就是当前usable_arenas相对arenas的偏移 */</div><div class="line">        pool-&gt;arenaindex = usable_arenas - arenas;</div><div class="line">        assert(&amp;arenas[pool-&gt;arenaindex] == usable_arenas);</div><div class="line">        /* 0xFFFF */</div><div class="line">        pool-&gt;szidx = DUMMY_SIZE_IDX;</div><div class="line">        usable_arenas-&gt;pool_address += POOL_SIZE;</div><div class="line">        --usable_arenas-&gt;nfreepools;</div><div class="line"></div><div class="line">        if (usable_arenas-&gt;nfreepools == 0) &#123;</div><div class="line">            /* usable_arenas中的arena是双向链表 */</div><div class="line">            assert(usable_arenas-&gt;nextarena == NULL ||</div><div class="line">                   usable_arenas-&gt;nextarena-&gt;prevarena ==</div><div class="line">                   usable_arenas);</div><div class="line">            /* Unlink the arena:  it is completely allocated. */</div><div class="line">            usable_arenas = usable_arenas-&gt;nextarena;</div><div class="line">            if (usable_arenas != NULL) &#123;</div><div class="line">                usable_arenas-&gt;prevarena = NULL;</div><div class="line">                assert(usable_arenas-&gt;address != 0);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        goto init_pool;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* The small block allocator ends here. */</div><div class="line"></div><div class="line">redirect:</div><div class="line">    /* Redirect the original request to the underlying (libc) allocator.</div><div class="line">     * We jump here on bigger requests, on error in the code above (as a</div><div class="line">     * last chance to serve the request) or when the max memory limit</div><div class="line">     * has been reached.</div><div class="line">     */</div><div class="line">    if (nbytes == 0)</div><div class="line">        nbytes = 1;</div><div class="line">    return (void *)malloc(nbytes);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* free */</div><div class="line"></div><div class="line">#undef PyObject_Free</div><div class="line">ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS</div><div class="line">void</div><div class="line">PyObject_Free(void *p)</div><div class="line">&#123;</div><div class="line">    poolp pool;</div><div class="line">    block *lastfree;</div><div class="line">    poolp next, prev;</div><div class="line">    uint size;</div><div class="line">#ifndef Py_USING_MEMORY_DEBUGGER</div><div class="line">    uint arenaindex_temp;</div><div class="line">#endif</div><div class="line"></div><div class="line">    if (p == NULL)      /* free(NULL) has no effect */</div><div class="line">        return;</div><div class="line"></div><div class="line">#ifdef WITH_VALGRIND</div><div class="line">    if (UNLIKELY(running_on_valgrind &gt; 0))</div><div class="line">        goto redirect;</div><div class="line">#endif</div><div class="line"></div><div class="line">    /* 向上对齐4K，找到所在的Pool的地址 */</div><div class="line">    pool = POOL_ADDR(p);</div><div class="line">    /* p是通过pool分配出去的，只需证明p在pool所在的arena的地址内:</div><div class="line">     * 1. pool-&gt;arenaindex &lt;= maxarenas 确实至少分配了这么多arena</div><div class="line">     * 2. 0 &lt; p &lt;= arenas[pool-&gt;arenaindex].address + ARENA_SIZE</div><div class="line">     */</div><div class="line">    if (Py_ADDRESS_IN_RANGE(p, pool)) &#123;</div><div class="line">        /* We allocated this address. */</div><div class="line">        LOCK();</div><div class="line">        /* Link p to the start of the pool's freeblock list.  Since</div><div class="line">         * the pool had at least the p block outstanding, the pool</div><div class="line">         * wasn't empty (so it's already in a usedpools[] list, or</div><div class="line">         * was full and is in no list -- it's not in the freeblocks</div><div class="line">         * list in any case).</div><div class="line">         */</div><div class="line">        assert(pool-&gt;ref.count &gt; 0);            /* else it was empty */</div><div class="line">        /* 将p放入freeblock链表头部 </div><div class="line">         * 将前一个链表的头元素地址放入p的内存中</div><div class="line">         */</div><div class="line">        *(block **)p = lastfree = pool-&gt;freeblock;</div><div class="line">        pool-&gt;freeblock = (block *)p;</div><div class="line">        /* pool现在至少有2个分配单元: lastfree不为空1个，刚放入的1个 */</div><div class="line">        if (lastfree) &#123;</div><div class="line">            struct arena_object* ao;</div><div class="line">            uint nf;  /* ao-&gt;nfreepools */</div><div class="line"></div><div class="line">            /* freeblock wasn't NULL, so the pool wasn't full,</div><div class="line">             * and the pool is in a usedpools[] list.</div><div class="line">             */</div><div class="line">             /* </div><div class="line">              * pool没有full，且至少还有内存被分配出去: usable状态</div><div class="line">              */</div><div class="line">            if (--pool-&gt;ref.count != 0) &#123;</div><div class="line">                /* pool isn't empty:  leave it in usedpools */</div><div class="line">                UNLOCK();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            /* Pool is now empty:  unlink from usedpools, and</div><div class="line">             * link to the front of freepools.  This ensures that</div><div class="line">             * previously freed pools will be allocated later</div><div class="line">             * (being not referenced, they are perhaps paged out).</div><div class="line">             */</div><div class="line">            /* pool的内存都回收了: empty状态</div><div class="line">             * 将其从usedpools中去除</div><div class="line">             */</div><div class="line">            next = pool-&gt;nextpool;</div><div class="line">            prev = pool-&gt;prevpool;</div><div class="line">            next-&gt;prevpool = prev;</div><div class="line">            prev-&gt;nextpool = next;</div><div class="line"></div><div class="line">            /* Link the pool to freepools.  This is a singly-linked</div><div class="line">             * list, and pool-&gt;prevpool isn't used there.</div><div class="line">             */</div><div class="line">            /* Pool放入到对应的arena-&gt;freepools中 */</div><div class="line">            ao = &amp;arenas[pool-&gt;arenaindex];</div><div class="line">            pool-&gt;nextpool = ao-&gt;freepools;</div><div class="line">            ao-&gt;freepools = pool;</div><div class="line">            nf = ++ao-&gt;nfreepools;</div><div class="line"></div><div class="line">            /* All the rest is arena management.  We just freed</div><div class="line">             * a pool, and there are 4 cases for arena mgmt:</div><div class="line">             * 1. If all the pools are free, return the arena to</div><div class="line">             *    the system free().</div><div class="line">             * 2. If this is the only free pool in the arena,</div><div class="line">             *    add the arena back to the `usable_arenas` list.</div><div class="line">             * 3. If the "next" arena has a smaller count of free</div><div class="line">             *    pools, we have to "slide this arena right" to</div><div class="line">             *    restore that usable_arenas is sorted in order of</div><div class="line">             *    nfreepools.</div><div class="line">             * 4. Else there's nothing more to do.</div><div class="line">             */</div><div class="line">            /* 1. 所有pool的内存都没有分配出去，则可以将1个arena的内存全部释放</div><div class="line">             *    注意并不是释放arena_object，而是里面的address标记的256KB内存</div><div class="line">             * 2. 只有1个空闲的Pool，则将arena放到usable_arenas链表的最后</div><div class="line">             * 3. 重新排序usable_arenas，让空闲Pool多的排在后面不容易再被分配出去，</div><div class="line">             *    使其有更大的可能整体被回收</div><div class="line">             * 4. 无</div><div class="line">             */</div><div class="line">            if (nf == ao-&gt;ntotalpools) &#123;</div><div class="line">                /* Case 1.  First unlink ao from usable_arenas.</div><div class="line">                 */</div><div class="line">                assert(ao-&gt;prevarena == NULL ||</div><div class="line">                       ao-&gt;prevarena-&gt;address != 0);</div><div class="line">                assert(ao -&gt;nextarena == NULL ||</div><div class="line">                       ao-&gt;nextarena-&gt;address != 0);</div><div class="line"></div><div class="line">                /* Fix the pointer in the prevarena, or the</div><div class="line">                 * usable_arenas pointer.</div><div class="line">                 */</div><div class="line">                /* </div><div class="line">                 * 将arena从链表中拆出来 </div><div class="line">                 */</div><div class="line">                if (ao-&gt;prevarena == NULL) &#123;</div><div class="line">                    usable_arenas = ao-&gt;nextarena;</div><div class="line">                    assert(usable_arenas == NULL ||</div><div class="line">                           usable_arenas-&gt;address != 0);</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    assert(ao-&gt;prevarena-&gt;nextarena == ao);</div><div class="line">                    ao-&gt;prevarena-&gt;nextarena =</div><div class="line">                        ao-&gt;nextarena;</div><div class="line">                &#125;</div><div class="line">                /* Fix the pointer in the nextarena. */</div><div class="line">                if (ao-&gt;nextarena != NULL) &#123;</div><div class="line">                    assert(ao-&gt;nextarena-&gt;prevarena == ao);</div><div class="line">                    ao-&gt;nextarena-&gt;prevarena =</div><div class="line">                        ao-&gt;prevarena;</div><div class="line">                &#125;</div><div class="line">                /* Record that this arena_object slot is</div><div class="line">                 * available to be reused.</div><div class="line">                 */</div><div class="line">                /* 放入unused_arena_objects链表中 */</div><div class="line">                ao-&gt;nextarena = unused_arena_objects;</div><div class="line">                unused_arena_objects = ao;</div><div class="line"></div><div class="line">                /* Free the entire arena. */</div><div class="line">                /* 释放其中的ARENA_SIZE内存 */</div><div class="line">#ifdef ARENAS_USE_MMAP</div><div class="line">                munmap((void *)ao-&gt;address, ARENA_SIZE);</div><div class="line">#else</div><div class="line">                free((void *)ao-&gt;address);</div><div class="line">#endif</div><div class="line">                ao-&gt;address = 0;                        /* mark unassociated */</div><div class="line">                --narenas_currently_allocated;</div><div class="line"></div><div class="line">                UNLOCK();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            if (nf == 1) &#123;</div><div class="line">                /* Case 2.  Put ao at the head of</div><div class="line">                 * usable_arenas.  Note that because</div><div class="line">                 * ao-&gt;nfreepools was 0 before, ao isn't</div><div class="line">                 * currently on the usable_arenas list.</div><div class="line">                 */</div><div class="line">                /* 当nf==1时，说明在释放刚才的Pool之前，整个arena的pools都被分配出去了，</div><div class="line">                 * 所以之前肯定不在usabel_arenas中，于是放入usable_arenas表的最前面，即:</div><div class="line">                 * 越满的越被容易再次分配出去</div><div class="line">                 */</div><div class="line">                ao-&gt;nextarena = usable_arenas;</div><div class="line">                ao-&gt;prevarena = NULL;</div><div class="line">                if (usable_arenas)</div><div class="line">                    usable_arenas-&gt;prevarena = ao;</div><div class="line">                usable_arenas = ao;</div><div class="line">                assert(usable_arenas-&gt;address != 0);</div><div class="line"></div><div class="line">                UNLOCK();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            /* If this arena is now out of order, we need to keep</div><div class="line">             * the list sorted.  The list is kept sorted so that</div><div class="line">             * the "most full" arenas are used first, which allows</div><div class="line">             * the nearly empty arenas to be completely freed.  In</div><div class="line">             * a few un-scientific tests, it seems like this</div><div class="line">             * approach allowed a lot more memory to be freed.</div><div class="line">             */</div><div class="line">            if (ao-&gt;nextarena == NULL ||</div><div class="line">                         nf &lt;= ao-&gt;nextarena-&gt;nfreepools) &#123;</div><div class="line">                /* Case 4.  Nothing to do. */</div><div class="line">                UNLOCK();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            /* Case 3:  We have to move the arena towards the end</div><div class="line">             * of the list, because it has more free pools than</div><div class="line">             * the arena to its right.</div><div class="line">             * First unlink ao from usable_arenas.</div><div class="line">             */</div><div class="line">            if (ao-&gt;prevarena != NULL) &#123;</div><div class="line">                /* ao isn't at the head of the list */</div><div class="line">                assert(ao-&gt;prevarena-&gt;nextarena == ao);</div><div class="line">                ao-&gt;prevarena-&gt;nextarena = ao-&gt;nextarena;</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                /* ao is at the head of the list */</div><div class="line">                assert(usable_arenas == ao);</div><div class="line">                usable_arenas = ao-&gt;nextarena;</div><div class="line">            &#125;</div><div class="line">            ao-&gt;nextarena-&gt;prevarena = ao-&gt;prevarena;</div><div class="line"></div><div class="line">            /* Locate the new insertion point by iterating over</div><div class="line">             * the list, using our nextarena pointer.</div><div class="line">             */</div><div class="line">            while (ao-&gt;nextarena != NULL &amp;&amp;</div><div class="line">                            nf &gt; ao-&gt;nextarena-&gt;nfreepools) &#123;</div><div class="line">                ao-&gt;prevarena = ao-&gt;nextarena;</div><div class="line">                ao-&gt;nextarena = ao-&gt;nextarena-&gt;nextarena;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            /* Insert ao at this point. */</div><div class="line">            assert(ao-&gt;nextarena == NULL ||</div><div class="line">                ao-&gt;prevarena == ao-&gt;nextarena-&gt;prevarena);</div><div class="line">            assert(ao-&gt;prevarena-&gt;nextarena == ao-&gt;nextarena);</div><div class="line"></div><div class="line">            ao-&gt;prevarena-&gt;nextarena = ao;</div><div class="line">            if (ao-&gt;nextarena != NULL)</div><div class="line">                ao-&gt;nextarena-&gt;prevarena = ao;</div><div class="line"></div><div class="line">            /* Verify that the swaps worked. */</div><div class="line">            assert(ao-&gt;nextarena == NULL ||</div><div class="line">                      nf &lt;= ao-&gt;nextarena-&gt;nfreepools);</div><div class="line">            assert(ao-&gt;prevarena == NULL ||</div><div class="line">                      nf &gt; ao-&gt;prevarena-&gt;nfreepools);</div><div class="line">            assert(ao-&gt;nextarena == NULL ||</div><div class="line">                ao-&gt;nextarena-&gt;prevarena == ao);</div><div class="line">            assert((usable_arenas == ao &amp;&amp;</div><div class="line">                ao-&gt;prevarena == NULL) ||</div><div class="line">                ao-&gt;prevarena-&gt;nextarena == ao);</div><div class="line"></div><div class="line">            UNLOCK();</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        /* Pool was full, so doesn't currently live in any list:</div><div class="line">         * link it to the front of the appropriate usedpools[] list.</div><div class="line">         * This mimics LRU pool usage for new allocations and</div><div class="line">         * targets optimal filling when several pools contain</div><div class="line">         * blocks of the same size class.</div><div class="line">         */</div><div class="line">        /* Pool所在的arena没有被回收，Pool有部分内存被分配出去 */</div><div class="line">        --pool-&gt;ref.count;</div><div class="line">        assert(pool-&gt;ref.count &gt; 0);            /* else the pool is empty */</div><div class="line">        size = pool-&gt;szidx;</div><div class="line">        next = usedpools[size + size];</div><div class="line">        prev = next-&gt;prevpool;</div><div class="line">        /* insert pool before next:   prev &lt;-&gt; pool &lt;-&gt; next */</div><div class="line">        pool-&gt;nextpool = next;</div><div class="line">        pool-&gt;prevpool = prev;</div><div class="line">        next-&gt;prevpool = pool;</div><div class="line">        prev-&gt;nextpool = pool;</div><div class="line">        UNLOCK();</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">#ifdef WITH_VALGRIND</div><div class="line">redirect:</div><div class="line">#endif</div><div class="line">    /* We didn't allocate this address. */</div><div class="line">    free(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* realloc.  If p is NULL, this acts like malloc(nbytes).  Else if nbytes==0,</div><div class="line"> * then as the Python docs promise, we do not treat this like free(p), and</div><div class="line"> * return a non-NULL result.</div><div class="line"> */</div><div class="line"></div><div class="line">#undef PyObject_Realloc</div><div class="line">ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS</div><div class="line">void *</div><div class="line">PyObject_Realloc(void *p, size_t nbytes)</div><div class="line">&#123;</div><div class="line">    void *bp;</div><div class="line">    poolp pool;</div><div class="line">    size_t size;</div><div class="line">#ifndef Py_USING_MEMORY_DEBUGGER</div><div class="line">    uint arenaindex_temp;</div><div class="line">#endif</div><div class="line"></div><div class="line">    if (p == NULL)</div><div class="line">        return PyObject_Malloc(nbytes);</div><div class="line"></div><div class="line">    /*</div><div class="line">     * Limit ourselves to PY_SSIZE_T_MAX bytes to prevent security holes.</div><div class="line">     * Most python internals blindly use a signed Py_ssize_t to track</div><div class="line">     * things without checking for overflows or negatives.</div><div class="line">     * As size_t is unsigned, checking for nbytes &lt; 0 is not required.</div><div class="line">     */</div><div class="line">    if (nbytes &gt; PY_SSIZE_T_MAX)</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">#ifdef WITH_VALGRIND</div><div class="line">    /* Treat running_on_valgrind == -1 the same as 0 */</div><div class="line">    if (UNLIKELY(running_on_valgrind &gt; 0))</div><div class="line">        goto redirect;</div><div class="line">#endif</div><div class="line"></div><div class="line">    pool = POOL_ADDR(p);</div><div class="line">    if (Py_ADDRESS_IN_RANGE(p, pool)) &#123;</div><div class="line">        /* We're in charge of this block */</div><div class="line">        size = INDEX2SIZE(pool-&gt;szidx);</div><div class="line">        /* 收缩内存至少75%才实际操作 */</div><div class="line">        if (nbytes &lt;= size) &#123;</div><div class="line">            /* The block is staying the same or shrinking.  If</div><div class="line">             * it's shrinking, there's a tradeoff:  it costs</div><div class="line">             * cycles to copy the block to a smaller size class,</div><div class="line">             * but it wastes memory not to copy it.  The</div><div class="line">             * compromise here is to copy on shrink only if at</div><div class="line">             * least 25% of size can be shaved off.</div><div class="line">             */</div><div class="line">            if (4 * nbytes &gt; 3 * size) &#123;</div><div class="line">                /* It's the same,</div><div class="line">                 * or shrinking and new/old &gt; 3/4.</div><div class="line">                 */</div><div class="line">                return p;</div><div class="line">            &#125;</div><div class="line">            size = nbytes;</div><div class="line">        &#125;</div><div class="line">        bp = PyObject_Malloc(nbytes);</div><div class="line">        if (bp != NULL) &#123;</div><div class="line">            memcpy(bp, p, size);</div><div class="line">            PyObject_Free(p);</div><div class="line">        &#125;</div><div class="line">        return bp;</div><div class="line">    &#125;</div><div class="line">#ifdef WITH_VALGRIND</div><div class="line"> redirect:</div><div class="line">#endif</div><div class="line">    /* We're not managing this block.  If nbytes &lt;=</div><div class="line">     * SMALL_REQUEST_THRESHOLD, it's tempting to try to take over this</div><div class="line">     * block.  However, if we do, we need to copy the valid data from</div><div class="line">     * the C-managed block to one of our blocks, and there's no portable</div><div class="line">     * way to know how much of the memory space starting at p is valid.</div><div class="line">     * As bug 1185883 pointed out the hard way, it's possible that the</div><div class="line">     * C-managed block is "at the end" of allocated VM space, so that</div><div class="line">     * a memory fault can occur if we try to copy nbytes bytes starting</div><div class="line">     * at p.  Instead we punt:  let C continue to manage this block.</div><div class="line">     */</div><div class="line">    if (nbytes)</div><div class="line">        return realloc(p, nbytes);</div><div class="line">    /* C doesn't define the result of realloc(p, 0) (it may or may not</div><div class="line">     * return NULL then), but Python's docs promise that nbytes==0 never</div><div class="line">     * returns NULL.  We don't pass 0 to realloc(), to avoid that endcase</div><div class="line">     * to begin with.  Even then, we can't be sure that realloc() won't</div><div class="line">     * return NULL.</div><div class="line">     */</div><div class="line">    bp = realloc(p, 1);</div><div class="line">    return bp ? bp : p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#else   /* ! WITH_PYMALLOC */</div><div class="line"></div><div class="line">/*==========================================================================*/</div><div class="line">/* pymalloc not enabled:  Redirect the entry points to malloc.  These will</div><div class="line"> * only be used by extensions that are compiled with pymalloc enabled. */</div><div class="line"></div><div class="line">void *</div><div class="line">PyObject_Malloc(size_t n)</div><div class="line">&#123;</div><div class="line">    return PyMem_MALLOC(n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void *</div><div class="line">PyObject_Realloc(void *p, size_t n)</div><div class="line">&#123;</div><div class="line">    return PyMem_REALLOC(p, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void</div><div class="line">PyObject_Free(void *p)</div><div class="line">&#123;</div><div class="line">    PyMem_FREE(p);</div><div class="line">&#125;</div><div class="line">#endif /* WITH_PYMALLOC */</div><div class="line"></div><div class="line">#ifdef PYMALLOC_DEBUG</div><div class="line">/*==========================================================================*/</div><div class="line">/* A x-platform debugging allocator.  This doesn't manage memory directly,</div><div class="line"> * it wraps a real allocator, adding extra debugging info to the memory blocks.</div><div class="line"> */</div><div class="line"></div><div class="line">/* Special bytes broadcast into debug memory blocks at appropriate times.</div><div class="line"> * Strings of these are unlikely to be valid addresses, floats, ints or</div><div class="line"> * 7-bit ASCII.</div><div class="line"> */</div><div class="line">#undef CLEANBYTE</div><div class="line">#undef DEADBYTE</div><div class="line">#undef FORBIDDENBYTE</div><div class="line">#define CLEANBYTE      0xCB    /* clean (newly allocated) memory */</div><div class="line">#define DEADBYTE       0xDB    /* dead (newly freed) memory */</div><div class="line">#define FORBIDDENBYTE  0xFB    /* untouchable bytes at each end of a block */</div><div class="line"></div><div class="line">/* We tag each block with an API ID in order to tag API violations */</div><div class="line">#define _PYMALLOC_MEM_ID 'm'   /* the PyMem_Malloc() API */</div><div class="line">#define _PYMALLOC_OBJ_ID 'o'   /* The PyObject_Malloc() API */</div><div class="line"></div><div class="line">static size_t serialno = 0;     /* incremented on each debug &#123;m,re&#125;alloc */</div><div class="line"></div><div class="line">/* serialno is always incremented via calling this routine.  The point is</div><div class="line"> * to supply a single place to set a breakpoint.</div><div class="line"> */</div><div class="line">static void</div><div class="line">bumpserialno(void)</div><div class="line">&#123;</div><div class="line">    ++serialno;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#define SST SIZEOF_SIZE_T</div><div class="line"></div><div class="line">/* Read sizeof(size_t) bytes at p as a big-endian size_t. */</div><div class="line">static size_t</div><div class="line">read_size_t(const void *p)</div><div class="line">&#123;</div><div class="line">    const uchar *q = (const uchar *)p;</div><div class="line">    size_t result = *q++;</div><div class="line">    int i;</div><div class="line"></div><div class="line">    for (i = SST; --i &gt; 0; ++q)</div><div class="line">        result = (result &lt;&lt; 8) | *q;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Write n as a big-endian size_t, MSB at address p, LSB at</div><div class="line"> * p + sizeof(size_t) - 1.</div><div class="line"> */</div><div class="line">static void</div><div class="line">write_size_t(void *p, size_t n)</div><div class="line">&#123;</div><div class="line">    uchar *q = (uchar *)p + SST - 1;</div><div class="line">    int i;</div><div class="line"></div><div class="line">    for (i = SST; --i &gt;= 0; --q) &#123;</div><div class="line">        *q = (uchar)(n &amp; 0xff);</div><div class="line">        n &gt;&gt;= 8;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#ifdef Py_DEBUG</div><div class="line">/* Is target in the list?  The list is traversed via the nextpool pointers.</div><div class="line"> * The list may be NULL-terminated, or circular.  Return 1 if target is in</div><div class="line"> * list, else 0.</div><div class="line"> */</div><div class="line">static int</div><div class="line">pool_is_in_list(const poolp target, poolp list)</div><div class="line">&#123;</div><div class="line">    poolp origlist = list;</div><div class="line">    assert(target != NULL);</div><div class="line">    if (list == NULL)</div><div class="line">        return 0;</div><div class="line">    do &#123;</div><div class="line">        if (target == list)</div><div class="line">            return 1;</div><div class="line">	lst-&gt;nextpool;</div><div class="line">    &#125; while (list != NULL &amp;&amp; list != origlist);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#else</div><div class="line">#define pool_is_in_list(X, Y) 1</div><div class="line"></div><div class="line">#endif  /* Py_DEBUG */</div><div class="line"></div><div class="line">/* Let S = sizeof(size_t).  The debug malloc asks for 4*S extra bytes and</div><div class="line">   fills them with useful stuff, here calling the underlying malloc's result p:</div><div class="line"></div><div class="line">p[0: S]</div><div class="line">    Number of bytes originally asked for.  This is a size_t, big-endian (easier</div><div class="line">    to read in a memory dump).</div><div class="line">p[S: 2*S]</div><div class="line">    Copies of FORBIDDENBYTE.  Used to catch under- writes and reads.</div><div class="line">p[2*S: 2*S+n]</div><div class="line">    The requested memory, filled with copies of CLEANBYTE.</div><div class="line">    Used to catch reference to uninitialized memory.</div><div class="line">    &amp;p[2*S] is returned.  Note that this is 8-byte aligned if pymalloc</div><div class="line">    handled the request itself.</div><div class="line">p[2*S+n: 2*S+n+S]</div><div class="line">    Copies of FORBIDDENBYTE.  Used to catch over- writes and reads.</div><div class="line">p[2*S+n+S: 2*S+n+2*S]</div><div class="line">    A serial number, incremented by 1 on each call to _PyObject_DebugMalloc</div><div class="line">    and _PyObject_DebugRealloc.</div><div class="line">    This is a big-endian size_t.</div><div class="line">    If "bad memory" is detected later, the serial number gives an</div><div class="line">    excellent way to set a breakpoint on the next run, to capture the</div><div class="line">    instant at which this block was passed out.</div><div class="line">*/</div><div class="line"></div><div class="line">/* debug replacements for the PyMem_* memory API */</div><div class="line">void *</div><div class="line">_PyMem_DebugMalloc(size_t nbytes)</div><div class="line">&#123;</div><div class="line">    return _PyObject_DebugMallocApi(_PYMALLOC_MEM_ID, nbytes);</div><div class="line">&#125;</div><div class="line">void *</div><div class="line">_PyMem_DebugRealloc(void *p, size_t nbytes)</div><div class="line">&#123;</div><div class="line">    return _PyObject_DebugReallocApi(_PYMALLOC_MEM_ID, p, nbytes);</div><div class="line">&#125;</div><div class="line">void</div><div class="line">_PyMem_DebugFree(void *p)</div><div class="line">&#123;</div><div class="line">    _PyObject_DebugFreeApi(_PYMALLOC_MEM_ID, p);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* debug replacements for the PyObject_* memory API */</div><div class="line">void *</div><div class="line">_PyObject_DebugMalloc(size_t nbytes)</div><div class="line">&#123;</div><div class="line">    return _PyObject_DebugMallocApi(_PYMALLOC_OBJ_ID, nbytes);</div><div class="line">&#125;</div><div class="line">void *</div><div class="line">_PyObject_DebugRealloc(void *p, size_t nbytes)</div><div class="line">&#123;</div><div class="line">    return _PyObject_DebugReallocApi(_PYMALLOC_OBJ_ID, p, nbytes);</div><div class="line">&#125;</div><div class="line">void</div><div class="line">_PyObject_DebugFree(void *p)</div><div class="line">&#123;</div><div class="line">    _PyObject_DebugFreeApi(_PYMALLOC_OBJ_ID, p);</div><div class="line">&#125;</div><div class="line">void</div><div class="line">_PyObject_DebugCheckAddress(const void *p)</div><div class="line">&#123;</div><div class="line">    _PyObject_DebugCheckAddressApi(_PYMALLOC_OBJ_ID, p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/* generic debug memory api, with an "id" to identify the API in use */</div><div class="line">void *</div><div class="line">_PyObject_DebugMallocApi(char id, size_t nbytes)</div><div class="line">&#123;</div><div class="line">    uchar *p;           /* base address of malloc'ed block */</div><div class="line">    uchar *tail;        /* p + 2*SST + nbytes == pointer to tail pad bytes */</div><div class="line">    size_t total;       /* nbytes + 4*SST */</div><div class="line"></div><div class="line">    bumpserialno();</div><div class="line">    total = nbytes + 4*SST;</div><div class="line">    if (total &lt; nbytes)</div><div class="line">        /* overflow:  can't represent total as a size_t */</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    p = (uchar *)PyObject_Malloc(total);</div><div class="line">    if (p == NULL)</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    /* at p, write size (SST bytes), id (1 byte), pad (SST-1 bytes) */</div><div class="line">    write_size_t(p, nbytes);</div><div class="line">    p[SST] = (uchar)id;</div><div class="line">    memset(p + SST + 1 , FORBIDDENBYTE, SST-1);</div><div class="line"></div><div class="line">    if (nbytes &gt; 0)</div><div class="line">        memset(p + 2*SST, CLEANBYTE, nbytes);</div><div class="line"></div><div class="line">    /* at tail, write pad (SST bytes) and serialno (SST bytes) */</div><div class="line">    tail = p + 2*SST + nbytes;</div><div class="line">    memset(tail, FORBIDDENBYTE, SST);</div><div class="line">    write_size_t(tail + SST, serialno);</div><div class="line"></div><div class="line">    return p + 2*SST;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* The debug free first checks the 2*SST bytes on each end for sanity (in</div><div class="line">   particular, that the FORBIDDENBYTEs with the api ID are still intact).</div><div class="line">   Then fills the original bytes with DEADBYTE.</div><div class="line">   Then calls the underlying free.</div><div class="line">*/</div><div class="line">void</div><div class="line">_PyObject_DebugFreeApi(char api, void *p)</div><div class="line">&#123;</div><div class="line">    uchar *q = (uchar *)p - 2*SST;  /* address returned from malloc */</div><div class="line">    size_t nbytes;</div><div class="line"></div><div class="line">    if (p == NULL)</div><div class="line">        return;</div><div class="line">    _PyObject_DebugCheckAddressApi(api, p);</div><div class="line">    nbytes = read_size_t(q);</div><div class="line">    nbytes += 4*SST;</div><div class="line">    if (nbytes &gt; 0)</div><div class="line">        memset(q, DEADBYTE, nbytes);</div><div class="line">    PyObject_Free(q);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void *</div><div class="line">_PyObject_DebugReallocApi(char api, void *p, size_t nbytes)</div><div class="line">&#123;</div><div class="line">    uchar *q = (uchar *)p;</div><div class="line">    uchar *tail;</div><div class="line">    size_t total;       /* nbytes + 4*SST */</div><div class="line">    size_t original_nbytes;</div><div class="line">    int i;</div><div class="line"></div><div class="line">    if (p == NULL)</div><div class="line">        return _PyObject_DebugMallocApi(api, nbytes);</div><div class="line"></div><div class="line">    _PyObject_DebugCheckAddressApi(api, p);</div><div class="line">    bumpserialno();</div><div class="line">    original_nbytes = read_size_t(q - 2*SST);</div><div class="line">    total = nbytes + 4*SST;</div><div class="line">    if (total &lt; nbytes)</div><div class="line">        /* overflow:  can't represent total as a size_t */</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    if (nbytes &lt; original_nbytes) &#123;</div><div class="line">        /* shrinking:  mark old extra memory dead */</div><div class="line">        memset(q + nbytes, DEADBYTE, original_nbytes - nbytes + 2*SST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Resize and add decorations. We may get a new pointer here, in which</div><div class="line">     * case we didn't get the chance to mark the old memory with DEADBYTE,</div><div class="line">     * but we live with that.</div><div class="line">     */</div><div class="line">    q = (uchar *)PyObject_Realloc(q - 2*SST, total);</div><div class="line">    if (q == NULL)</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    write_size_t(q, nbytes);</div><div class="line">    assert(q[SST] == (uchar)api);</div><div class="line">    for (i = 1; i &lt; SST; ++i)</div><div class="line">        assert(q[SST + i] == FORBIDDENBYTE);</div><div class="line">    q += 2*SST;</div><div class="line">    tail = q + nbytes;</div><div class="line">    memset(tail, FORBIDDENBYTE, SST);</div><div class="line">    write_size_t(tail + SST, serialno);</div><div class="line"></div><div class="line">    if (nbytes &gt; original_nbytes) &#123;</div><div class="line">        /* growing:  mark new extra memory clean */</div><div class="line">        memset(q + original_nbytes, CLEANBYTE,</div><div class="line">               nbytes - original_nbytes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return q;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Check the forbidden bytes on both ends of the memory allocated for p.</div><div class="line"> * If anything is wrong, print info to stderr via _PyObject_DebugDumpAddress,</div><div class="line"> * and call Py_FatalError to kill the program.</div><div class="line"> * The API id, is also checked.</div><div class="line"> */</div><div class="line"> void</div><div class="line">_PyObject_DebugCheckAddressApi(char api, const void *p)</div><div class="line">&#123;</div><div class="line">    const uchar *q = (const uchar *)p;</div><div class="line">    char msgbuf[64];</div><div class="line">    char *msg;</div><div class="line">    size_t nbytes;</div><div class="line">    const uchar *tail;</div><div class="line">    int i;</div><div class="line">    char id;</div><div class="line"></div><div class="line">    if (p == NULL) &#123;</div><div class="line">        msg = "didn't expect a NULL pointer";</div><div class="line">        goto error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Check the API id */</div><div class="line">    id = (char)q[-SST];</div><div class="line">    if (id != api) &#123;</div><div class="line">        msg = msgbuf;</div><div class="line">        snprintf(msg, sizeof(msgbuf), "bad ID: Allocated using API '%c', verified using API '%c'", id, api);</div><div class="line">        msgbuf[sizeof(msgbuf)-1] = 0;</div><div class="line">        goto error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Check the stuff at the start of p first:  if there's underwrite</div><div class="line">     * corruption, the number-of-bytes field may be nuts, and checking</div><div class="line">     * the tail could lead to a segfault then.</div><div class="line">     */</div><div class="line">    for (i = SST-1; i &gt;= 1; --i) &#123;</div><div class="line">        if (*(q-i) != FORBIDDENBYTE) &#123;</div><div class="line">            msg = "bad leading pad byte";</div><div class="line">            goto error;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    nbytes = read_size_t(q - 2*SST);</div><div class="line">    tail = q + nbytes;</div><div class="line">    for (i = 0; i &lt; SST; ++i) &#123;</div><div class="line">        if (tail[i] != FORBIDDENBYTE) &#123;</div><div class="line">            msg = "bad trailing pad byte";</div><div class="line">            goto error;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return;</div><div class="line"></div><div class="line">error:</div><div class="line">    _PyObject_DebugDumpAddress(p);</div><div class="line">    Py_FatalError(msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Display info to stderr about the memory block at p. */</div><div class="line">void</div><div class="line">_PyObject_DebugDumpAddress(const void *p)</div><div class="line">&#123;</div><div class="line">    const uchar *q = (const uchar *)p;</div><div class="line">    const uchar *tail;</div><div class="line">    size_t nbytes, serial;</div><div class="line">    int i;</div><div class="line">    int ok;</div><div class="line">    char id;</div><div class="line"></div><div class="line">    fprintf(stderr, "Debug memory block at address p=%p:", p);</div><div class="line">    if (p == NULL) &#123;</div><div class="line">        fprintf(stderr, "\n");</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    id = (char)q[-SST];</div><div class="line">    fprintf(stderr, " API '%c'\n", id);</div><div class="line"></div><div class="line">    nbytes = read_size_t(q - 2*SST);</div><div class="line">    fprintf(stderr, "    %" PY_FORMAT_SIZE_T "u bytes originally "</div><div class="line">                    "requested\n", nbytes);</div><div class="line"></div><div class="line">    /* In case this is nuts, check the leading pad bytes first. */</div><div class="line">    fprintf(stderr, "    The %d pad bytes at p-%d are ", SST-1, SST-1);</div><div class="line">    ok = 1;</div><div class="line">    for (i = 1; i &lt;= SST-1; ++i) &#123;</div><div class="line">        if (*(q-i) != FORBIDDENBYTE) &#123;</div><div class="line">            ok = 0;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (ok)</div><div class="line">        fputs("FORBIDDENBYTE, as expected.\n", stderr);</div><div class="line">    else &#123;</div><div class="line">        fprintf(stderr, "not all FORBIDDENBYTE (0x%02x):\n",</div><div class="line">            FORBIDDENBYTE);</div><div class="line">        for (i = SST-1; i &gt;= 1; --i) &#123;</div><div class="line">            const uchar byte = *(q-i);</div><div class="line">            fprintf(stderr, "        at p-%d: 0x%02x", i, byte);</div><div class="line">            if (byte != FORBIDDENBYTE)</div><div class="line">                fputs(" *** OUCH", stderr);</div><div class="line">            fputc('\n', stderr);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fputs("    Because memory is corrupted at the start, the "</div><div class="line">              "count of bytes requested\n"</div><div class="line">              "       may be bogus, and checking the trailing pad "</div><div class="line">              "bytes may segfault.\n", stderr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tail = q + nbytes;</div><div class="line">    fprintf(stderr, "    The %d pad bytes at tail=%p are ", SST, tail);</div><div class="line">    ok = 1;</div><div class="line">    for (i = 0; i &lt; SST; ++i) &#123;</div><div class="line">        if (tail[i] != FORBIDDENBYTE) &#123;</div><div class="line">            ok = 0;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (ok)</div><div class="line">        fputs("FORBIDDENBYTE, as expected.\n", stderr);</div><div class="line">    else &#123;</div><div class="line">        fprintf(stderr, "not all FORBIDDENBYTE (0x%02x):\n",</div><div class="line">                FORBIDDENBYTE);</div><div class="line">        for (i = 0; i &lt; SST; ++i) &#123;</div><div class="line">            const uchar byte = tail[i];</div><div class="line">            fprintf(stderr, "        at tail+%d: 0x%02x",</div><div class="line">                    i, byte);</div><div class="line">            if (byte != FORBIDDENBYTE)</div><div class="line">                fputs(" *** OUCH", stderr);</div><div class="line">            fputc('\n', stderr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    serial = read_size_t(tail + SST);</div><div class="line">    fprintf(stderr, "    The block was made by call #%" PY_FORMAT_SIZE_T</div><div class="line">                    "u to debug malloc/realloc.\n", serial);</div><div class="line"></div><div class="line">    if (nbytes &gt; 0) &#123;</div><div class="line">        i = 0;</div><div class="line">        fputs("    Data at p:", stderr);</div><div class="line">        /* print up to 8 bytes at the start */</div><div class="line">        while (q &lt; tail &amp;&amp; i &lt; 8) &#123;</div><div class="line">            fprintf(stderr, " %02x", *q);</div><div class="line">            ++i;</div><div class="line">            ++q;</div><div class="line">        &#125;</div><div class="line">        /* and up to 8 at the end */</div><div class="line">        if (q &lt; tail) &#123;</div><div class="line">            if (tail - q &gt; 8) &#123;</div><div class="line">                fputs(" ...", stderr);</div><div class="line">                q = tail - 8;</div><div class="line">            &#125;</div><div class="line">            while (q &lt; tail) &#123;</div><div class="line">                fprintf(stderr, " %02x", *q);</div><div class="line">                ++q;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        fputc('\n', stderr);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static size_t</div><div class="line">printone(const char* msg, size_t value)</div><div class="line">&#123;</div><div class="line">    int i, k;</div><div class="line">    char buf[100];</div><div class="line">    size_t origvalue = value;</div><div class="line"></div><div class="line">    fputs(msg, stderr);</div><div class="line">    for (i = (int)strlen(msg); i &lt; 35; ++i)</div><div class="line">        fputc(' ', stderr);</div><div class="line">    fputc('=', stderr);</div><div class="line"></div><div class="line">    /* Write the value with commas. */</div><div class="line">    i = 22;</div><div class="line">    buf[i--] = '\0';</div><div class="line">    buf[i--] = '\n';</div><div class="line">    k = 3;</div><div class="line">    do &#123;</div><div class="line">        size_t nextvalue = value / 10;</div><div class="line">        unsigned int digit = (unsigned int)(value - nextvalue * 10);</div><div class="line">        value = nextvalue;</div><div class="line">        buf[i--] = (char)(digit + '0');</div><div class="line">        --k;</div><div class="line">        if (k == 0 &amp;&amp; value &amp;&amp; i &gt;= 0) &#123;</div><div class="line">            k = 3;</div><div class="line">            buf[i--] = ',';</div><div class="line">        &#125;</div><div class="line">    &#125; while (value &amp;&amp; i &gt;= 0);</div><div class="line"></div><div class="line">    while (i &gt;= 0)</div><div class="line">        buf[i--] = ' ';</div><div class="line">    fputs(buf, stderr);</div><div class="line"></div><div class="line">    return origvalue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Print summary info to stderr about the state of pymalloc's structures.</div><div class="line"> * In Py_DEBUG mode, also perform some expensive internal consistency</div><div class="line"> * checks.</div><div class="line"> */</div><div class="line">void</div><div class="line">_PyObject_DebugMallocStats(void)</div><div class="line">&#123;</div><div class="line">    uint i;</div><div class="line">    const uint numclasses = SMALL_REQUEST_THRESHOLD &gt;&gt; ALIGNMENT_SHIFT;</div><div class="line">    /* # of pools, allocated blocks, and free blocks per class index */</div><div class="line">    size_t numpools[SMALL_REQUEST_THRESHOLD &gt;&gt; ALIGNMENT_SHIFT];</div><div class="line">    size_t numblocks[SMALL_REQUEST_THRESHOLD &gt;&gt; ALIGNMENT_SHIFT];</div><div class="line">    size_t numfreeblocks[SMALL_REQUEST_THRESHOLD &gt;&gt; ALIGNMENT_SHIFT];</div><div class="line">    /* total # of allocated bytes in used and full pools */</div><div class="line">    size_t allocated_bytes = 0;</div><div class="line">    /* total # of available bytes in used pools */</div><div class="line">    size_t available_bytes = 0;</div><div class="line">    /* # of free pools + pools not yet carved out of current arena */</div><div class="line">    uint numfreepools = 0;</div><div class="line">    /* # of bytes for arena alignment padding */</div><div class="line">    size_t arena_alignment = 0;</div><div class="line">    /* # of bytes in used and full pools used for pool_headers */</div><div class="line">    size_t pool_header_bytes = 0;</div><div class="line">    /* # of bytes in used and full pools wasted due to quantization,</div><div class="line">     * i.e. the necessarily leftover space at the ends of used and</div><div class="line">     * full pools.</div><div class="line">     */</div><div class="line">    size_t quantization = 0;</div><div class="line">    /* # of arenas actually allocated. */</div><div class="line">    size_t narenas = 0;</div><div class="line">    /* running total -- should equal narenas * ARENA_SIZE */</div><div class="line">    size_t total;</div><div class="line">    char buf[128];</div><div class="line"></div><div class="line">    fprintf(stderr, "Small block threshold = %d, in %u size classes.\n",</div><div class="line">            SMALL_REQUEST_THRESHOLD, numclasses);</div><div class="line"></div><div class="line">    for (i = 0; i &lt; numclasses; ++i)</div><div class="line">        numpools[i] = numblocks[i] = numfreeblocks[i] = 0;</div><div class="line"></div><div class="line">    /* Because full pools aren't linked to from anything, it's easiest</div><div class="line">     * to march over all the arenas.  If we're lucky, most of the memory</div><div class="line">     * will be living in full pools -- would be a shame to miss them.</div><div class="line">     */</div><div class="line">    for (i = 0; i &lt; maxarenas; ++i) &#123;</div><div class="line">        uint j;</div><div class="line">        uptr base = arenas[i].address;</div><div class="line"></div><div class="line">        /* Skip arenas which are not allocated. */</div><div class="line">        if (arenas[i].address == (uptr)NULL)</div><div class="line">            continue;</div><div class="line">        narenas += 1;</div><div class="line"></div><div class="line">        numfreepools += arenas[i].nfreepools;</div><div class="line"></div><div class="line">        /* round up to pool alignment */</div><div class="line">        if (base &amp; (uptr)POOL_SIZE_MASK) &#123;</div><div class="line">            arena_alignment += POOL_SIZE;</div><div class="line">            base &amp;= ~(uptr)POOL_SIZE_MASK;</div><div class="line">            base += POOL_SIZE;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /* visit every pool in the arena */</div><div class="line">        assert(base &lt;= (uptr) arenas[i].pool_address);</div><div class="line">        for (j = 0;</div><div class="line">                    base &lt; (uptr) arenas[i].pool_address;</div><div class="line">                    ++j, base += POOL_SIZE) &#123;</div><div class="line">            poolp p = (poolp)base;</div><div class="line">            const uint sz = p-&gt;szidx;</div><div class="line">            uint freeblocks;</div><div class="line"></div><div class="line">            if (p-&gt;ref.count == 0) &#123;</div><div class="line">                /* currently unused */</div><div class="line">                assert(pool_is_in_list(p, arenas[i].freepools));</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            ++numpools[sz];</div><div class="line">            numblocks[sz] += p-&gt;ref.count;</div><div class="line">            freeblocks = NUMBLOCKS(sz) - p-&gt;ref.count;</div><div class="line">            numfreeblocks[sz] += freeblocks;</div><div class="line">#ifdef Py_DEBUG</div><div class="line">            if (freeblocks &gt; 0)</div><div class="line">                assert(pool_is_in_list(p, usedpools[sz + sz]));</div><div class="line">#endif</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    assert(narenas == narenas_currently_allocated);</div><div class="line"></div><div class="line">    fputc('\n', stderr);</div><div class="line">    fputs("class   size   num pools   blocks in use  avail blocks\n"</div><div class="line">          "-----   ----   ---------   -------------  ------------\n",</div><div class="line">          stderr);</div><div class="line"></div><div class="line">    for (i = 0; i &lt; numclasses; ++i) &#123;</div><div class="line">        size_t p = numpools[i];</div><div class="line">        size_t b = numblocks[i];</div><div class="line">        size_t f = numfreeblocks[i];</div><div class="line">        uint size = INDEX2SIZE(i);</div><div class="line">        if (p == 0) &#123;</div><div class="line">            assert(b == 0 &amp;&amp; f == 0);</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        fprintf(stderr, "%5u %6u "</div><div class="line">                        "%11" PY_FORMAT_SIZE_T "u "</div><div class="line">                        "%15" PY_FORMAT_SIZE_T "u "</div><div class="line">                        "%13" PY_FORMAT_SIZE_T "u\n",</div><div class="line">                i, size, p, b, f);</div><div class="line">        allocated_bytes += b * size;</div><div class="line">        available_bytes += f * size;</div><div class="line">        pool_header_bytes += p * POOL_OVERHEAD;</div><div class="line">        quantization += p * ((POOL_SIZE - POOL_OVERHEAD) % size);</div><div class="line">    &#125;</div><div class="line">    fputc('\n', stderr);</div><div class="line">    (void)printone("# times object malloc called", serialno);</div><div class="line"></div><div class="line">    (void)printone("# arenas allocated total", ntimes_arena_allocated);</div><div class="line">    (void)printone("# arenas reclaimed", ntimes_arena_allocated - narenas);</div><div class="line">    (void)printone("# arenas highwater mark", narenas_highwater);</div><div class="line">    (void)printone("# arenas allocated current", narenas);</div><div class="line"></div><div class="line">    PyOS_snprintf(buf, sizeof(buf),</div><div class="line">        "%" PY_FORMAT_SIZE_T "u arenas * %d bytes/arena",</div><div class="line">        narenas, ARENA_SIZE);</div><div class="line">    (void)printone(buf, narenas * ARENA_SIZE);</div><div class="line"></div><div class="line">    fputc('\n', stderr);</div><div class="line"></div><div class="line">    total = printone("# bytes in allocated blocks", allocated_bytes);</div><div class="line">    total += printone("# bytes in available blocks", available_bytes);</div><div class="line"></div><div class="line">    PyOS_snprintf(buf, sizeof(buf),</div><div class="line">        "%u unused pools * %d bytes", numfreepools, POOL_SIZE);</div><div class="line">    total += printone(buf, (size_t)numfreepools * POOL_SIZE);</div><div class="line"></div><div class="line">    total += printone("# bytes lost to pool headers", pool_header_bytes);</div><div class="line">    total += printone("# bytes lost to quantization", quantization);</div><div class="line">    total += printone("# bytes lost to arena alignment", arena_alignment);</div><div class="line">    (void)printone("Total", total);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#endif  /* PYMALLOC_DEBUG */</div><div class="line"></div><div class="line">#ifdef Py_USING_MEMORY_DEBUGGER</div><div class="line">/* Make this function last so gcc won't inline it since the definition is</div><div class="line"> * after the reference.</div><div class="line"> */</div><div class="line">int</div><div class="line">Py_ADDRESS_IN_RANGE(void *P, poolp pool)</div><div class="line">&#123;</div><div class="line">    uint arenaindex_temp = pool-&gt;arenaindex;</div><div class="line"></div><div class="line">    return arenaindex_temp &lt; maxarenas &amp;&amp;</div><div class="line">           (uptr)P - arenas[arenaindex_temp].address &lt; (uptr)ARENA_SIZE &amp;&amp;</div><div class="line">           arenas[arenaindex_temp].address != 0;</div><div class="line">&#125;</div><div class="line">#endifist</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(图片来自: &lt;a href=&quot;https://nodefe.com/implement-of-pymalloc-from-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodefe.com/implement-of-pym
    
    </summary>
    
      <category term="python源码剖析" scheme="http://fanchao01.github.io/blog/categories/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>requests的高级功能-认证机制与redirect机制</title>
    <link href="http://fanchao01.github.io/blog/2016/08/02/pythonlib-requests4/"/>
    <id>http://fanchao01.github.io/blog/2016/08/02/pythonlib-requests4/</id>
    <published>2016-08-02T07:00:00.000Z</published>
    <updated>2016-08-25T03:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="requests中的认证机制"><a href="#requests中的认证机制" class="headerlink" title="requests中的认证机制"></a>requests中的认证机制</h3><hr>
<p>用户可以通过<code>Session.request</code>接口传入<code>auth</code>参数指定用户名和密码。<code>auth</code>参数可以是<code>(username, password)</code>的数组；也可以是<code>HTTPBaiscAuth</code>类似的实例，只要支持调用即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">:param auth: (optional) Auth tuple <span class="keyword">or</span> callable to enable</div><div class="line">    Basic/Digest/Custom HTTP Auth.</div></pre></td></tr></table></figure>
<p>认证信息主要从多个方面来获取</p>
<ul>
<li>通过auth参数指定</li>
<li>否则，从URI中获取。（<a href="http://username:passwd@www.sina.com）" target="_blank" rel="external">http://username:passwd@www.sina.com）</a></li>
<li>否则，从Session.auth中获取。( 通过session.auth=(username,passwd)设置 )</li>
<li>否则，从.netrc中获取</li>
</ul>
<h3 id="netrc"><a href="#netrc" class="headerlink" title=".netrc"></a>.netrc</h3><p>requests也支持<code>.netrc</code>，<code>.netrc</code>用于记录访问的认证信息，具体的语法可以参考<a href="http://www.mavetju.org/unix/netrc.php" target="_blank" rel="external">这里</a>，大致语法如下。</p>
<h4 id="machine-definitions"><a href="#machine-definitions" class="headerlink" title="machine definitions"></a>machine definitions</h4><p>认证信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">machine ftp.freebsd.org</div><div class="line">	login anonymous</div><div class="line">	password edwin@mavetju.org</div><div class="line"></div><div class="line">machine myownmachine</div><div class="line">	login myusername</div><div class="line">	password mypassword</div></pre></td></tr></table></figure>
<h4 id="macro-definitions"><a href="#macro-definitions" class="headerlink" title="macro definitions"></a>macro definitions</h4><p>定义ftp bash登录后的执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">macdef uploadtest</div><div class="line">	<span class="built_in">cd</span> /pub/tests</div><div class="line">	bin</div><div class="line">	put filename.tar.gz</div><div class="line">	quit</div><div class="line"></div><div class="line">macdef dailyupload</div><div class="line">	<span class="built_in">cd</span> /pub/tests</div><div class="line">	bin</div><div class="line">	put daily-<span class="variable">$1</span>.tar.gz</div><div class="line">	quit</div></pre></td></tr></table></figure>
<h3 id="requests中的redirect机制"><a href="#requests中的redirect机制" class="headerlink" title="requests中的redirect机制"></a>requests中的redirect机制</h3><hr>
<p>当访问<code>www.sina.com</code>时，会发现requests中缓存了两个地址<code>www.sina.com</code>与<code>www.sina.com.cn</code>，因为前一个地址会被重定向到后一个地址上。当我们用curl工具直接访问会发现，该地址返回了<code>301 Moved Permanently</code>以及<code>Location: http://www.sina.com.cn</code>。于是<code>requests</code>会自动对重定向地址再次发起请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ curl -i -X GET <span class="string">'http://www.sina.com'</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100   178  100   178    0     0    712      0 --:--:-- --:--:-- --:--:--   712HTTP/1.1 301 Moved Permanently</div><div class="line">Server: nginx</div><div class="line">Date: Tue, 02 Aug 2016 05:20:52 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Location: http://www.sina.com.cn/       <span class="comment"># 重定向后的地址</span></div><div class="line">Expires: Tue, 02 Aug 2016 05:22:52 GMT</div><div class="line">Cache-Control: max-age=120</div><div class="line">Age: 96</div><div class="line">Content-Length: 178</div><div class="line">X-Cache: HIT from xd33-78.sina.com.cn</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;      <span class="comment"># status_code和Moved Permanently</span></div><div class="line">&lt;body bgcolor=<span class="string">"white"</span>&gt;</div><div class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</div><div class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>重定向后的访问逻辑主要在<code>SessionRedirectMixin</code>中（具体的请求过程分析参见<a href="http://fanchao01.github.io/blog/2016/07/29/pythonlib-requests1.html">这里</a>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">resp = requests.get(<span class="string">'http://www.sina.com'</span>)</div><div class="line"></div><div class="line">resp   <span class="comment"># 返回重定向后的真实访问请求response</span></div><div class="line">Out[<span class="number">10</span>]: &lt;Response [<span class="number">200</span>]&gt;</div><div class="line"></div><div class="line">resp.url</div><div class="line">Out[<span class="number">11</span>]: <span class="string">u'http://www.sina.com.cn/'</span></div><div class="line"></div><div class="line">resp.history</div><div class="line">Out[<span class="number">12</span>]: [&lt;Response [<span class="number">301</span>]&gt;]   <span class="comment"># 多个重定向的访问response</span></div><div class="line"></div><div class="line">resp.history[<span class="number">0</span>].url</div><div class="line">Out[<span class="number">13</span>]: <span class="string">u'http://www.sina.com/'</span>  <span class="comment"># 最初传入的地址。</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionRedirectMixin</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolve_redirects</span><span class="params">(self, resp, req, stream=False, timeout=None,</span></span></div><div class="line">                          verify=True, cert=None, proxies=None, **adapter_kwargs):</div><div class="line">        <span class="string">"""Receives a Response. Returns a generator of Responses."""</span></div><div class="line"></div><div class="line">        i = <span class="number">0</span></div><div class="line">        hist = [] <span class="comment"># keep track of history</span></div><div class="line">        </div><div class="line">        <span class="comment"># is_redirect就是返回的code in [301, 302, 303, 307, 308] 且headers中有Location字段</span></div><div class="line">        <span class="keyword">while</span> resp.is_redirect:</div><div class="line">            prepared_request = req.copy()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span>:</div><div class="line">                <span class="comment"># Update history and keep track of redirects.</span></div><div class="line">                hist.append(resp)</div><div class="line">                new_hist = list(hist)</div><div class="line">                resp.history = new_hist</div><div class="line"></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                resp.content  <span class="comment"># Consume socket so it can be released</span></div><div class="line">            <span class="keyword">except</span> (ChunkedEncodingError, ContentDecodingError, RuntimeError):</div><div class="line">                resp.raw.read(decode_content=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> i &gt;= self.max_redirects:    <span class="comment"># 默认值为30</span></div><div class="line">                <span class="keyword">raise</span> TooManyRedirects(<span class="string">'Exceeded %s redirects.'</span> % self.max_redirects, response=resp)</div><div class="line"></div><div class="line">            <span class="comment"># Release the connection back into the pool.</span></div><div class="line">            resp.close()</div><div class="line"></div><div class="line">            url = resp.headers[<span class="string">'location'</span>]   <span class="comment"># Location地址</span></div><div class="line"></div><div class="line">            <span class="comment"># Handle redirection without scheme (see: RFC 1808 Section 4)</span></div><div class="line">            <span class="keyword">if</span> url.startswith(<span class="string">'//'</span>):</div><div class="line">                parsed_rurl = urlparse(resp.url)</div><div class="line">                url = <span class="string">'%s:%s'</span> % (parsed_rurl.scheme, url)</div><div class="line"></div><div class="line">            <span class="comment"># The scheme should be lower case...</span></div><div class="line">            parsed = urlparse(url)</div><div class="line">            url = parsed.geturl()</div><div class="line"></div><div class="line">            <span class="comment"># Facilitate relative 'location' headers, as allowed by RFC 7231.</span></div><div class="line">            <span class="comment"># (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')</span></div><div class="line">            <span class="comment"># Compliant with RFC3986, we percent encode the url.</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> parsed.netloc:</div><div class="line">                url = urljoin(resp.url, requote_uri(url))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                url = requote_uri(url)</div><div class="line"></div><div class="line">            prepared_request.url = to_native_string(url)</div><div class="line">            <span class="comment"># Cache the url, unless it redirects to itself.</span></div><div class="line">            <span class="keyword">if</span> resp.is_permanent_redirect <span class="keyword">and</span> req.url != prepared_request.url:</div><div class="line">                self.redirect_cache[req.url] = prepared_request.url</div><div class="line"></div><div class="line">            self.rebuild_method(prepared_request, resp)</div><div class="line"></div><div class="line">            <span class="comment"># https://github.com/kennethreitz/requests/issues/1084</span></div><div class="line">            <span class="keyword">if</span> resp.status_code <span class="keyword">not</span> <span class="keyword">in</span> (codes.temporary_redirect, codes.permanent_redirect):</div><div class="line">                <span class="keyword">if</span> <span class="string">'Content-Length'</span> <span class="keyword">in</span> prepared_request.headers:</div><div class="line">                    <span class="keyword">del</span> prepared_request.headers[<span class="string">'Content-Length'</span>]</div><div class="line"></div><div class="line">                prepared_request.body = <span class="keyword">None</span></div><div class="line"></div><div class="line">            headers = prepared_request.headers</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">del</span> headers[<span class="string">'Cookie'</span>]</div><div class="line">            <span class="keyword">except</span> KeyError:</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line">            <span class="comment"># Extract any cookies sent on the response to the cookiejar</span></div><div class="line">            <span class="comment"># in the new request. Because we've mutated our copied prepared</span></div><div class="line">            <span class="comment"># request, use the old one that we haven't yet touched.</span></div><div class="line">            extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)</div><div class="line">            prepared_request._cookies.update(self.cookies)</div><div class="line">            prepared_request.prepare_cookies(prepared_request._cookies)</div><div class="line"></div><div class="line">            <span class="comment"># Rebuild auth and proxy information.</span></div><div class="line">            proxies = self.rebuild_proxies(prepared_request, proxies)</div><div class="line">            self.rebuild_auth(prepared_request, resp)</div><div class="line"></div><div class="line">            <span class="comment"># Override the original request.</span></div><div class="line">            req = prepared_request</div><div class="line">            <span class="comment">#　重新发起send操作。</span></div><div class="line">            resp = self.send(</div><div class="line">                req,</div><div class="line">                stream=stream,</div><div class="line">                timeout=timeout,</div><div class="line">                verify=verify,</div><div class="line">                cert=cert,</div><div class="line">                proxies=proxies,</div><div class="line">                allow_redirects=<span class="keyword">False</span>,</div><div class="line">                **adapter_kwargs</div><div class="line">            )</div><div class="line"></div><div class="line">            extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)</div><div class="line"></div><div class="line">            i += <span class="number">1</span></div><div class="line">            <span class="keyword">yield</span> resp</div></pre></td></tr></table></figure>
<p>一般情况下只有指定的方法能够重定向</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">允许重定向： GET <span class="keyword">OPTIONS</span> HEAD </div><div class="line">不能重定向：POST <span class="keyword">PUT</span> PATCH DELETE</div></pre></td></tr></table></figure>
<p>根据重定向返回的状态码和访问方法，对重定向地址的访问需要修改访问方法</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原访问方法   返回的状态码  状态码名字     新访问方法</div><div class="line"><span class="keyword">GET</span>/OPTIONS     <span class="number">303</span>      see_other      <span class="keyword">GET</span></div><div class="line"><span class="keyword">GET</span>/OPTIONS     <span class="number">302</span>      found          <span class="keyword">GET</span></div><div class="line">POST            <span class="number">301</span>      moved          <span class="keyword">GET</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;requests中的认证机制&quot;&gt;&lt;a href=&quot;#requests中的认证机制&quot; class=&quot;headerlink&quot; title=&quot;requests中的认证机制&quot;&gt;&lt;/a&gt;requests中的认证机制&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;用户可以通过&lt;code&gt;Sessi
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="requests" scheme="http://fanchao01.github.io/blog/categories/python/requests/"/>
    
    
  </entry>
  
  <entry>
    <title>requests的高级功能-重试机制</title>
    <link href="http://fanchao01.github.io/blog/2016/07/30/pythonlib-request3/"/>
    <id>http://fanchao01.github.io/blog/2016/07/30/pythonlib-request3/</id>
    <published>2016-07-30T07:00:00.000Z</published>
    <updated>2016-08-25T03:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="requests中的重试"><a href="#requests中的重试" class="headerlink" title="requests中的重试"></a>requests中的重试</h3><hr>
<p>通过之前的<a href="http://fanchao01.github.io/blog/2016/07/29/pythonlib-requests1.html">流程图</a>知道<code>max_retries</code>参数在<code>HTTPAdapter</code>初始化时设置。可以传递整数或者传递<code>urllib3.util.Retry</code>实例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPAdapter</span><span class="params">(BaseAdapter)</span>:</span></div><div class="line">    <span class="string">"""The built-in HTTP Adapter for urllib3.</span></div><div class="line"></div><div class="line">    :param max_retries: The maximum number of retries each connection</div><div class="line">        should attempt. Note, this applies only to failed DNS lookups, socket</div><div class="line">        connections and connection timeouts, never to requests where data has</div><div class="line">        made it to the server. By default, Requests does not retry failed</div><div class="line">        connections. If you need granular control over the conditions under</div><div class="line">        which we retry a request, import urllib3's ``Retry`` class and pass</div><div class="line">        that instead.</div><div class="line"></div><div class="line">    Usage::</div><div class="line"></div><div class="line">      &gt;&gt;&gt; import requests</div><div class="line">      &gt;&gt;&gt; s = requests.Session()</div><div class="line">      &gt;&gt;&gt; a = requests.adapters.HTTPAdapter(max_retries=3)</div><div class="line">      &gt;&gt;&gt; s.mount('http://', a)</div><div class="line">    """</div><div class="line">    __attrs__ = [<span class="string">'max_retries'</span>, <span class="string">'config'</span>, <span class="string">'_pool_connections'</span>, <span class="string">'_pool_maxsize'</span>,</div><div class="line">                 <span class="string">'_pool_block'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pool_connections=DEFAULT_POOLSIZE,</span></span></div><div class="line">                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,</div><div class="line">                 pool_block=DEFAULT_POOLBLOCK):</div><div class="line">        <span class="keyword">if</span> max_retries == DEFAULT_RETRIES:</div><div class="line">            self.max_retries = Retry(<span class="number">0</span>, read=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.max_retries = Retry.from_int(max_retries)</div></pre></td></tr></table></figure>
<p><code>Retry</code>的设计比较简单,在<code>HTTPConnectionPool</code>中根据返回的异常和访问方法，区分是那种链接失败(connect? read?)，然后减少对应的值即可。然后再判断是否所有的操作重试都归零，归零则报<code>MaxRetries</code>异常即可。不过对于每次重试之间的间隔使用了一个简单的<code>backoff</code>算法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Retry</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">""" Retry configuration.</span></div><div class="line"></div><div class="line">    Each retry attempt will create a new Retry object with updated values, so</div><div class="line">    they can be safely reused.</div><div class="line"></div><div class="line">    Retries can be defined as a default for a pool::</div><div class="line"></div><div class="line">        retries = Retry(connect=5, read=2, redirect=5)</div><div class="line">        http = PoolManager(retries=retries)</div><div class="line">        response = http.request('GET', 'http://example.com/')</div><div class="line"></div><div class="line">    Or per-request (which overrides the default for the pool)::</div><div class="line"></div><div class="line">        response = http.request('GET', 'http://example.com/', retries=Retry(10))</div><div class="line"></div><div class="line">    Retries can be disabled by passing ``False``::</div><div class="line"></div><div class="line">        response = http.request('GET', 'http://example.com/', retries=False)</div><div class="line"></div><div class="line">    Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless</div><div class="line">    retries are disabled, in which case the causing exception will be raised.</div><div class="line"></div><div class="line">    :param int total:</div><div class="line">        Total number of retries to allow. Takes precedence over other counts.</div><div class="line"></div><div class="line">        Set to ``None`` to remove this constraint and fall back on other</div><div class="line">        counts. It's a good idea to set this to some sensibly-high value to</div><div class="line">        account for unexpected edge cases and avoid infinite retry loops.</div><div class="line"></div><div class="line">        Set to ``0`` to fail on the first retry.</div><div class="line"></div><div class="line">        Set to ``False`` to disable and imply ``raise_on_redirect=False``.</div><div class="line"></div><div class="line">    ....</div><div class="line">    </div><div class="line">    :param iterable method_whitelist:</div><div class="line">        Set of uppercased HTTP method verbs that we should retry on.</div><div class="line"></div><div class="line">        By default, we only retry on methods which are considered to be</div><div class="line">        indempotent (multiple requests with the same parameters end with the</div><div class="line">        same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.</div><div class="line"></div><div class="line">    :param iterable status_forcelist:</div><div class="line">        A set of HTTP status codes that we should force a retry on.</div><div class="line"></div><div class="line">        By default, this is disabled with ``None``.</div><div class="line"></div><div class="line">    :param float backoff_factor:</div><div class="line">        A backoff factor to apply between attempts. urllib3 will sleep for::</div><div class="line"></div><div class="line">            &#123;backoff factor&#125; * (2 ^ (&#123;number of total retries&#125; - 1))</div><div class="line"></div><div class="line">        seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep</div><div class="line">        for [0.1s, 0.2s, 0.4s, ...] between retries. It will never be longer</div><div class="line">        than :attr:`Retry.BACKOFF_MAX`.</div><div class="line"></div><div class="line">        By default, backoff is disabled (set to 0).</div><div class="line">        </div><div class="line">    """</div><div class="line"></div><div class="line">    DEFAULT_METHOD_WHITELIST = frozenset([</div><div class="line">        <span class="string">'HEAD'</span>, <span class="string">'GET'</span>, <span class="string">'PUT'</span>, <span class="string">'DELETE'</span>, <span class="string">'OPTIONS'</span>, <span class="string">'TRACE'</span>])</div><div class="line"></div><div class="line">    <span class="comment">#: Maximum backoff time.</span></div><div class="line">    BACKOFF_MAX = <span class="number">120</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, total=<span class="number">10</span>, connect=None, read=None, redirect=None,</span></span></div><div class="line">                 method_whitelist=DEFAULT_METHOD_WHITELIST, status_forcelist=None,</div><div class="line">                 backoff_factor=<span class="number">0</span>, raise_on_redirect=True, raise_on_status=True,</div><div class="line">                 _observed_errors=<span class="number">0</span>):</div><div class="line"></div><div class="line">        self.total = total</div><div class="line">        self.connect = connect</div><div class="line">        self.read = read</div><div class="line"></div><div class="line">        <span class="keyword">if</span> redirect <span class="keyword">is</span> <span class="keyword">False</span> <span class="keyword">or</span> total <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">            redirect = <span class="number">0</span></div><div class="line">            raise_on_redirect = <span class="keyword">False</span></div><div class="line"></div><div class="line">        self.redirect = redirect</div><div class="line">        self.status_forcelist = status_forcelist <span class="keyword">or</span> set()</div><div class="line">        self.method_whitelist = method_whitelist</div><div class="line">        self.backoff_factor = backoff_factor</div><div class="line">        self.raise_on_redirect = raise_on_redirect</div><div class="line">        self.raise_on_status = raise_on_status</div><div class="line">        self._observed_errors = _observed_errors  <span class="comment"># <span class="doctag">TODO:</span> use .history instead?</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_backoff_time</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Formula for computing the current backoff</span></div><div class="line"></div><div class="line">        :rtype: float</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self._observed_errors &lt;= <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="comment"># 重试算法， _observed_erros就是第几次重试，每次失败这个值就+1.</span></div><div class="line">        <span class="comment"># backoff_factor = 0.1, 重试的间隔为[0.1, 0.2, 0.4, 0.8, ..., BACKOFF_MAX(120)]</span></div><div class="line">        backoff_value = self.backoff_factor * (<span class="number">2</span> ** (self._observed_errors - <span class="number">1</span>))</div><div class="line">        <span class="keyword">return</span> min(self.BACKOFF_MAX, backoff_value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Sleep between retry attempts using an exponential backoff.</span></div><div class="line"></div><div class="line">        By default, the backoff factor is 0 and this method will return</div><div class="line">        immediately.</div><div class="line">        """</div><div class="line">        backoff = self.get_backoff_time()</div><div class="line">        <span class="keyword">if</span> backoff &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        time.sleep(backoff)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_forced_retry</span><span class="params">(self, method, status_code)</span>:</span></div><div class="line">        <span class="string">""" Is this method/status code retryable? (Based on method/codes whitelists)</span></div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self.method_whitelist <span class="keyword">and</span> method.upper() <span class="keyword">not</span> <span class="keyword">in</span> self.method_whitelist:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> self.status_forcelist <span class="keyword">and</span> status_code <span class="keyword">in</span> self.status_forcelist</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># For backwards compatibility (equivalent to pre-v1.9):</span></div><div class="line">Retry.DEFAULT = Retry(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>使用重试有几点需要注意:</p>
<ul>
<li>如果使用<code>requests.get</code>等简单形式，默认会重试3次</li>
<li>重试只有在DNS解析错误、链接错误、链接超时等异常是才重试。在比如读取超时、写超时、HTTP协议错误等不会重试</li>
<li>使用重试会导致返回的错误为MaxRetriesError，而不是确切的异常。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;requests中的重试&quot;&gt;&lt;a href=&quot;#requests中的重试&quot; class=&quot;headerlink&quot; title=&quot;requests中的重试&quot;&gt;&lt;/a&gt;requests中的重试&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;通过之前的&lt;a href=&quot;http://fanc
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="requests" scheme="http://fanchao01.github.io/blog/categories/python/requests/"/>
    
    
  </entry>
  
  <entry>
    <title>requests的高级功能-超时时间</title>
    <link href="http://fanchao01.github.io/blog/2016/07/30/pythonlib-request2/"/>
    <id>http://fanchao01.github.io/blog/2016/07/30/pythonlib-request2/</id>
    <published>2016-07-30T07:00:00.000Z</published>
    <updated>2016-08-25T03:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="requests的高级功能"><a href="#requests的高级功能" class="headerlink" title="requests的高级功能"></a>requests的高级功能</h2><hr>
<p>如果简单的使用requests，会发现（requesets.get..)使用了默认参数的<code>HTTPAdapter</code>,因此所有由<code>HTTPAdapter</code>初始化参数指定的功能都没有办法使用，例如：重试、缓存池大小、缓存连接池大小、缓存池是否堵塞等。当然，因为<code>requests.get</code>方式只会发起一次HTTP请求，所以缓存相关的都没有设置的必要。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># requests.sessions.Session</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span><span class="params">(SessionRedirectMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        ....</div><div class="line">        self.adapters = OrderedDict()</div><div class="line">        self.mount(<span class="string">'https://'</span>, HTTPAdapter())</div><div class="line">        self.mount(<span class="string">'http://'</span>, HTTPAdapter())</div><div class="line">        </div><div class="line"></div><div class="line"><span class="comment"># requests.adapters.HTTPAdapter</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPAdapter</span><span class="params">(BaseAdapter)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pool_connections=DEFAULT_POOLSIZE,</span></span></div><div class="line">                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,</div><div class="line">                 pool_block=DEFAULT_POOLBLOCK):</div></pre></td></tr></table></figure>
<h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><p>超时时间可以通过timeout参数指定,可以详细为(connect_timeout, read_timeout)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">        :param timeout: (optional) How long to wait for the server to send</div><div class="line">            data before giving up, as a float, or a :ref:`(connect timeout,</div><div class="line">            read timeout) &lt;timeouts&gt;` tuple.</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>通过<a href="http://fanchao01.github.io/blog/2016/07/29/pythonlib-requests1.html">流程图</a>可以看到，传递的timeout参数一直进入到<code>HTTPAdapter.send</code>内。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># requests.adapters.HTTPAdapter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None)</span>:</span></div><div class="line">        ...</div><div class="line">        <span class="keyword">if</span> isinstance(timeout, tuple):</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                connect, read = timeout</div><div class="line">                <span class="comment"># timout被实例化为</span></div><div class="line">                timeout = TimeoutSauce(connect=connect, read=read)</div><div class="line">            <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">                <span class="comment"># this may raise a string formatting error.</span></div><div class="line">                err = (<span class="string">"Invalid timeout &#123;0&#125;. Pass a (connect, read) "</span></div><div class="line">                       <span class="string">"timeout tuple, or a single float to set "</span></div><div class="line">                       <span class="string">"both timeouts to the same value"</span>.format(timeout))</div><div class="line">                <span class="keyword">raise</span> ValueError(err)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            timeout = TimeoutSauce(connect=timeout, read=timeout)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunked:</div><div class="line">                resp = conn.urlopen(</div><div class="line">                    method=request.method,</div><div class="line">                    url=url,</div><div class="line">                    body=request.body,</div><div class="line">                    headers=request.headers,</div><div class="line">                    redirect=<span class="keyword">False</span>,</div><div class="line">                    assert_same_host=<span class="keyword">False</span>,</div><div class="line">                    preload_content=<span class="keyword">False</span>,</div><div class="line">                    decode_content=<span class="keyword">False</span>,</div><div class="line">                    retries=self.max_retries,</div><div class="line">                    timeout=timeout    <span class="comment"># 传入HTTPConnectionPool.urlopen</span></div><div class="line">                )</div><div class="line">                </div><div class="line"><span class="comment"># requests.packages.urllib3.util.timeout.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timeout</span><span class="params">(object)</span>:</span></div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, total=None, connect=_Default, read=_Default)</span>:</span></div><div class="line">        self._connect = self._validate_timeout(connect, <span class="string">'connect'</span>)</div><div class="line">        self._read = self._validate_timeout(read, <span class="string">'read'</span>)</div><div class="line">        self.total = self._validate_timeout(total, <span class="string">'total'</span>)</div><div class="line">        self._start_connect = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_connect_duration</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Gets the time elapsed since the call to :meth:`start_connect`.</span></div><div class="line"></div><div class="line">        :return: Elapsed time.</div><div class="line">        :rtype: float</div><div class="line">        :raises urllib3.exceptions.TimeoutStateError: if you attempt</div><div class="line">            to get duration for a timer that hasn't been started.</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self._start_connect <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> TimeoutStateError(<span class="string">"Can't get connect duration for timer "</span></div><div class="line">                                    <span class="string">"that has not started."</span>)</div><div class="line">        <span class="keyword">return</span> current_time() - self._start_connect</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_timeout</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> (self.total <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span></div><div class="line">                self.total <span class="keyword">is</span> <span class="keyword">not</span> self.DEFAULT_TIMEOUT <span class="keyword">and</span></div><div class="line">                self._read <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span></div><div class="line">                self._read <span class="keyword">is</span> <span class="keyword">not</span> self.DEFAULT_TIMEOUT):</div><div class="line">            <span class="comment"># In case the connect timeout has not yet been established.</span></div><div class="line">            <span class="keyword">if</span> self._start_connect <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> self._read</div><div class="line">            <span class="comment"># 如果值指定了total，则read_timeout是链接后剩余的事件</span></div><div class="line">            <span class="keyword">return</span> max(<span class="number">0</span>, min(self.total - self.get_connect_duration(),</div><div class="line">                              self._read))</div><div class="line">        <span class="keyword">elif</span> self.total <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> self.total <span class="keyword">is</span> <span class="keyword">not</span> self.DEFAULT_TIMEOUT:</div><div class="line">            <span class="keyword">return</span> max(<span class="number">0</span>, self.total - self.get_connect_duration())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self._read</div></pre></td></tr></table></figure>
<p>然后实例化后的<code>timeout</code>传递给<code>HTTPConnectionPool</code>,其中的<code>connect_timeout</code>设置为<code>conn.timeout</code>然后一直传递到<code>socket</code>中，通过<code>socket.settimeout</code>设置起效。需要注意<code>socket</code>是在设置参数之后再执行的<code>bind</code>-&gt;<code>connect</code>操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># lib/socket.py</span></div><div class="line"></div><div class="line">_GLOBAL_DEFAULT_TIMEOUT = object()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_connection</span><span class="params">(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,</span></span></div><div class="line">                      source_address=None):</div><div class="line"></div><div class="line">    host, port = address</div><div class="line">    err = <span class="keyword">None</span></div><div class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> getaddrinfo(host, port, <span class="number">0</span>, SOCK_STREAM):</div><div class="line">        af, socktype, proto, canonname, sa = res</div><div class="line">        sock = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sock = socket(af, socktype, proto)</div><div class="line">            <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> _GLOBAL_DEFAULT_TIMEOUT:</div><div class="line">                sock.settimeout(timeout)    </div><div class="line">            <span class="keyword">if</span> source_address:</div><div class="line">                sock.bind(source_address)</div><div class="line">            sock.connect(sa)</div><div class="line">            <span class="keyword">return</span> sock</div><div class="line"></div><div class="line">        <span class="keyword">except</span> error <span class="keyword">as</span> _:</div><div class="line">            err = _</div><div class="line">            <span class="keyword">if</span> sock <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                sock.close()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> err</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">raise</span> error(<span class="string">"getaddrinfo returns an empty list"</span>)</div></pre></td></tr></table></figure>
<p>其中的<code>read_timeout</code>在<code>HTTPConnectionPool</code>中设置。通过代码可以看到<code>socket.settimeout</code>设置的是<code>socket</code>所有操作的超时时间，在不同的阶段调用该函数就设置了接下来操作的超时时间，<code>settimeout</code> -&gt; <code>bind</code> -&gt; <code>connect</code> -&gt; <code>settimeout</code> -&gt; <code>read</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># requests.packages.urllib3.connectionpool.py</div><div class="line"></div><div class="line">class HTTPConnectionPool</div><div class="line"></div><div class="line">    def _make_request(...):</div><div class="line">        ....</div><div class="line">        read_timeout = timeout_obj.read_timeout</div><div class="line"></div><div class="line">        # App Engine doesn't have a sock attr</div><div class="line">        if getattr(conn, 'sock', None):</div><div class="line">            # In Python 3 socket.py will catch EAGAIN and return None when you</div><div class="line">            # try and read into the file pointer created by http.client, which</div><div class="line">            # instead raises a BadStatusLine exception. Instead of catching</div><div class="line">            # the exception and assuming all BadStatusLine exceptions are read</div><div class="line">            # timeouts, check for a zero timeout before making the request.</div><div class="line">            if read_timeout == 0:</div><div class="line">                raise ReadTimeoutError(</div><div class="line">                    self, url, "Read timed out. (read timeout=%s)" % read_timeout)</div><div class="line">            if read_timeout is Timeout.DEFAULT_TIMEOUT:</div><div class="line">                conn.sock.settimeout(socket.getdefaulttimeout())</div><div class="line">            else:  # None or a value</div><div class="line">                # 同样通过settimeout函数设置，不过此时已经connect完了，接下来就只有read操作</div><div class="line">                conn.sock.settimeout(read_timeout)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;requests的高级功能&quot;&gt;&lt;a href=&quot;#requests的高级功能&quot; class=&quot;headerlink&quot; title=&quot;requests的高级功能&quot;&gt;&lt;/a&gt;requests的高级功能&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;如果简单的使用requests，会发现（r
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="requests" scheme="http://fanchao01.github.io/blog/categories/python/requests/"/>
    
    
  </entry>
  
  <entry>
    <title>requests库源码剖析</title>
    <link href="http://fanchao01.github.io/blog/2016/07/29/pythonlib-requests1/"/>
    <id>http://fanchao01.github.io/blog/2016/07/29/pythonlib-requests1/</id>
    <published>2016-07-29T07:00:00.000Z</published>
    <updated>2016-08-25T03:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="requests-HTTP-for-humans"><a href="#requests-HTTP-for-humans" class="headerlink" title="requests: HTTP for humans"></a>requests: HTTP for humans</h2><hr>
<p>requests以简洁、human-friendly著称，谁用谁知道。本文从源码角度剖析requests，先从数据结构入手，再到整个HTTP访问流程，然后着重讲解requests中用于处理netrc、redirects、cache等用到的技术。</p>
<h2 id="requests的数据结构图"><a href="#requests的数据结构图" class="headerlink" title="requests的数据结构图"></a>requests的数据结构图</h2><hr>
<p>先来个最简单的使用例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">resp = requests.get(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">Out[<span class="number">75</span>]</div><div class="line"></div><div class="line">resp.status_code</div><div class="line">Out[<span class="number">76</span>]: <span class="number">200</span></div><div class="line"></div><div class="line">resp.content[:<span class="number">10</span>]</div><div class="line">Out[<span class="number">77</span>]: <span class="string">'&lt;!DOCTYPE '</span></div><div class="line"></div><div class="line">resp.headers[<span class="string">'content-type'</span>]</div><div class="line">Out[<span class="number">79</span>]: <span class="string">'text/html; charset=utf-8'</span></div><div class="line"></div><div class="line">resp.reason</div><div class="line">Out[<span class="number">80</span>]: <span class="string">'OK'</span></div></pre></td></tr></table></figure>
<p>为了便于探寻requests中的数据结构再稍微复杂点：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">session=requests.<span class="symbol">Session</span>()</div><div class="line">out[<span class="number">2</span>]:</div><div class="line"></div><div class="line">session.get(<span class="string">'http://www.baidu.com'</span>)</div><div class="line"><span class="symbol">Out</span>[<span class="number">3</span>]: &lt;<span class="symbol">Response</span> [<span class="number">200</span>]&gt;</div><div class="line"></div><div class="line">session.get(<span class="string">'https://www.baidu.com'</span>)</div><div class="line"><span class="symbol">Out</span>[<span class="number">4</span>]: &lt;<span class="symbol">Response</span> [<span class="number">200</span>]&gt;</div><div class="line"></div><div class="line">session.get(<span class="string">'http://www.sina.com'</span>)</div><div class="line"><span class="symbol">Out</span>[<span class="number">5</span>]: &lt;<span class="symbol">Response</span> [<span class="number">200</span>]&gt;</div></pre></td></tr></table></figure>
<p>实例化一个<code>Session</code>，然后访问多次，因此可以让requests本身进行缓存等操作，其对应的总体结构图如下：</p>
<p><img src="/blog/images/requests_structure.jpg" alt="image"></p>
<p><code>requests</code>使用了2层缓存技术：</p>
<ul>
<li><p>第一层<code>poolmanager</code>缓存<code>HTTPConnectionPool</code>。<code>poolmanager</code>缓存多个链接池，以(scheme, host, port)作为key。该缓存是一个<code>RecentlyUsedContainer</code>（底层使用的OrderedDict），当需要缓存的缓存池过多时淘汰最老的<code>HTTPConnectionPool</code>。最大缓存数量可以通过参数<code>pool_maxsize</code>设定，默认为<code>requests.adapters.DEFAULT_POOLSIZE</code> 10个。另外这也是第二层缓存中默认的最大缓存链接的个数。</p>
</li>
<li><p>第二层<code>HTTPConnectionPool</code>缓存<code>HTTPConnection</code>。<code>HTTPConnectionPool</code>缓存多个链接。该缓存底层使用<code>LifoQueue</code>后入先出队列，尽量重复使用同一个链接。最大的缓存数量默认也是10个。不过有一个特殊的参数<code>block</code>需要注意，当其为True时 <code>HTTPConnectionPool</code>对同一个(scheme, host, port)的访问建立的最多链接数量即为最大缓存数量，获取链接时需要堵塞等待空闲的链接。</p>
</li>
</ul>
<h2 id="requests的操作流程"><a href="#requests的操作流程" class="headerlink" title="requests的操作流程"></a>requests的操作流程</h2><hr>
<p>我们从最简单的<code>get</code>操作入手，看一看整个流程是如何完成的，其流程图如下</p>
<p><img src="/blog/images/requests_flow.jpg" alt="image"></p>
<p>流程中需要注意，对于每层函数来说其中的<code>conn</code>都指的是下层数据结构(实例)。<code>HTTPAdapter</code>中的<code>conn</code>对应的数据结构是<code>HTTPConnectionPool</code>；<code>HTTPConnectionPool</code>中的<code>conn</code>是<code>HTTPConnection</code>；<code>HTTPCOnnection</code>中的<code>conn</code>是<code>socket</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;requests-HTTP-for-humans&quot;&gt;&lt;a href=&quot;#requests-HTTP-for-humans&quot; class=&quot;headerlink&quot; title=&quot;requests: HTTP for humans&quot;&gt;&lt;/a&gt;requests: HTT
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="requests" scheme="http://fanchao01.github.io/blog/categories/python/requests/"/>
    
    
  </entry>
  
  <entry>
    <title>Openstack之Eventlet</title>
    <link href="http://fanchao01.github.io/blog/2016/02/27/openstack-eventlet2/"/>
    <id>http://fanchao01.github.io/blog/2016/02/27/openstack-eventlet2/</id>
    <published>2016-02-27T08:00:00.000Z</published>
    <updated>2016-08-25T04:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eventlet的Hub"><a href="#Eventlet的Hub" class="headerlink" title="Eventlet的Hub"></a>Eventlet的Hub</h2><hr>
<p>所有基于<code>epoll</code>(多路复用)的框架，总有一个事件循环处理中心，一般称为<code>Hub</code>。<code>Eventlet</code>中的<code>Hub</code>不仅是所有事件监听和处理的中心，也是greenlet调度的中心。下面看看Hub的事件处理逻辑。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/hubs/hub.py</span></div><div class="line"><span class="comment"># BaseHub</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, *a, **kw)</span>:</span></div><div class="line">        <span class="string">"""Run the runloop until abort is called.</span></div><div class="line">        """</div><div class="line">        <span class="comment"># accept and discard variable arguments because they will be</span></div><div class="line">        <span class="comment"># supplied if other greenlets have run and exited before the</span></div><div class="line">        <span class="comment"># hub's greenlet gets a chance to run</span></div><div class="line">        <span class="keyword">if</span> self.running:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"Already running!"</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.running = <span class="keyword">True</span></div><div class="line">            self.stopping = <span class="keyword">False</span></div><div class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.stopping:</div><div class="line">                <span class="comment"># 由于垃圾回收，fd可能重新使用，在重新使用的时候通过`mark_as_reopend` -&gt; `_obsolete`</span></div><div class="line">                <span class="comment"># 将原来可能存在的监听事件删除。并且将对应的监听事件回调的tb设置为IOClosed异常。</span></div><div class="line">                <span class="keyword">while</span> self.closed:</div><div class="line">                    <span class="comment"># We ditch all of these first.</span></div><div class="line">                    self.close_one()</div><div class="line">                <span class="comment"># 将timer按照到期时间排序</span></div><div class="line">                self.prepare_timers()</div><div class="line">                <span class="keyword">if</span> self.debug_blocking:</div><div class="line">                    self.block_detect_pre()</div><div class="line">                <span class="comment"># 触发定时的事件</span></div><div class="line">                self.fire_timers(self.clock())</div><div class="line">                <span class="keyword">if</span> self.debug_blocking:</div><div class="line">                    self.block_detect_post()</div><div class="line">                <span class="comment"># 将剩下的没有触发的定时事件排序，主要是为了后面找到sleep的时长</span></div><div class="line">                self.prepare_timers()</div><div class="line">                <span class="comment"># wait的时间，取最快到期的定时事件的时间戳</span></div><div class="line">                wakeup_when = self.sleep_until()</div><div class="line">                <span class="keyword">if</span> wakeup_when <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                    sleep_time = self.default_sleep()</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    sleep_time = wakeup_when - self.clock()</div><div class="line">                <span class="keyword">if</span> sleep_time &gt; <span class="number">0</span>:</div><div class="line">                    <span class="comment"># 由具体的平台决定实现(epoll）</span></div><div class="line">                    self.wait(sleep_time)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    self.wait(<span class="number">0</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.timers_canceled = <span class="number">0</span></div><div class="line">                <span class="keyword">del</span> self.timers[:]</div><div class="line">                <span class="keyword">del</span> self.next_timers[:]</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            self.running = <span class="keyword">False</span></div><div class="line">            self.stopping = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h3 id="定时事件"><a href="#定时事件" class="headerlink" title="定时事件"></a>定时事件</h3><p>总体来说，Hub处理两件事件。第一类是定时事件，每次循环中处理到期的事件。上面我们可以看到，Hub每次循环将<code>next_timer</code>中的定时事件进行排序，然后处理到期的定时事件。那么定时事件是如何添加到Hub中的呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/hubs/hub.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHub</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_timer</span><span class="params">(self, timer)</span>:</span></div><div class="line">        scheduled_time = self.clock() + timer.seconds</div><div class="line">        self.next_timers.append((scheduled_time, timer))</div><div class="line">        <span class="keyword">return</span> scheduled_time</div><div class="line">        </div><div class="line"><span class="comment"># eventlet/hubs/timer.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seconds, cb, *args, **kw)</span>:</span></div><div class="line">        <span class="string">"""Create a timer.</span></div><div class="line">            seconds: The minimum number of seconds to wait before calling</div><div class="line">            cb: The callback to call when the timer has expired</div><div class="line">            *args: The arguments to pass to cb</div><div class="line">            **kw: The keyword arguments to pass to cb</div><div class="line"></div><div class="line">        This timer will not be run unless it is scheduled in a runloop by</div><div class="line">        calling timer.schedule() or runloop.add_timer(timer).</div><div class="line">        """</div><div class="line">        self.seconds = seconds</div><div class="line">        self.tpl = cb, args, kw</div><div class="line">        self.called = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> _g_debug:</div><div class="line">            self.traceback = six.StringIO()</div><div class="line">            traceback.print_stack(file=self.traceback)</div><div class="line">     <span class="comment"># 按照id的大小进行排序</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> id(self) &lt; id(other)</div></pre></td></tr></table></figure>
<p>通过<code>add_timer</code>函数，将<code>Timer</code>的实例加入<code>next_timers</code>列表中。注意<code>Timer</code>中的时间是到期的相对时间长度，而<code>Hub</code>中记录的是绝对时间戳，因此<code>add_timer</code>做了一个转换。定时事件处理的逻辑：</p>
<ul>
<li>每次循环处理到期的定时事件</li>
<li>处理的顺序按照到期的事件由小到大处理</li>
<li>相同时间戳的事件按照添加的顺序（内存id）从小到大处理</li>
</ul>
<h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/hubs/poll.py</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self, seconds=None)</span>:</span></div><div class="line">        readers = self.listeners[READ]</div><div class="line">        writers = self.listeners[WRITE]</div><div class="line">        </div><div class="line">        <span class="comment"># 如果没有监听的事件，就休眠到第一个定时事件到期</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> readers <span class="keyword">and</span> <span class="keyword">not</span> writers:</div><div class="line">            <span class="keyword">if</span> seconds:</div><div class="line">                sleep(seconds)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 进行poll， 对应python的epoll.poll和C语言的epoll_wait</span></div><div class="line">            presult = self.do_poll(seconds)</div><div class="line">        <span class="keyword">except</span> (IOError, select.error) <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">if</span> get_errno(e) == errno.EINTR:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">raise</span></div><div class="line">        SYSTEM_EXCEPTIONS = self.SYSTEM_EXCEPTIONS</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.debug_blocking:</div><div class="line">            self.block_detect_pre()</div><div class="line"></div><div class="line">        <span class="comment"># Accumulate the listeners to call back to prior to</span></div><div class="line">        <span class="comment"># triggering any of them. This is to keep the set</span></div><div class="line">        <span class="comment"># of callbacks in sync with the events we've just</span></div><div class="line">        <span class="comment"># polled for. It prevents one handler from invalidating</span></div><div class="line">        <span class="comment"># another.</span></div><div class="line">        <span class="comment"># 处理满足监听条件的事件，执行对应的回调函数。</span></div><div class="line">        <span class="comment"># 如果不满足条件(例如，监听socket读事件但是当前socket不可读)，则对应的fileno，event不会在presult中</span></div><div class="line">        callbacks = set()</div><div class="line">        <span class="keyword">for</span> fileno, event <span class="keyword">in</span> presult:</div><div class="line">            <span class="keyword">if</span> event &amp; READ_MASK:</div><div class="line">                callbacks.add((readers.get(fileno, noop), fileno))</div><div class="line">            <span class="keyword">if</span> event &amp; WRITE_MASK:</div><div class="line">                callbacks.add((writers.get(fileno, noop), fileno))</div><div class="line">            <span class="keyword">if</span> event &amp; select.POLLNVAL:</div><div class="line">                self.remove_descriptor(fileno)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> event &amp; EXC_MASK:</div><div class="line">                callbacks.add((readers.get(fileno, noop), fileno))</div><div class="line">                callbacks.add((writers.get(fileno, noop), fileno))</div><div class="line">        <span class="comment"># 依次执行回调。因为epoll会按照fileno的大小排序返回，因此执行回调也是按照从小到大的顺序</span></div><div class="line">        <span class="keyword">for</span> listener, fileno <span class="keyword">in</span> callbacks:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                listener.cb(fileno)</div><div class="line">            <span class="keyword">except</span> SYSTEM_EXCEPTIONS:</div><div class="line">                <span class="keyword">raise</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                self.squelch_exception(fileno, sys.exc_info())</div><div class="line">                clear_sys_exc_info()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.debug_blocking:</div><div class="line">            self.block_detect_post()</div></pre></td></tr></table></figure>
<p>可以看到，对第二类监听事件的处理是通过epoll，每次循环返回一批满足条件的事件，然后依次执行回调函数。那么，监听事件是如何添加到Hub中的呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/hubs/epoll.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hub</span><span class="params">(poll.Hub)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clock=time.time)</span>:</span></div><div class="line">        BaseHub.__init__(self, clock)</div><div class="line">        self.poll = epoll()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># modify is required by select.epoll</span></div><div class="line">            self.modify = self.poll.modify</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            self.modify = self.poll.register</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, evtype, fileno, cb, tb, mac)</span>:</span></div><div class="line">        oldlisteners = bool(self.listeners[READ].get(fileno) <span class="keyword">or</span></div><div class="line">                            self.listeners[WRITE].get(fileno))</div><div class="line">                            </div><div class="line">        <span class="comment"># 添加监听事件到listeners或者writers中</span></div><div class="line">        <span class="comment"># 注意这里调用的是BaseHub.add, 直接绕过了poll.py中的Hub.add</span></div><div class="line">        listener = BaseHub.add(self, evtype, fileno, cb, tb, mac)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> oldlisteners:</div><div class="line">                <span class="comment"># Means we've added a new listener</span></div><div class="line">                self.register(fileno, new=<span class="keyword">True</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 注册监听的事件到 epoll上，相当于epoll_register</span></div><div class="line">                self.register(fileno, new=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> ex:    <span class="comment"># ignore EEXIST, #80</span></div><div class="line">            <span class="keyword">if</span> get_errno(ex) != errno.EEXIST:</div><div class="line">                <span class="keyword">raise</span></div><div class="line">        <span class="keyword">return</span> listener</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="comment"># eventlet/hubs/hub.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHub</span><span class="params">(object)</span>:</span></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, evtype, fileno, cb, tb, mark_as_closed)</span>:</span></div><div class="line">        <span class="string">""" Signals an intent to or write a particular file descriptor.</span></div><div class="line"></div><div class="line">        The *evtype* argument is either the constant READ or WRITE.</div><div class="line"></div><div class="line">        The *fileno* argument is the file number of the file of interest.</div><div class="line"></div><div class="line">        The *cb* argument is the callback which will be called when the file</div><div class="line">        is ready for reading/writing.</div><div class="line"></div><div class="line">        The *tb* argument is the throwback used to signal (into the greenlet)</div><div class="line">        that the file was closed.</div><div class="line"></div><div class="line">        The *mark_as_closed* is used in the context of the event hub to</div><div class="line">        prepare a Python object as being closed, pre-empting further</div><div class="line">        close operations from accidentally shutting down the wrong OS thread.</div><div class="line">        """</div><div class="line">        <span class="comment"># 初始化一个listener实例，这个实例保存监听的事件类型evtype、监听fd、回调函数cb，异常tb等</span></div><div class="line">        <span class="comment"># 最后将这 listener 按照类型放到 self.listeners中</span></div><div class="line">        <span class="comment"># self.listeners = &#123;'READ': &#123;1:listener1, 2:listener2&#125;, 'WRITE': &#123;3: listener3, ..&#125;&#125;</span></div><div class="line">        listener = self.lclass(evtype, fileno, cb, tb, mark_as_closed)</div><div class="line">        bucket = self.listeners[evtype]</div><div class="line">        <span class="keyword">if</span> fileno <span class="keyword">in</span> bucket:</div><div class="line">            <span class="keyword">if</span> g_prevent_multiple_readers:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(</div><div class="line">                    <span class="string">"Second simultaneous %s on fileno %s "</span></div><div class="line">                    <span class="string">"detected.  Unless you really know what you're doing, "</span></div><div class="line">                    <span class="string">"make sure that only one greenthread can %s any "</span></div><div class="line">                    <span class="string">"particular socket.  Consider using a pools.Pool. "</span></div><div class="line">                    <span class="string">"If you do know what you're doing and want to disable "</span></div><div class="line">                    <span class="string">"this error, call "</span></div><div class="line">                    <span class="string">"eventlet.debug.hub_prevent_multiple_readers(False) - MY THREAD=%s; "</span></div><div class="line">                    <span class="string">"THAT THREAD=%s"</span> % (</div><div class="line">                        evtype, fileno, evtype, cb, bucket[fileno]))</div><div class="line">            <span class="comment"># store off the second listener in another structure</span></div><div class="line">            self.secondaries[evtype].setdefault(fileno, []).append(listener)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            bucket[fileno] = listener</div><div class="line">        <span class="keyword">return</span> listener</div></pre></td></tr></table></figure>
<p>通过继承链<code>Hub-&gt;BaseHub</code>，将监听事件添加到<code>epoll</code>中并且在每次循环中处理满足监听条件的事件，执行回调函数。我们知道，<code>greenlet</code>本身是不负责调度的，所有的调度需要由应用程序负责，那么<code>eventlet</code>如何进行程序的调度？我们先从<code>eventlet</code>定义的协程说起。</p>
<h3 id="Eventlet的GreenThread"><a href="#Eventlet的GreenThread" class="headerlink" title="Eventlet的GreenThread"></a>Eventlet的GreenThread</h3><p>Eventlet通过继承<code>greenlet.geenlet</code>自定义了一个绿色线程，实际上是一个协程。<code>Eventlet</code>扩展了<code>greenlet.greenlet</code>的语义：</p>
<ul>
<li><code>wait</code>, 当被调用时会自动切换到其他协程上去，条件满足时再切回来</li>
<li><code>link</code>, 注册协程退出时执行的清理函数</li>
<li><code>kill</code>, 杀掉协程，但是在杀掉之前执行一次调度</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># eventlet/greenthread.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreenThread</span><span class="params">(greenlet.greenlet)</span>:</span></div><div class="line">    <span class="string">"""The GreenThread class is a type of Greenlet which has the additional</span></div><div class="line">    property of being able to retrieve the return value of the main function.</div><div class="line">    Do not construct GreenThread objects directly; call :func:`spawn` to get one.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        greenlet.greenlet.__init__(self, self.main, parent)</div><div class="line">        self._exit_event = event.Event()</div><div class="line">        self._resolving_links = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Returns the result of the main function of this GreenThread.  If the</span></div><div class="line">        result is a normal return value, :meth:`wait` returns it.  If it raised</div><div class="line">        an exception, :meth:`wait` will raise the same exception (though the</div><div class="line">        stack trace will unavoidably contain some frames from within the</div><div class="line">        greenthread module)."""</div><div class="line">        <span class="keyword">return</span> self._exit_event.wait()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">(self, func, *curried_args, **curried_kwargs)</span>:</span></div><div class="line">        <span class="string">""" Set up a function to be called with the results of the GreenThread.</span></div><div class="line"></div><div class="line">        The function must have the following signature::</div><div class="line"></div><div class="line">            def func(gt, [curried args/kwargs]):</div><div class="line"></div><div class="line">        When the GreenThread finishes its run, it calls *func* with itself</div><div class="line">        and with the `curried arguments &lt;http://en.wikipedia.org/wiki/Currying&gt;`_ supplied</div><div class="line">        at link-time.  If the function wants to retrieve the result of the GreenThread,</div><div class="line">        it should call wait() on its first argument.</div><div class="line"></div><div class="line">        Note that *func* is called within execution context of</div><div class="line">        the GreenThread, so it is possible to interfere with other linked</div><div class="line">        functions by doing things like switching explicitly to another</div><div class="line">        greenthread.</div><div class="line">        """</div><div class="line">        self._exit_funcs = getattr(self, <span class="string">'_exit_funcs'</span>, deque())</div><div class="line">        self._exit_funcs.append((func, curried_args, curried_kwargs))</div><div class="line">        <span class="keyword">if</span> self._exit_event.ready():</div><div class="line">            self._resolve_links()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unlink</span><span class="params">(self, func, *curried_args, **curried_kwargs)</span>:</span></div><div class="line">        <span class="string">""" remove linked function set by :meth:`link`</span></div><div class="line"></div><div class="line">        Remove successfully return True, otherwise False</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'_exit_funcs'</span>, <span class="keyword">None</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._exit_funcs.remove((func, curried_args, curried_kwargs))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self, function, args, kwargs)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            result = function(*args, **kwargs)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self._exit_event.send_exception(*sys.exc_info())</div><div class="line">            self._resolve_links()</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self._exit_event.send(result)</div><div class="line">            self._resolve_links()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_resolve_links</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># ca and ckw are the curried function arguments</span></div><div class="line">        <span class="keyword">if</span> self._resolving_links:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        self._resolving_links = <span class="keyword">True</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            exit_funcs = getattr(self, <span class="string">'_exit_funcs'</span>, deque())</div><div class="line">            <span class="keyword">while</span> exit_funcs:</div><div class="line">                f, ca, ckw = exit_funcs.popleft()</div><div class="line">                f(self, *ca, **ckw)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            self._resolving_links = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self, *throw_args)</span>:</span></div><div class="line">        <span class="string">"""Kills the greenthread using :func:`kill`.  After being killed</span></div><div class="line">        all calls to :meth:`wait` will raise *throw_args* (which default</div><div class="line">        to :class:`greenlet.GreenletExit`)."""</div><div class="line">        <span class="keyword">return</span> kill(self, *throw_args)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cancel</span><span class="params">(self, *throw_args)</span>:</span></div><div class="line">        <span class="string">"""Kills the greenthread using :func:`kill`, but only if it hasn't</span></div><div class="line">        already started running.  After being canceled,</div><div class="line">        all calls to :meth:`wait` will raise *throw_args* (which default</div><div class="line">        to :class:`greenlet.GreenletExit`)."""</div><div class="line">        <span class="keyword">return</span> cancel(self, *throw_args)</div></pre></td></tr></table></figure>
<h3 id="使用协程的入口spawn和spawn-n"><a href="#使用协程的入口spawn和spawn-n" class="headerlink" title="使用协程的入口spawn和spawn_n"></a>使用协程的入口<code>spawn</code>和<code>spawn_n</code></h3><p>一般使用<code>eventlet</code>会有两个入口函数：</p>
<ul>
<li><code>spawn</code>, eventlet.spawn -&gt;eventlet.greenthread.spawn, 创建一个绿色线程并且返回这个绿色协程，并安排调度执行。</li>
<li><code>spawn_n</code>, eventlet.spawn_n -&gt;eventlet.greenthread.spawn_n, 创建一个greenlet，并返回，同时安排调度执行。</li>
</ul>
<p><code>spawn</code>使用了自己的<code>GreenThread</code>，而<code>spawn_n</code>使用的是<code>greenlet</code>，因而后者更加快速一点。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/greenthread.py</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span><span class="params">(func, *args, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""Create a greenthread to run ``func(*args, **kwargs)``.  Returns a</span></div><div class="line">    :class:`GreenThread` object which you can use to get the results of the</div><div class="line">    call.</div><div class="line"></div><div class="line">    Execution control returns immediately to the caller; the created greenthread</div><div class="line">    is merely scheduled to be run at the next available opportunity.</div><div class="line">    Use :func:`spawn_after` to  arrange for greenthreads to be spawned</div><div class="line">    after a finite delay.</div><div class="line">    """</div><div class="line">    hub = hubs.get_hub()</div><div class="line">    g = GreenThread(hub.greenlet)</div><div class="line">    hub.schedule_call_global(<span class="number">0</span>, g.switch, func, args, kwargs)</div><div class="line">    <span class="keyword">return</span> g</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span><span class="params">(func, *args, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""Same as :func:`spawn`, but returns a ``greenlet`` object from</span></div><div class="line">    which it is not possible to retrieve either a return value or</div><div class="line">    whether it raised any exceptions.  This is faster than</div><div class="line">    :func:`spawn`; it is fastest if there are no keyword arguments.</div><div class="line"></div><div class="line">    If an exception is raised in the function, spawn_n prints a stack</div><div class="line">    trace; the print can be disabled by calling</div><div class="line">    :func:`eventlet.debug.hub_exceptions` with False.</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> _spawn_n(<span class="number">0</span>, func, args, kwargs)[<span class="number">1</span>]</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_spawn_n</span><span class="params">(seconds, func, args, kwargs)</span>:</span></div><div class="line">    hub = hubs.get_hub()</div><div class="line">    g = greenlet.greenlet(func, parent=hub.greenlet)</div><div class="line">    t = hub.schedule_call_global(seconds, g.switch, *args, **kwargs)</div><div class="line">    <span class="keyword">return</span> t, g</div></pre></td></tr></table></figure>
<p>可以看到两个都调用了<code>schedule_call_global</code>然后返回。这个函数会安排绿色协程的调度。</p>
<h3 id="绿色线程如何调度"><a href="#绿色线程如何调度" class="headerlink" title="绿色线程如何调度"></a>绿色线程如何调度</h3><p>在创建GreenThread时，会通过调用不同的<code>Hub</code>方法进行调度，在linux环境下两个函数一样，就以上面说到的<code>schedule_call_global</code>为例说明。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eventlet/hubs/poll.py</span></div><div class="line"><span class="comment"># BaseHub</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">schedule_call_global</span><span class="params">(self, seconds, cb, *args, **kw)</span>:</span></div><div class="line">        <span class="string">"""Schedule a callable to be called after 'seconds' seconds have</span></div><div class="line">        elapsed. The timer will NOT be canceled if the current greenlet has</div><div class="line">        exited before the timer fires.</div><div class="line">            seconds: The number of seconds to wait.</div><div class="line">            cb: The callable to call after the given time.</div><div class="line">            *args: Arguments to pass to the callable when called.</div><div class="line">            **kw: Keyword arguments to pass to the callable when called.</div><div class="line">        """</div><div class="line">        t = timer.Timer(seconds, cb, *args, **kw)</div><div class="line">        self.add_timer(t)</div><div class="line">        <span class="keyword">return</span> t</div></pre></td></tr></table></figure>
<p>可以看到，当创建绿色线程时通过调用<code>scheduler_call_global</code>方法，然后再设置定时任务的方式添加入Hub进行调度。每个<code>seconds=0</code>，即在每次循环处理定时任务的时候处理。一直到这里，并没有谈到监听事件是何时注册到<code>epoll</code>进行监听的。我们通过<code>socket</code>创建和监听为例，看一下整个过程是如何的。</p>
<h3 id="socket如何创建、设置、注册和监听"><a href="#socket如何创建、设置、注册和监听" class="headerlink" title="socket如何创建、设置、注册和监听"></a>socket如何创建、设置、注册和监听</h3><p>原生的实现不兼容<code>eventlet</code>，所以<code>eventlet</code>对一些标准库进行了<code>绿化</code>。用自己的实现替代了原生的实现。这里的不兼容主要体现在两点：</p>
<ul>
<li>需要将堵塞模式设置为非堵塞，不然多路复用没有意义</li>
<li>需要将fd添加到epoll中进行监听，并且在满足条件下调度执行</li>
</ul>
<p>通过GreenSocket实现探查下如何解决上面两个问题：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eventlet<span class="selector-class">.green</span><span class="selector-class">.socket</span> -&gt; eventlet._socket_nodns -&gt; eventlet<span class="selector-class">.greenio</span><span class="selector-class">.base</span> -&gt;GreenSocket。</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># eventlet/greenio/base.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreenSocket</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Green version of socket.socket class, that is intended to be 100%</div><div class="line">    API-compatible.</div><div class="line"></div><div class="line">    It also recognizes the keyword parameter, 'set_nonblocking=True'.</div><div class="line">    Pass False to indicate that socket is already in non-blocking mode</div><div class="line">    to save syscalls.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># This placeholder is to prevent __getattr__ from creating an infinite call loop</span></div><div class="line">    fd = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, family_or_realsock=socket.AF_INET, *args, **kwargs)</span>:</span></div><div class="line">        should_set_nonblocking = kwargs.pop(<span class="string">'set_nonblocking'</span>, <span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> isinstance(family_or_realsock, six.integer_types):</div><div class="line">            <span class="comment"># 创建原生的socket 或者包装已有的socket</span></div><div class="line">            fd = _original_socket(family_or_realsock, *args, **kwargs)</div><div class="line">            <span class="comment"># Notify the hub that this is a newly-opened socket.</span></div><div class="line">            <span class="comment"># 这是个新打开的fd，如果之前有监听的事件删除之</span></div><div class="line">            notify_opened(fd.fileno())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            fd = family_or_realsock</div><div class="line"></div><div class="line">        <span class="comment"># import timeout from other socket, if it was there</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._timeout = fd.gettimeout() <span class="keyword">or</span> socket.getdefaulttimeout()</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            self._timeout = socket.getdefaulttimeout()</div><div class="line">        <span class="comment"># 设置为非堵塞模式，需要注意set_nonblocking这个参数的意思是 传入的socket已经是非堵塞的了，不需要额外的设置。</span></div><div class="line">        <span class="keyword">if</span> should_set_nonblocking:</div><div class="line">            set_nonblocking(fd)</div><div class="line">        self.fd = fd</div><div class="line">        <span class="comment"># when client calls setblocking(0) or settimeout(0) the socket must</span></div><div class="line">        <span class="comment"># act non-blocking</span></div><div class="line">        self.act_non_blocking = <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="comment"># Copy some attributes from underlying real socket.</span></div><div class="line">        <span class="comment"># This is the easiest way that i found to fix</span></div><div class="line">        <span class="comment"># https://bitbucket.org/eventlet/eventlet/issue/136</span></div><div class="line">        <span class="comment"># Only `getsockopt` is required to fix that issue, others</span></div><div class="line">        <span class="comment"># are just premature optimization to save __getattr__ call.</span></div><div class="line">        self.bind = fd.bind</div><div class="line">        self.close = fd.close</div><div class="line">        self.fileno = fd.fileno</div><div class="line">        self.getsockname = fd.getsockname</div><div class="line">        self.getsockopt = fd.getsockopt</div><div class="line">        self.listen = fd.listen</div><div class="line">        self.setsockopt = fd.setsockopt</div><div class="line">        self.shutdown = fd.shutdown</div><div class="line">        self._closed = <span class="keyword">False</span></div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_trampoline</span><span class="params">(self, fd, read=False, write=False, timeout=None, timeout_exc=None)</span>:</span></div><div class="line">        <span class="string">""" We need to trampoline via the event hub.</span></div><div class="line">            We catch any signal back from the hub indicating that the operation we</div><div class="line">            were waiting on was associated with a filehandle that's since been</div><div class="line">            invalidated.</div><div class="line">        """</div><div class="line">        <span class="comment"># 处理已经closed的情况</span></div><div class="line">        <span class="keyword">if</span> self._closed:</div><div class="line">            <span class="comment"># If we did any logging, alerting to a second trampoline attempt on a closed</span></div><div class="line">            <span class="comment"># socket here would be useful.</span></div><div class="line">            <span class="keyword">raise</span> IOClosed()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> trampoline(fd, read=read, write=write, timeout=timeout,</div><div class="line">                              timeout_exc=timeout_exc,</div><div class="line">                              mark_as_closed=self._mark_as_closed)</div><div class="line">        <span class="keyword">except</span> IOClosed:</div><div class="line">            <span class="comment"># This socket's been obsoleted. De-fang it.</span></div><div class="line">            self._mark_as_closed()</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.act_non_blocking:</div><div class="line">            <span class="keyword">return</span> self.fd.accept()</div><div class="line">        fd = self.fd</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment"># 非堵塞的读取，如果返回errno.EWOULDBLOCK异常，返回None</span></div><div class="line">            res = socket_accept(fd)</div><div class="line">             </div><div class="line">            <span class="comment"># 返回正常可读，设置client为非堵塞，然后绿化之</span></div><div class="line">            <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                client, addr = res</div><div class="line">                set_nonblocking(client)</div><div class="line">                <span class="keyword">return</span> type(self)(client), addr</div><div class="line">            <span class="comment"># 对方可能堵塞了，先垫一下(trampoline弹簧垫的意思）</span></div><div class="line">            self._trampoline(fd, read=<span class="keyword">True</span>, timeout=self.gettimeout(),</div><div class="line">                             timeout_exc=socket.timeout(<span class="string">"timed out"</span>))</div><div class="line">                             </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">socket_accept</span><span class="params">(descriptor)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Attempts to accept() on the descriptor, returns a client,address tuple</div><div class="line">    if it succeeds; returns None if it needs to trampoline, and raises</div><div class="line">    any exceptions.</div><div class="line">    """</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> descriptor.accept()</div><div class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">if</span> get_errno(e) == errno.EWOULDBLOCK:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">raise</span></div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trampoline</span><span class="params">(fd, read=None, write=None, timeout=None,</span></span></div><div class="line">               timeout_exc=timeout.Timeout,</div><div class="line">               mark_as_closed=None):</div><div class="line">    <span class="string">"""Suspend the current coroutine until the given socket object or file</span></div><div class="line">    descriptor is ready to *read*, ready to *write*, or the specified</div><div class="line">    *timeout* elapses, depending on arguments specified.</div><div class="line"></div><div class="line">    To wait for *fd* to be ready to read, pass *read* ``=True``; ready to</div><div class="line">    write, pass *write* ``=True``. To specify a timeout, pass the *timeout*</div><div class="line">    argument in seconds.</div><div class="line"></div><div class="line">    If the specified *timeout* elapses before the socket is ready to read or</div><div class="line">    write, *timeout_exc* will be raised instead of ``trampoline()``</div><div class="line">    returning normally.</div><div class="line"></div><div class="line">    .. note :: |internal|</div><div class="line">    """</div><div class="line">    t = <span class="keyword">None</span></div><div class="line">    hub = get_hub()</div><div class="line">    current = greenlet.getcurrent()</div><div class="line">    <span class="keyword">assert</span> hub.greenlet <span class="keyword">is</span> <span class="keyword">not</span> current, <span class="string">'do not call blocking functions from the mainloop'</span></div><div class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> (</div><div class="line">        read <span class="keyword">and</span> write), <span class="string">'not allowed to trampoline for reading and writing'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        fileno = fd.fileno()</div><div class="line">    <span class="keyword">except</span> AttributeError:</div><div class="line">        fileno = fd</div><div class="line">        </div><div class="line">    <span class="comment"># 如果设置了超时时间，定义一个超时的定时事件，从而greenlet.throw产生超时异常</span></div><div class="line">    <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_timeout</span><span class="params">(exc)</span>:</span></div><div class="line">            <span class="comment"># This is only useful to insert debugging</span></div><div class="line">            current.throw(exc)</div><div class="line">        t = hub.schedule_call_global(timeout, _timeout, timeout_exc)</div><div class="line">    <span class="comment"># 根据读写任务类型，添加到Hub中进行监听。回调函数是current.switch。即如果某个绿色线程监听的事件满足条件</span></div><div class="line">    <span class="comment"># 就在每个Hub循环中通过current.switch切回本绿色线程继续处理，直到处理完毕或者绿色线程主动让出处理</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> read:</div><div class="line">            listener = hub.add(hub.READ, fileno, current.switch, current.throw, mark_as_closed)</div><div class="line">        <span class="keyword">elif</span> write:</div><div class="line">            listener = hub.add(hub.WRITE, fileno, current.switch, current.throw, mark_as_closed)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 已经注册了监听事件，切回Hub中的绿色线程处理</span></div><div class="line">            <span class="keyword">return</span> hub.switch()</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># finally能够运行，说明监听条件满足了，从监听中移除该事件。</span></div><div class="line">            hub.remove(listener)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> t <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            t.cancel()</div></pre></td></tr></table></figure>
<p>从上面的代码可以看到，使用了绿色线程的执行步骤是： </p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">开始 -&gt;初始化原生<span class="function"><span class="title">socket</span> -&gt;</span>设置为非堵塞模式 -&gt; <span class="function"><span class="title">accept</span> -&gt;</span>返回堵塞异常 -&gt;<span class="function"><span class="title">trampline</span>将socket添加到Hub进行监听 -&gt;</span>切回Hub线程运行  </div><div class="line">-&gt;每次的H<span class="function"><span class="title">ub</span>循环 -&gt;</span><span class="function"><span class="title">epoll</span>条件满足执行current.switch切回本线程 -&gt;</span> 进行<span class="function"><span class="title">accept</span>操作正常 -&gt;</span> 绿化返回的<span class="function"><span class="title">client</span>端socket -&gt;</span>结束</div></pre></td></tr></table></figure>
<p>因此，我们可以知道<code>eventlet</code>解决上面两个问题的方法：</p>
<ul>
<li>封装原生socket，设置为非堵塞模式</li>
<li>在accept返回失败时，通过trampoline将其添加到Hub进行事件监听。</li>
</ul>
<h3 id="eventlet的绿化逻辑"><a href="#eventlet的绿化逻辑" class="headerlink" title="eventlet的绿化逻辑"></a>eventlet的绿化逻辑</h3><p>可以归纳出<code>eventlet</code>的大致处理逻辑：</p>
<ol>
<li>调用spawn类函数创建一个绿色线程，通过Timer提交给Hub，并将switch函数设置为回调。在每次Hub循环处理Timer时，执行switch切回绿色线程运行；</li>
<li>通过绿化原生标准库，设置fd为非堵塞模式；在运行非堵塞accept、read、write等失败时trampoline，从而添加到hub中进行事件监听。等待下次Hub循环时通过epoll检查条件是否满足，然后再切换回绿色线程进行对应的操作。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eventlet的Hub&quot;&gt;&lt;a href=&quot;#Eventlet的Hub&quot; class=&quot;headerlink&quot; title=&quot;Eventlet的Hub&quot;&gt;&lt;/a&gt;Eventlet的Hub&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;所有基于&lt;code&gt;epoll&lt;/code&gt;(多路
    
    </summary>
    
      <category term="OpenStack" scheme="http://fanchao01.github.io/blog/categories/OpenStack/"/>
    
    
  </entry>
  
  <entry>
    <title>Evenlet的基础greenlet</title>
    <link href="http://fanchao01.github.io/blog/2015/12/14/openstack-eventlet/"/>
    <id>http://fanchao01.github.io/blog/2015/12/14/openstack-eventlet/</id>
    <published>2015-12-14T08:00:00.000Z</published>
    <updated>2016-08-25T04:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eventlet的基础"><a href="#Eventlet的基础" class="headerlink" title="Eventlet的基础"></a>Eventlet的基础</h2><hr>
<p>用官方的开场白介绍<a href="http://eventlet.net/" target="_blank" rel="external">eventlet</a>。eventlet是一个python并发（concurrent）网络库，能够在不改变编程方式的情况下，改变程序的运行方式。</p>
<blockquote>
<ul>
<li>使用epoll\kequeue\libevent实现高伸缩性的非堵塞I/O。</li>
<li>依靠协程（coroutines）,可以类似threading库那样采用堵塞式的编程模型，反而获得非堵塞I/O的收益。</li>
<li>事件的分发(dispatch)是隐含式的，因此可以容易从底层使用Eventlet库，或者是作为大型程序的一个部分。</li>
</ul>
</blockquote>
<p>在我的理解中，Eventlet的神奇之处在于两点：</p>
<blockquote>
<ul>
<li>不改变编程模型，虽然底层是异步I/O，但是可以像堵塞式那样<code>正常</code>的编程，没有大量的嵌套回调。</li>
<li>对于I/O事件是隐式分发的，就像使用threading库那样、甚至说比之还要方便；也无需大量的显式的协程调用，这点可以和tornado对比。</li>
</ul>
</blockquote>
<h2 id="eventlet的底层greenlet"><a href="#eventlet的底层greenlet" class="headerlink" title="eventlet的底层greenlet"></a>eventlet的底层greenlet</h2><p>说起eventlet总也离不开其底层依赖的greenlet这个Python的协程库。这里不讨论greenlet的实现，只强调greenlet的几个特性。</p>
<p>协程的意思就是相互协助的程序。它与线程的区别是，协程之间的运行顺序是由程序本身确定的，而不是由内核决定；协程拥有自己独立的栈，可以随时终止和继续运行。</p>
<p>下面先提供一个实际的例子，然后分析greenlet的几个接口，再回过头说明这个例子的输出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> greenlet</div><div class="line"></div><div class="line">all_g = &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_print</span><span class="params">(*args)</span>:</span>    <span class="comment"># 打印当前协程、父协程、输出</span></div><div class="line">	<span class="keyword">global</span> all_g</div><div class="line">	current = greenlet.getcurrent()</div><div class="line">	<span class="keyword">print</span> <span class="string">'greenlet(%s), parent(%s): %s'</span> % (</div><div class="line">              all_g[id(current)], </div><div class="line">              all_g[id(current.parent)],</div><div class="line">              <span class="string">' '</span>.join(map(str, args)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">(start)</span>:</span></div><div class="line">	format_print(<span class="string">'g1 begin, start'</span>, start)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  <span class="comment"># 注意这里是循环2次</span></div><div class="line">		time.sleep(<span class="number">1</span>)</div><div class="line">		start += <span class="number">1</span></div><div class="line">		start = g2.switch(start)</div><div class="line">		format_print(<span class="string">'start'</span>, start)</div><div class="line"></div><div class="line">	format_print(<span class="string">'g1 end, start'</span>, start)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run2</span><span class="params">(start)</span>:</span></div><div class="line">	format_print(<span class="string">'g2 begin, start'</span>, start)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):  <span class="comment"># 注意这里循环3次</span></div><div class="line">		time.sleep(<span class="number">1</span>)</div><div class="line">		start += <span class="number">1</span></div><div class="line">		start = g1.switch(start)</div><div class="line">		format_print(<span class="string">'start'</span>, start)</div><div class="line"></div><div class="line">	format_print(<span class="string">'g2 end, start'</span>, start)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run3</span><span class="params">(num)</span>:</span></div><div class="line">	format_print(<span class="string">'g3 begin, num'</span>, num)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">		format_print(<span class="string">'i'</span>, i)</div><div class="line">		time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">	end = g2.switch(num+<span class="number">100</span>)</div><div class="line"></div><div class="line">	format_print(<span class="string">'g3 end'</span>, end)</div><div class="line"></div><div class="line">g1 = greenlet.greenlet(run=run1, parent=greenlet.getcurrent())</div><div class="line">g2 = greenlet.greenlet(run=run2, parent=greenlet.getcurrent())</div><div class="line">g3 = greenlet.greenlet(run=run3, parent=g2)</div><div class="line"></div><div class="line">all_g[id(<span class="keyword">None</span>)] = <span class="string">'main'</span></div><div class="line">all_g[id(greenlet.getcurrent())] = <span class="string">'main'</span></div><div class="line">all_g[id(g1)] = <span class="string">'g1'</span></div><div class="line">all_g[id(g2)] = <span class="string">'g2'</span></div><div class="line">all_g[id(g3)] = <span class="string">'g3'</span></div><div class="line">g1.switch(<span class="number">0</span>)</div><div class="line">format_print(<span class="string">'back main after g1.switch'</span>)</div><div class="line"></div><div class="line">g3.switch(<span class="number">3</span>)</div><div class="line">format_print(<span class="string">'back main after g3.switch'</span>)</div><div class="line"></div><div class="line">format_print(g1.switch(<span class="string">'back g1 from main'</span>))</div><div class="line">format_print(g3.switch(<span class="string">'back g3 from main'</span>))</div></pre></td></tr></table></figure>
<h3 id="greenlet-greenlet"><a href="#greenlet-greenlet" class="headerlink" title="greenlet.greenlet"></a>greenlet.greenlet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">greenlet.greenlet(run=<span class="keyword">None</span>, parent=<span class="keyword">None</span>) =&gt; greenlet object</div><div class="line"></div><div class="line">run: 传入需要运行的函数，与`Thread`中的`target`相同</div><div class="line">parent: 转入协程的父协程，默认为当前协程</div></pre></td></tr></table></figure>
<h3 id="父协程有什么用？"><a href="#父协程有什么用？" class="headerlink" title="父协程有什么用？"></a>父协程有什么用？</h3><p>父协程可以通过调用<code>greenlet.getcurrent().parent</code>得到，那么这里传入父协程有什么用处？</p>
<p>简单的来说，父协程最大的用处在于，当前协程运行退出后，自动切换到父协程运行。换句话说，如果<code>parent=None</code>那么创建的协程退出后将自动切回到创建该协程的调用者中运行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> args, kwargs</div><div class="line">    <span class="keyword">print</span> <span class="string">'run over'</span></div><div class="line"></div><div class="line">parent = greenlet.greenlet(run=run)</div><div class="line">child = greenlet.greenlet(run=run, parent=parent)</div><div class="line">child.switch()</div><div class="line">&gt;&gt;</div><div class="line">(), &#123;&#125;</div><div class="line">run over</div><div class="line">(<span class="keyword">None</span>,), &#123;&#125;</div><div class="line">run over</div></pre></td></tr></table></figure>
<p>我们可以看到<code>child</code>的参数和运行结束。然后自动切换到了父协程中运行。需要注意的是，当子线程运行结束自动切换到父协程时，会自动专递一个<code>None</code>参数。</p>
<h3 id="为什么子协程退出切换到父协程时专递一个None参数"><a href="#为什么子协程退出切换到父协程时专递一个None参数" class="headerlink" title="为什么子协程退出切换到父协程时专递一个None参数"></a>为什么子协程退出切换到父协程时专递一个None参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_child</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">print</span> args</div><div class="line">    <span class="keyword">print</span> <span class="string">'child over'</span></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_parent</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">print</span> args</div><div class="line">    rv = child.switch(<span class="string">'hi, child'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Parent continue with:'</span>, rv</div><div class="line">    </div><div class="line">parent = greenlet.greenlet(run=run_parent)</div><div class="line">child = greenlet.greenlet(run=run_child, parent=parent)</div><div class="line">parent.switch()</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">()</div><div class="line">(<span class="string">'hi, child'</span>,)</div><div class="line">child over</div><div class="line">Parent <span class="keyword">continue</span> <span class="keyword">with</span>: <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>我们可以看到，当子协程自然退出后，父协程通过<code>switch</code>获得了<code>None</code>参数。想一想，如果子协程不传递<code>None</code>参数，那么父协程就需要在<code>switch</code>处报错了。</p>
<h3 id="如果一个协程永远不被调用switch会怎么样"><a href="#如果一个协程永远不被调用switch会怎么样" class="headerlink" title="如果一个协程永远不被调用switch会怎么样"></a>如果一个协程永远不被调用<code>switch</code>会怎么样</h3><p>一个协程如果没有被调用<code>switch</code>，那么他就永远不能运行。这点和线程完全不同，线程由内核调度，如果主线程自然退出，那么其他线程依然运行(非daemon的线程）。但是，在协程里如果主协程退出，或者进程在其他协程中退出，那么整个程序退出，其他协程没有运行的机会了。看一个官方的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_g1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">1</span>, <span class="number">2</span></div><div class="line">    g2.switch()</div><div class="line">    <span class="keyword">print</span> <span class="number">5</span>, <span class="number">6</span></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_g2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">3</span>, <span class="number">4</span></div><div class="line">    g1.switch()</div><div class="line">    <span class="keyword">print</span> <span class="number">7</span>, <span class="number">8</span></div><div class="line"></div><div class="line">g1 = greenlet.greenlet(run=run_g1)</div><div class="line">g2 = greenlet.greenlet(run=run_g2)</div><div class="line">g1.switch()</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="number">3</span>, <span class="number">4</span></div><div class="line"><span class="number">5</span>, <span class="number">6</span>    <span class="comment"># 结束</span></div></pre></td></tr></table></figure>
<p>我们看到<code>7, 8</code>没有输出，因为g1的父协程是主协程，当g1运行结束后，自动切换到主协程，而主协程没有做任何动作就退出了。</p>
<h3 id="greenlet-switch"><a href="#greenlet-switch" class="headerlink" title="greenlet.switch"></a>greenlet.switch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">greenlet.switch(*args, **kargs)</div><div class="line">args: 不定参数</div><div class="line">kwargs: 位置参数</div></pre></td></tr></table></figure>
<p><code>greenlet.switch</code>会导致程序切换到被调用的协程中运行。例如前几个例子中的<code>child.switch()</code>会切换到<code>child</code>协程中运行。</p>
<h3 id="协程如何继续运行？"><a href="#协程如何继续运行？" class="headerlink" title="协程如何继续运行？"></a>协程如何继续运行？</h3><p>当<code>g.switch</code>被调用时，<code>g</code>在何处继续运行有三种情况：</p>
<blockquote>
<ul>
<li>第一种情况，g没有运行，那么g在run入口处运行。传递的参数作为run的参数。</li>
<li>第二种情况，g已经运行过，那么g在上次运行停止，也就是调用了otehr.switch而被切换出去的地方继续运行。</li>
<li>第三种情况，g已经运行退出。那么g会直接返回，如果有参数传递，则直接返回参数</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'over'</span></div><div class="line"></div><div class="line">g = greenlet.greenlet(run=run)</div><div class="line"><span class="keyword">print</span> g.dead</div><div class="line"><span class="keyword">print</span> g.switch()</div><div class="line"><span class="keyword">print</span> g.dead</div><div class="line"><span class="keyword">print</span> g.switch(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">print</span> g.switch()</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="keyword">False</span></div><div class="line">over</div><div class="line"><span class="keyword">True</span></div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">()</div></pre></td></tr></table></figure>
<p>这里需要注意，当调用已经结束的协程时，会直接返回传递的参数或者是<code>()</code>，而不是之前的<code>None</code>。</p>
<h3 id="greenlet-throw"><a href="#greenlet-throw" class="headerlink" title="greenlet.throw"></a>greenlet.throw</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">greenlet.throw([type, [val, [tb]]])</div><div class="line"></div><div class="line">type: 异常类型，例如TypeError 之类</div><div class="line">val: 传递给type的参数，例如‘type <span class="keyword">is</span> <span class="keyword">not</span> correct’</div><div class="line">tb: 传递给type的参数，异常的栈。</div></pre></td></tr></table></figure>
<p><code>throw</code>调用类似<code>switch</code>调用，会立即转到调用的线程运行，并立即抛出异常，类似：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">raiser</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">raise</span> typ, val, tb</div><div class="line">g_raiser = greenlet(raiser, parent=g)</div><div class="line">g_raiser.switch()</div></pre></td></tr></table></figure>
<p>如果<code>throw</code>没有参数，那么协程会抛出<code>greenlet.GreenletExit</code>。这个异常不会向上传递给父协程，相当于正常的退出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        greenlet.getcurrent().parent.switch()</div><div class="line">    <span class="keyword">except</span> greenlet.GreenletExit:</div><div class="line">        <span class="keyword">print</span> <span class="string">'exit'</span></div><div class="line">        <span class="keyword">raise</span>       <span class="comment"># raise IOError 加入抛出其他异常，对比抛出GreenletExit</span></div><div class="line"></div><div class="line">g = greenlet.greenlet(run=run)</div><div class="line">g.switch()</div><div class="line">ge = g.throw()  <span class="comment">#</span></div><div class="line"><span class="keyword">print</span> type(ge)</div><div class="line">&gt;&gt;&gt;</div><div class="line">exit</div><div class="line">greenlet.GreenletExit</div></pre></td></tr></table></figure>
<p>需要注意到，子协程内部产生异常，从而打印<code>exit</code>。父协程获取到了子协程抛出的异常作为返回值，而不是继续抛出异常。所以，调用<code>throw()</code>是安全中断协程的方法。</p>
<h3 id="第一个例子的输出"><a href="#第一个例子的输出" class="headerlink" title="第一个例子的输出"></a>第一个例子的输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">greenlet(g1), parent(main): g1 begin, start <span class="number">0</span></div><div class="line">greenlet(g2), parent(main): g2 begin, start <span class="number">1</span></div><div class="line">greenlet(g1), parent(main): start <span class="number">2</span></div><div class="line">greenlet(g2), parent(main): start <span class="number">3</span></div><div class="line">greenlet(g1), parent(main): start <span class="number">4</span></div><div class="line">greenlet(g1), parent(main): g1 end, start <span class="number">4</span>     <span class="comment"># g1运行结束，转到父协程(main）中运行</span></div><div class="line">greenlet(main), parent(main): back main after g1.switch</div><div class="line">greenlet(g3), parent(g2): g3 begin, num <span class="number">3</span>   </div><div class="line">greenlet(g3), parent(g2): i <span class="number">0</span></div><div class="line">greenlet(g3), parent(g2): i <span class="number">1</span></div><div class="line">greenlet(g3), parent(g2): i <span class="number">2</span>   </div><div class="line">greenlet(g2), parent(main): start <span class="number">103</span>   <span class="comment"># g3循环3次转到g2运行</span></div><div class="line">greenlet(main), parent(main): back main after g3.switch</div><div class="line">greenlet(main), parent(main): back g1 <span class="keyword">from</span> main <span class="comment"># g1运行已经结束，因此g1.switch()直接返回传递的参数</span></div><div class="line">greenlet(g3), parent(g2): g3 end back g3 <span class="keyword">from</span> main</div><div class="line">greenlet(g2), parent(main): start <span class="keyword">None</span>  <span class="comment"># g3运行结束，转回到父协程g2，因此获取的值为None</span></div><div class="line">greenlet(g2), parent(main): g2 end, start <span class="keyword">None</span></div><div class="line">greenlet(main), parent(main): <span class="keyword">None</span>  <span class="comment"># g2运行结束，因此获取的参数是None</span></div></pre></td></tr></table></figure>
<p>从结果可知道，调用<code>g.switch</code>后返回的参数，是下次切换到本协程(其他协程调用本协程的<code>switch</code>或者<code>throww</code>）传递的参数，而与协程<code>g</code>没有关系。</p>
<h3 id="协程与线程"><a href="#协程与线程" class="headerlink" title="协程与线程"></a>协程与线程</h3><p>假如在一个协程，切换到另一个线程中的协程会如何？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> greenlet</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'run in thread'</span></div><div class="line">    </div><div class="line">g = greenlet.greenlet(run=run)</div><div class="line">th = threaing.Thread(target=g.switch)</div><div class="line">th.start()</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">Traceback ...</div><div class="line">...</div><div class="line">error: cannot switch to a different thread</div></pre></td></tr></table></figure>
<p>每个协程是依赖于栈空间的，而线程拥有独立的空间，当切换过去必然引起错误。<code>greenlet</code>也不允许这种切换</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eventlet的基础&quot;&gt;&lt;a href=&quot;#Eventlet的基础&quot; class=&quot;headerlink&quot; title=&quot;Eventlet的基础&quot;&gt;&lt;/a&gt;Eventlet的基础&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;用官方的开场白介绍&lt;a href=&quot;http://even
    
    </summary>
    
      <category term="OpenStack" scheme="http://fanchao01.github.io/blog/categories/OpenStack/"/>
    
    
  </entry>
  
  <entry>
    <title>python中的享元模式(flyweight)</title>
    <link href="http://fanchao01.github.io/blog/2015/04/13/python-flyweight/"/>
    <id>http://fanchao01.github.io/blog/2015/04/13/python-flyweight/</id>
    <published>2015-04-13T07:00:00.000Z</published>
    <updated>2016-08-25T03:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要翻译自<a href="http://yloiseau.net/articles/DesignPatterns/flyweight/" target="_blank" rel="external">Design Pattern and Python Flyweight Pattern</a>，稍微加上我自己的一点理解。</p>
<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><hr>
<p>《设计模式》中的<code>享元</code>是一种共享对象，能够在不同的上下文环境中同时使用，并且独立于上下文。因此，只有(隐式地)共享状态保存在享元对象本身中；而(显式地）上下文独立的状态被分别保存，在需要时传递给享元对象。本文中只讨论享元对象的创建机制以及对隐式共享状态的管理。享元模式常用在需要降低内存使用量的场景中。这种应用场景需要大量同一个对象的实例，并且这些实例拥有同样的隐式状态，而显式状态可以通过计算拿到或者存储代价比较低。</p>
<h3 id="1-严格的《设计模式》中的享元模式"><a href="#1-严格的《设计模式》中的享元模式" class="headerlink" title="1. 严格的《设计模式》中的享元模式"></a>1. 严格的《设计模式》中的享元模式</h3><p>严格的《设计模式》中的享元模式没有使用python中许多漂亮的特性。下面这个实现展示在一个静态地、强类型地语言中如何实现享元模式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">		self.a, self.b = a, b</div><div class="line">	</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpamFactory</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		self.__instances = &#123;&#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_instance</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        key = (a, b)</div><div class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.__instances:</div><div class="line">            self.__instance[key] = Spam(a, b)</div><div class="line">        <span class="keyword">return</span> self.__instance[key]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line"> 		self.x, self.y = x, y</div><div class="line">    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EggFactory</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		self.__instances = &#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_instance</span><span class="params">(self, x, y)</span>:</span></div><div class="line">		key = (x, y)</div><div class="line">		<span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.__instances:</div><div class="line">			self.__instances[key] = Egg(x, y)</div><div class="line">        <span class="keyword">return</span> self.__instances[key]</div><div class="line"></div><div class="line"><span class="comment">#----------------------------</span></div><div class="line"></div><div class="line">spam_factory = SpamFactory()</div><div class="line">egg_factory = EggFactory()</div><div class="line"></div><div class="line"><span class="keyword">assert</span> spam_factory.get_instance(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> spam_factory.get_instance(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> egg_factory.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> egg_factory.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="keyword">assert</span> spam_factory.get_instance(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> egg_factory.get_instance(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>但是python是一种动态类型语言，类也能作为<code>第一类对象</code>。通过使用<code>*args</code>替代固定的初始化参数，并将享元类也传递给工厂类作为初始化参数，工厂类能够更加通用化。下面就是一个这样的例子。</p>
<h3 id="2-《设计模式》中的享元模式"><a href="#2-《设计模式》中的享元模式" class="headerlink" title="2. 《设计模式》中的享元模式"></a>2. 《设计模式》中的享元模式</h3><p>这个例子稍微pythonic一点，使用了<code>*args</code>并且将类作为参数进行传递。因此不需要为每个工厂实现单独的类。简单来说实现了一个通用工厂，这个工厂需要传递进享元类本身，产生享元类对应的实例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cls)</span>:</span></div><div class="line">		self._cls = cls</div><div class="line"> 		self.__instances = &#123;&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_instance</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">		key = (args, tuple(kwargs.items()))</div><div class="line">		<span class="keyword">return</span> self.__instances.setdefault(key, self._cls(*args, **kwargs))</div><div class="line"></div><div class="line"><span class="comment">#--------------------------------------</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">		self.a, self.b = a, b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line"> 		self.x, self.y = x, y</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line">SpamFactory = FlyweightFactory(Spam)</div><div class="line">EggFactory = FlyweightFactory(Egg)</div><div class="line">SubSpamFactory = FlyweightFactory(SubSpam)</div><div class="line"></div><div class="line"><span class="keyword">assert</span> SpamFactory.get_instance(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> SpamFactory.get_instance(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> EggFactory.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> EggFactory.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpamFactory.get_instance(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> SpamFactory.get_instance(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>通过python的语法，使工厂类更加通用化。需要注意<code>SubSpamFactory</code>与<code>SpamFactory</code>是两个不同的类工厂，产生的实例是不同的(即使传递相同的参数，SubSpamFactory产生的实例是SubSpam的实例，是Spam的子实例)。</p>
<h3 id="3-类装饰器版本"><a href="#3-类装饰器版本" class="headerlink" title="3. 类装饰器版本"></a>3. 类装饰器版本</h3><p>通过使用<code>__call__</code>魔术方法，可以不用显式地调用<code>get_instance</code>方法。直接通过<code>SpamFactory(1,2)</code>就能得到实例。<br>通过<code>SpamFactory(1,2)</code>得调用方式得到实例与通过<code>Spam(1,2)</code>得方式在形式上是一样的。例如，可以通过<code>Spam=SpamFactory(Spam)</code>的方式实现。相当于将<code>SpamFactory</code>又取了个<code>Spam</code>的名字，或者说将名字<code>Spam</code>重新绑定到<code>SpamFactory</code>类上。这实际上就是<code>装饰器</code>的功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cls)</span>:</span></div><div class="line">		self._cls = cls</div><div class="line">		self.__instances = &#123;&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">		key = (args, tuple(kwargs.items()))</div><div class="line">		<span class="keyword">return</span> self.__instances.setdefault(key, self._cls(*args, **kwargs))</div><div class="line"></div><div class="line"><span class="meta">@Flyweight</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">		self.a, self.b = a, b</div><div class="line"></div><div class="line"><span class="meta">@Flyweight</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line"> 		self.x, self.y = x, y</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"></div><div class="line"><span class="meta">@Flyweight</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam._cls)</span>:</span>	<span class="comment"># 不能使用Spam</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> SubSpam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>python的装饰器是高阶函数，以可调用对象为参数产生另外一个可调用对象。<code>@Flyweight</code>等同于上一个例子中的<code>Spam = SpamFactory(Spam)</code>。注意子类<code>SumSpam</code>的实现。</p>
<h3 id="4-函数装饰器版本"><a href="#4-函数装饰器版本" class="headerlink" title="4. 函数装饰器版本"></a>4. 函数装饰器版本</h3><p>通过对类<code>Flyweight</code>实现<code>__call__</code>方法把该类伪装成了一个函数。直接使用函数实现装饰器更加方便。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flyweight</span><span class="params">(cls)</span>:</span></div><div class="line">	instances = &#123;&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span> *args, **kwargs: instances.setdefault(</div><div class="line">		(args, tuple(kwarges.items())), </div><div class="line">        cls(*args, **kwargs))</div><div class="line"></div><div class="line"><span class="comment"># 或者不使用lambda</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flyweight</span><span class="params">(cls)</span>:</span></div><div class="line">	instances = &#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_wrap</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">		key = (args, tuple(kwargs.items()))</div><div class="line">		<span class="keyword">return</span> instances.setdefault(key, cls(*args, **kwargs))</div><div class="line">	<span class="keyword">return</span> _wrap</div></pre></td></tr></table></figure>
<h3 id="5-《设计模式》中的MixIn"><a href="#5-《设计模式》中的MixIn" class="headerlink" title="5. 《设计模式》中的MixIn"></a>5. 《设计模式》中的MixIn</h3><p>目前为止，我们有一个代理方法(工厂函数)，用来创建一个函数或者类。而这个函数或者类封装了享元类，缓存实例并且代理享元类进行实例化。工厂函数可以通过实现类方法的方式进行实例化的代理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightMixin</span><span class="params">(object)</span>:</span></div><div class="line">	_instances = &#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">	@classmeothd</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_instance</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">		<span class="keyword">return</span> cls._instance.setdefault(</div><div class="line">			(args, tuple(kwargs.items())),</div><div class="line">			cls(*args, **kwargs))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(FLyweightMixin)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">		self.a, self.b = a, b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(FLyweightMixin)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">		self.x, self.y = x, y</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam.get_instance(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam.get_instance(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam.get(<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="keyword">is</span> SubSpam.get_instance(<span class="string">'x'</span>, <span class="string">'y'</span>)</div><div class="line"><span class="keyword">assert</span> SubSpam.get(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> <span class="keyword">not</span> Spam.get_instance(<span class="string">'a'</span>, <span class="string">'b'</span>)</div></pre></td></tr></table></figure>
<p>Mixin是一种接口类，类似Java的Interface一般是作为接口存在而自己不实例化为单独的实例。</p>
<h3 id="6-Minxin版本"><a href="#6-Minxin版本" class="headerlink" title="6. Minxin版本"></a>6. Minxin版本</h3><p>上一版本不太<code>安全</code>，没有办法阻止用户绕过Flyweight直接实例化享元类。（python的类实现是不完备的，很少有绝对的方法阻止用户去做一些事情。而且，python拥有完全的反射机制，用户几乎可以透过界面做任何事情。）<br>通过将<code>get_instance</code>方法移动到<code>__new__</code>方法中去，我们能（一定程度上）阻止用户直接实例化享元类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 所有实例都缓存在FlyweightMixin中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightMixin</span><span class="params">(object)</span>:</span></div><div class="line">	_instances = &#123;&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">raise</span> NotImplementedException</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">		<span class="keyword">return</span> cls._instances.setdefault(</div><div class="line">				<span class="comment"># 需要cls作为键值的一部分</span></div><div class="line">				(cls, args, tuple(kwargs.items())),</div><div class="line">				<span class="comment"># 通过super和type调用享元类进行实例化</span></div><div class="line">				super(type(cls), cls).__new__(cls, *args, **kwargs))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(FlyweightMixin)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(FlyweightMixin)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> Egg(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Subclassing a flyweight class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>这个版本的改动比较大，需要理解python中的<code>__new__</code>魔术方法。另外，作为字典<code>_instances</code>的键值需要增加<code>cls</code>，因为这种方式将所有享元类的实例全部保存在了相同的字典中。而之前的每个享元类的实例是保存在独立的空间中的。</p>
<h3 id="7-改进的装饰器版本"><a href="#7-改进的装饰器版本" class="headerlink" title="7. 改进的装饰器版本"></a>7. 改进的装饰器版本</h3><p>除了继承，类属性可以动态的添加到享元类上。python是一种动态类型，类本身能够在运行时修改。这种方法更加灵活、限制更少、更加优雅，而且能够应用到第三方类上。（不过，更加难懂）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@classmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_instance</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">	<span class="keyword">return</span> cls._instances.setdefault(</div><div class="line">			(cls, args, tuple(kwargs.items())),</div><div class="line">			super(type(cls), cls).__new__(*args, **kwargs)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flyweight</span><span class="params">(decoree)</span>:</span></div><div class="line">	decoree._instances = &#123;&#125;</div><div class="line">	<span class="comment"># 将get_instance 修改为 享元类进行实例化时调用的函数__new__</span></div><div class="line">	<span class="comment"># python中 __new__是真正的构建函数，决定实例的模板和内存结构</span></div><div class="line">	<span class="comment"># 而 __init__更像初始化函数，用来给实例变量赋予初值</span></div><div class="line">	decoree.__new__ = get_instance</div><div class="line">	<span class="keyword">return</span> decoree</div><div class="line"></div><div class="line"><span class="comment">#---------------------------</span></div><div class="line"><span class="meta">@flyweight</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@flyweight</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> Egg(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Subclassing a flyweight class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="8-超类版本"><a href="#8-超类版本" class="headerlink" title="8. 超类版本"></a>8. 超类版本</h3><p>上一个版本实际上起到了超类的作用，通过修改享元类的构建函数<code>__new__</code>决定创建新的实例，还是使用已经缓存的实例。直接通过超类的语法当然也能实现。(这种方式非常复杂，而且不易阅读和维护，不建议这样使用超类，甚至不建议使用超类语法本身）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaFlyweight</span><span class="params">(type)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">		<span class="comment"># 初始化类本身，类作为超类的实例进行初始化，可以忽略</span></div><div class="line">		type.__init__(cls, *args, **kwargs)</div><div class="line">		cls._instances = &#123;&#125;</div><div class="line">		<span class="comment"># 修改类的构建函数</span></div><div class="line">		cls.__new__ = cls._get_instance</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_get_instance</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">		<span class="keyword">return</span> cls._instances.setdefault(</div><div class="line">			(args, tuple(kwargs.items())),</div><div class="line">			<span class="comment"># 调用 享元类 本身去实例化</span></div><div class="line">			super(cls, cls).__new__(*args, **kwargs))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = MetaFlyweight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = MetaFlyweight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> Egg(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Subclassing a flyweight class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="9-函数式超类"><a href="#9-函数式超类" class="headerlink" title="9. 函数式超类"></a>9. 函数式超类</h3><p>对于python，所有的方法、属性都可以动态的添加。可以通过函数式的方式进行操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@classmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_instance</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">	<span class="keyword">return</span> cls.__instances.setdefault(</div><div class="line">		(args, tuple(kwargs.items())),</div><div class="line">		super(type(cls), cls).__new__(*args, **kwargs))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">metaflyweight</span><span class="params">(name, parents, attrs)</span>:</span></div><div class="line">	<span class="comment"># 通过实例化type，动态构建享元类本身</span></div><div class="line">	cls = type(name, parents, attrs)</div><div class="line">	<span class="comment"># 设置类属性</span></div><div class="line">	cls.__instances = &#123;&#125;</div><div class="line">	<span class="comment"># 修改享元类实例化时的逻辑</span></div><div class="line">	cls.__new__ = _get_instance</div><div class="line">	<span class="keyword">return</span> cls</div><div class="line"></div><div class="line"><span class="comment">#----------------------------------------------------------</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = metaflyweight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = metaflyweight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> Egg(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Subclassing a flyweight class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="10-Pure函数超类版本"><a href="#10-Pure函数超类版本" class="headerlink" title="10. Pure函数超类版本"></a>10. Pure函数超类版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">metaflyweight = <span class="keyword">lambda</span> name, parents, attrs: type(</div><div class="line">	name,</div><div class="line">    parents,</div><div class="line">	<span class="comment">#  直接通过__new__, __instances加入attrs</span></div><div class="line">    dict(attrs.items() + [</div><div class="line">		(<span class="string">'__instances'</span>, &#123;&#125;),</div><div class="line">		(<span class="string">'__new__'</span>, classmethod(</div><div class="line">			<span class="keyword">lambda</span> cls, *args, **kwargs: cls.__instances.setdefault(</div><div class="line">				(args, tuple(kwargs.items())),</div><div class="line">				super(type(cls), cls).__new__(*args, **kwargs))</div><div class="line">			)</div><div class="line">		)</div><div class="line">	])</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">#----------------------------------------------------------</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = metaflyweight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = metaflyweight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> Spam(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">is</span> Egg(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>, <span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> Egg(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Subclassing a flyweight class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSpam</span><span class="params">(Spam)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">assert</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">assert</span> Spam(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">is</span> <span class="keyword">not</span> SubSpam(<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><hr>
<h4 id="考虑到继承和反射。"><a href="#考虑到继承和反射。" class="headerlink" title="考虑到继承和反射。"></a>考虑到继承和反射。</h4><p>如果需要继承或者反射，装饰器的方式是无效的(装饰器版本、函数式装饰器版本)。实际上，在这些版本中没有办法直接访问最原始定义的那个享元类。一些类属性(type, docstring, name, super classes等)不再能够访问。基于同样原因，我们不能使用装饰器作为一个超类(即不能通过@derector的方式实现超类的功能)。</p>
<p>如果需要使用反射，一些超类的属性能够复制给被装饰对象。例如，通过手动或者functools模块中的<code>@wraps/@update_wrapper</code>。但是不是所有的属性都能够复制给被装饰对象。</p>
<p>如果需要使用继承，对于装饰器版本来说，需要通过<code>_cls</code>访问真正的享元类本身。对于函数式装饰器版本来说就完全没有办法了。</p>
<p>如果需要扩展享元类(添加属性、继承等），改善的装饰器版本更加适合。Mixin的版本也是可以直接使用的，因为处理了子类继承的问题。当然，超类的版本也运行的非常好，因为超类原本就是可以继承的。</p>
<h4 id="考虑到垃圾回收"><a href="#考虑到垃圾回收" class="headerlink" title="考虑到垃圾回收"></a>考虑到垃圾回收</h4><p>如果要应用在生产环境，这些实例需要考虑垃圾回收。实际上，因为享元工厂中的字典缓存了实例，实例会一直被引用。这些实例在整个程序生命周期都不能通过自动垃圾回收而收回，导致大量的内存使用量以及一些错误的行为。</p>
<p>如果希望享元模式能够如期望般运行，可以使用python的weakref模块中的<code>弱引用</code>(weak reference)。弱引用不会阻止垃圾回收机制的运行，当实例不再有引用时可以被正常的回收。另外weakref中有个对象叫做<code>WeakValueDictionary</code>，行为与<code>dict</code>一致不过其值自然是弱引用的。</p>
<h4 id="考虑到可用性"><a href="#考虑到可用性" class="headerlink" title="考虑到可用性"></a>考虑到可用性</h4><p>我们考虑两种截然不同的实现方式：</p>
<ol>
<li>代理享元类：享元类被封装到对象内，通过代理实现想要的功能。例如《设计模式》的工厂版本、装饰器版本。</li>
<li>修改享元类：将想要的功能直接添加入享元类中。例如改善的装饰器版本，超类版本，Mixin版本。</li>
</ol>
<p>从最终使用的角度考虑，所有的实现方式都是等价且透明的，只需要在超类、装饰器、mixin中3选1即可。</p>
<p>从元数据和继承的角度考虑，修改的方式比代理的方式更加合适。修改的方式也没有额外的开销，而代理的方式需要为每一个享元类额外创建一个(代理享元类的)对象。</p>
<p>然而，代理的方式比较普遍适用，而修改的方式只能适用于类。(不过鉴于python中一切皆对象的概念，修改的方式对函数也是可以的)</p>
<p>最后，代理和装饰器比超类和继承更加具有柔性，后者很难应用于已经实现了的类中。改进的装饰器版本看起来更加有意思（估计那个super(type(cls), cls)就够让人奇怪的了）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要翻译自&lt;a href=&quot;http://yloiseau.net/articles/DesignPatterns/flyweight/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Pattern and Python Flywei
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="design-pattern" scheme="http://fanchao01.github.io/blog/categories/python/design-pattern/"/>
    
      <category term="英文翻译" scheme="http://fanchao01.github.io/blog/categories/python/design-pattern/%E8%8B%B1%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Unix中的几种I/O模型</title>
    <link href="http://fanchao01.github.io/blog/2015/02/06/note-asynchrounous/"/>
    <id>http://fanchao01.github.io/blog/2015/02/06/note-asynchrounous/</id>
    <published>2015-02-06T08:00:00.000Z</published>
    <updated>2016-08-25T03:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/asyncio.gif" alt="image"></p>
<h2 id="对简单操作模型的理解"><a href="#对简单操作模型的理解" class="headerlink" title="对简单操作模型的理解"></a>对简单操作模型的理解</h2><hr>
<h3 id="堵塞与非堵塞"><a href="#堵塞与非堵塞" class="headerlink" title="堵塞与非堵塞"></a>堵塞与非堵塞</h3><ul>
<li><p>堵塞(blocking):</p>
<p>调用者(caller)必须等待操作完成才能返回。操作完成可能是异常、失败、返回空数据、返回不完整数据等。</p>
</li>
<li><p>非堵塞(non-blocking):</p>
<p>被调用者(call)立即返回，不会因为数据未到而等待。一般是指内核等待数据到达。</p>
</li>
</ul>
<p>无论是堵塞或者非堵塞，都可能返回空的数据，都需要数据从内核缓存区到用户缓存区的拷贝时间。堵塞操作可能因为信号、异常而失败，也可能因为对方关闭连接返回空的数据。非堵塞操作会直接返回空的数据或者已经存在的(部分)数据，不会等待要求的数据全部到达内核后才返回。</p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul>
<li><p>同步模型(synchronous)</p>
<p>同步模型是指操作顺序执行，前续操作和后续操作顺序执行，后续操作发生时前序逻辑已经完成。</p>
</li>
<li><p>异步模型(asynchronous)</p>
<p>异步模型是指操作顺序非顺序执行，后续操作执行时前序操作还未完成，前序操作可能在后台处理，可能挂起。</p>
</li>
</ul>
<p>同步与异步的主要区别是，在后续操作开始时前续操作是否真正完成，或者说在后续操作和前续操作之间是否能够执行其他的操作。</p>
<h2 id="对简单模型的类比"><a href="#对简单模型的类比" class="headerlink" title="对简单模型的类比"></a>对简单模型的类比</h2><hr>
<p>生活中我们会在医院取药，利用该场景做一个类比。药单是操作的对象，类比fd；药是数据，类比data；取药是操作，类比recv；取药系统、药剂师（护士）等类比操作系统。</p>
<h3 id="堵塞模型"><a href="#堵塞模型" class="headerlink" title="堵塞模型"></a>堵塞模型</h3><p>你拿着药单去药剂室取药5盒，把药单交给药剂师发起取药的操作，药剂师并不立刻回应你。你在窗口一直等(堵塞），药剂师拿到药单发现手头没有对应的药，于是自己或者让护士去库房取，等在库房取回后交给你，此次取药堵塞操作完成。但是你发现药剂师只给了你三盒，于是你又重复取药2盒的操作，这个时候药剂师拿到药单发现手头就有2盒，于是立马给你，此次堵塞操作也完成。或者药剂师拿到药单之后，突然出现意外你被赶跑了，此次堵塞取药操也完成，虽然你没有拿到药，但是被告知出意外了，你自己看着办吧。</p>
<h3 id="非堵塞模型"><a href="#非堵塞模型" class="headerlink" title="非堵塞模型"></a>非堵塞模型</h3><p>你又来取药，把药单交给药剂师发起取药操作，药剂师拿到药单发现手头没有对应的药，立马（非堵塞)告诉你没有药了，此次非堵塞取药操作完成。或者，药剂师手头正好有3盒立即给了你，此次非堵塞操作也完成。</p>
<p>可见，堵塞和非堵塞的重要区别是药剂师手头没有药时，他会让护士去取等回来再给你，还是立马告诉你没有。</p>
<h3 id="同步模型"><a href="#同步模型" class="headerlink" title="同步模型"></a>同步模型</h3><p>你再次来取药，无论是那种方式，你必须在取到药之间不能做其他任何的操作，即使你被堵塞在窗口等待药剂师去库房取药的时候。</p>
<h3 id="异步模型"><a href="#异步模型" class="headerlink" title="异步模型"></a>异步模型</h3><p>你最后一次取药，在把药单给药剂师之后和药拿到手之间，你可以干点别的事情，玩玩手机、听听音乐或者去其他窗口取别的药。</p>
<p>可见，同步与异步的区别在于你发起取药的操作和药到手之间，能不能干其他的事情。</p>
<h3 id="同步堵塞"><a href="#同步堵塞" class="headerlink" title="同步堵塞"></a>同步堵塞</h3><p>你在取药的过程中执行堵塞操作，直到药到手为止。</p>
<h3 id="同步非堵塞"><a href="#同步非堵塞" class="headerlink" title="同步非堵塞"></a>同步非堵塞</h3><p>同步非堵塞几乎没什么用，你把药单给药剂师，但是药剂师手头没有药立马告诉你，你需要再次发起取药操作直到拿到药。这个就是轮询模式，还不如同步堵塞，因为浪费了药剂师（系统）不断回应你的时间。</p>
<h3 id="异步堵塞"><a href="#异步堵塞" class="headerlink" title="异步堵塞"></a>异步堵塞</h3><p>现实中几乎没用的模型，因为你总是等待取药，在这期间不能干别的，因为只有1个你。但是在计算机的世界中你会分身术(线程)，你的分身可以去做别的事情。</p>
<h3 id="异步非堵塞"><a href="#异步非堵塞" class="headerlink" title="异步非堵塞"></a>异步非堵塞</h3><p>异步非阻塞模型通常是（框架给）用户使用的模型，你去取药，把药单交给药剂师，然后不等待结果自己就走了，待药从库房拿到后药剂师再想法设法给你。</p>
<h3 id="异步的几种接口"><a href="#异步的几种接口" class="headerlink" title="异步的几种接口"></a>异步的几种接口</h3><hr>
<p>药剂师的<code>想方设法</code>就是不同的表现形式，异步接口：</p>
<ul>
<li><p>事件通知</p>
<p>医院很先进，你把药单给药剂师后，自己去干别的，等广播你的名字后，你再去取药。这个是事件通知。</p>
</li>
<li><p>回调</p>
<p>医院护士很多，你把药单给药剂师并且把自己喝多少药之类的也一并交代。等药取到后，药剂师派个小护士直接把药给你灌下去。这个是回调，需要先定义后续操作逻辑（喝药），再注册（在取药的时候告诉药剂师）。</p>
</li>
<li><p>占位符</p>
<p>你把药单给药剂师，药剂师给你的是药盒子，你以为拿到了真实的药，然后去进行打热水、打开盒子、拿药的一些列操作，等你真正喝药的时候，药会被药剂师偷偷摸摸的放入盒子里，这需要特殊的药盒子。</p>
</li>
<li><p>状态</p>
<p>类似事件通知，但不是直接通知你，而是有个大屏幕。当药剂师从库房拿到药时会在大屏幕打出你的名字，于是你再次跑到窗口拿到药。</p>
<p>如果你同时需要取药、打针两件事请，你分别在医药窗口和注射窗口提交了单据。当轮到你的时候，大屏幕只出现你的名字，你不得已只好挨个问哪个窗口准备好了（select）。</p>
<p>但是另外一个医院很先进，不仅打出你的名字还打出窗口号，于是你直接去已经准备好的窗口即可（epoll）。</p>
</li>
</ul>
<h2 id="Unix下的几种IO模型"><a href="#Unix下的几种IO模型" class="headerlink" title="Unix下的几种IO模型"></a>Unix下的几种IO模型</h2><hr>
<p>说完简单的类比回到Unix平台。在Unix(linux)平台下有<a href="http://english.tebyan.net/newindex.aspx?pid=31159&amp;BookID=23760&amp;PageIndex=92&amp;Language=3#ch06fig01" target="_blank" rel="external">五种I/O模型</a>：</p>
<ul>
<li>堵塞I/O模型(blocking I/O)</li>
<li>非堵塞I/O模型(un-blocking I/O)</li>
<li>I/O多路复用模型(select, poll, epoll)</li>
<li>信号驱动I/O模型(SIGIO)</li>
<li>异步I/O模型(posix aio_functions)</li>
</ul>
<p>I/O操作一般分为两个阶段：</p>
<ol>
<li>等待数据达到内核缓存区</li>
<li>将数据从内核拷贝到用户进程 </li>
</ol>
<p>我们用<code>recvfrom</code>定义操作，并且将数据分为在内核缓冲区和用户进程缓冲区。</p>
<h3 id="堵塞I-O模型"><a href="#堵塞I-O模型" class="headerlink" title="堵塞I/O模型"></a>堵塞I/O模型</h3><p><img src="/blog/images/blockingio.gif" alt="image"></p>
<p>堵塞I/O模型中，先在内核中等待数据到来，再等待数据从内核拷贝到用户进程，两个阶段都被堵塞。下图是简单的一问一答堵塞型的服务器。</p>
<p><img src="/blog/images/blockingio_server.jpg" alt="image"></p>
<h3 id="非堵塞I-O模型"><a href="#非堵塞I-O模型" class="headerlink" title="非堵塞I/O模型"></a>非堵塞I/O模型</h3><p><img src="/blog/images/nonblockingio.gif" alt="image"></p>
<p>非堵塞I/O模型中操作<code>recvfrom</code>立即返回，为了得到完整数据需要不断的发起操作，这个就是轮询。<code>recvfrom</code>实际上有两个作用，第一询问数据是否到来，第二得到数据。</p>
<h3 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a>I/O多路复用</h3><p>I/O多路复用是同步还是异步比较模糊。像上面那样轮询一个fd效率比较底下，多路复用一次可以询问多个fd的数据是否到来。于是，将<code>recvfrom</code>的两个作用拆分成2个函数ask和read，ask堵塞（非堵塞没有意义）的一次询问多个fd，任何一个fd的数据到达就返回，然后再发起非堵塞read操作。如果ask的返回不能确定哪个fd的数据准备好了，就是select模型；如果同时返回确定的已准备好数据的fd，就是epoll模型。 </p>
<p>站在处理所有fd的角度，多路复用I/O依然是同步堵塞模型；但是站在每个fd的角度（每个IO操作的角度），处理单个fd的整个I/O操作时也处理了其他fd的I/O操作，因此是异步；而且每个fd都需要等待数据从内核拷贝到用户缓冲区，因此也是堵塞操作。所以一般认为I/O多路复用是异步堵塞模型。（通过把这种模型新起个个名字可以看出确实比较难以用堵塞/非堵塞、同步/异步来定义）</p>
<p><img src="/blog/images/multiplexingio.gif" alt="image"> </p>
<h3 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h3><p>该异步I/O完全符合异步的要求，在调用时立即返回并且在数据到达后通过信号来通知进程。Unix类系统最常见的异步是回调，通过注册回调由内核在事件发生时调用，例如信号。在这里等于是把事件（数据到达）通过信号的方式通知用户让用户去处理了。需要注意异步I/O没有堵塞，发起操作后立即返回，当信号到来时数据已经被拷贝到用户缓冲区中了。</p>
<p><img src="/blog/images/asyncingio.gif" alt="image"> </p>
<h2 id="完整的I-O模型定义"><a href="#完整的I-O模型定义" class="headerlink" title="完整的I/O模型定义"></a>完整的I/O模型定义</h2><hr>
<ul>
<li>A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;</li>
<li><p>An asynchronous I/O operation does not cause the requesting process to be blocked;</p>
</li>
<li><p>异步同步通过在一完整的I/O操作时是不是有其他I/O操作来判断。无论是等待数据到达内核，还是等待数据从内核缓冲区拷贝到用户缓冲区都是堵塞模型。</p>
</li>
</ul>
<h2 id="几种不同I-O模型的异同"><a href="#几种不同I-O模型的异同" class="headerlink" title="几种不同I/O模型的异同"></a>几种不同I/O模型的异同</h2><hr>
<p><img src="/blog/images/ios.gif" alt="image"> </p>
<p>简单总结：</p>
<ol>
<li>异步非堵塞I/O模型，内核帮用户完成了整个数据的传送。</li>
<li>堵塞I/O模型，用户需要至少等待一个阶段的I/O传送。</li>
<li>异步模型，用户在完成一次I/O操作期间，可以进行其他的I/O操作。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/images/asyncio.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;对简单操作模型的理解&quot;&gt;&lt;a href=&quot;#对简单操作模型的理解&quot; class=&quot;headerlink&quot; title=&quot;对简单操作模型的理解&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="linux" scheme="http://fanchao01.github.io/blog/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>tornado中一些通用的函数和类</title>
    <link href="http://fanchao01.github.io/blog/2015/01/19/python-tornado-utils/"/>
    <id>http://fanchao01.github.io/blog/2015/01/19/python-tornado-utils/</id>
    <published>2015-01-19T08:00:00.000Z</published>
    <updated>2016-08-25T03:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><hr>
<p>本篇记录tornado源代码阅读过程中一些有意思的函数和类等，偏向于python编程技巧语法等。</p>
<h3 id="ObjectDict"><a href="#ObjectDict" class="headerlink" title="ObjectDict"></a>ObjectDict</h3><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectDict</span><span class="params">(dict)</span>:</span></div><div class="line">    <span class="string">"""Makes a dictionary behave like an object, with attribute-style access.</span></div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[name]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">        self[name] = value</div><div class="line"></div><div class="line">od = ObjectDict()</div><div class="line">od.a = <span class="number">1</span></div><div class="line">od[<span class="string">'a'</span>]		<span class="comment"># 1</span></div><div class="line">od.a		<span class="comment"># 1</span></div></pre></td></tr></table></figure>
<h3 id="import-object"><a href="#import-object" class="headerlink" title="import_object"></a>import_object</h3><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_object</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="string">"""Imports an object by name.</span></div><div class="line"></div><div class="line">    import_object('x') is equivalent to 'import x'.</div><div class="line">    import_object('x.y.z') is equivalent to 'from x.y import z'.</div><div class="line"></div><div class="line">    &gt;&gt;&gt; import tornado.escape</div><div class="line">    &gt;&gt;&gt; import_object('tornado.escape') is tornado.escape</div><div class="line">    True</div><div class="line">    &gt;&gt;&gt; import_object('tornado.escape.utf8') is tornado.escape.utf8</div><div class="line">    True</div><div class="line">    &gt;&gt;&gt; import_object('tornado') is tornado</div><div class="line">    True</div><div class="line">    &gt;&gt;&gt; import_object('tornado.missing_module')</div><div class="line">    Traceback (most recent call last):</div><div class="line">        ...</div><div class="line">    ImportError: No module named missing_module</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> name.count(<span class="string">'.'</span>) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> __import__(name, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">    parts = name.split(<span class="string">'.'</span>)</div><div class="line">    obj = __import__(<span class="string">'.'</span>.join(parts[:<span class="number">-1</span>]), <span class="keyword">None</span>, <span class="keyword">None</span>, [parts[<span class="number">-1</span>]], <span class="number">0</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> getattr(obj, parts[<span class="number">-1</span>])</div><div class="line">    <span class="keyword">except</span> AttributeError:</div><div class="line">        <span class="keyword">raise</span> ImportError(<span class="string">"No module named %s"</span> % parts[<span class="number">-1</span>])</div></pre></td></tr></table></figure>
<p>比<code>importlib.import_module</code>更加方便，<code>import_object</code>可以直接导入模块或者属性，而前者只能导入模块。另外注意两个函数都是将导入的对象返回，而不是将其暴露在当前域名中， 和<code>import</code>有差距。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import_object(<span class="string">'os'</span>)</div><div class="line">os	<span class="comment">#NameError</span></div><div class="line"></div><div class="line">path_exists = import_object(<span class="string">'os.path.exists'</span>)</div><div class="line"><span class="comment"># from  os.path import exists as path_exists</span></div><div class="line"></div><div class="line"><span class="comment">####################</span></div><div class="line">mypath = importlib.import_module(<span class="string">'.path'</span>, <span class="string">'os'</span>)</div><div class="line"><span class="comment"># from os import path as mypath</span></div></pre></td></tr></table></figure>
<p>### </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt; &lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;本篇记录tornado源代码阅读过程中一些有意思的函数和类等，偏向于python编程技巧语法等。&lt;/p&gt;
&lt;h3 id=&quot;ObjectDict
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="tornado" scheme="http://fanchao01.github.io/blog/categories/python/tornado/"/>
    
    
  </entry>
  
  <entry>
    <title>tornado源码分析-1</title>
    <link href="http://fanchao01.github.io/blog/2015/01/18/python-tornado/"/>
    <id>http://fanchao01.github.io/blog/2015/01/18/python-tornado/</id>
    <published>2015-01-18T08:00:00.000Z</published>
    <updated>2016-10-18T12:32:23.874Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/asyncingio.gif" alt="image"></p>
<h3 id="一个简单的tornado应用实例"><a href="#一个简单的tornado应用实例" class="headerlink" title="一个简单的tornado应用实例"></a>一个简单的tornado应用实例</h3><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tornado.ioloop</div><div class="line"><span class="keyword">import</span> tornado.web</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        self.write(<span class="string">"Hello, world"</span>)</div><div class="line"></div><div class="line">application = tornado.web.Application([</div><div class="line">    (<span class="string">r"/"</span>, MainHandler),</div><div class="line">])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    application.listen(<span class="number">8888</span>)</div><div class="line">    tornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>
<p>tornado框架以<code>Application</code>为入口，以<code>RequestHandler</code>为接口，以<code>IOLoop</code>为核心进行构建。上面的例子创建了一个简单的<code>Hello，World</code>程序。tornado以异步高性能为目的，采用异步非堵塞网络IO模型，低层利用<code>epoll</code>（linux平台），特别适合高性能长连接的应用场景。</p>
<h3 id="异步非堵塞编程模型"><a href="#异步非堵塞编程模型" class="headerlink" title="异步非堵塞编程模型"></a><a href="http://www.tornadoweb.org/en/stable/guide/async.html" target="_blank" rel="external">异步非堵塞编程模型</a></h3><hr>
<p>异步函数]，会在结束所有操作前就返回，其中的一些操作（特别是耗时间的IO操作）会交给后台去运行，这些操作完成后再触发应用中的其它函数逻辑。一般有4种类型的异步接口：</p>
<ul>
<li>回调参数。<br>通过参数传入callback等待完成后再进行最后的callback操作。<br><code>asynchronous_fetch-&gt;http_client.fetch-&gt;handle_respones-&gt;callback</code>，</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tornado.httpclient <span class="keyword">import</span> AsyncHTTPClient</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">asynchronous_fetch</span><span class="params">(url, callback)</span>:</span></div><div class="line">    http_client = AsyncHTTPClient()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_response</span><span class="params">(response)</span>:</span></div><div class="line">        callback(response.body)</div><div class="line">    http_client.fetch(url, callback=handle_response)</div></pre></td></tr></table></figure>
<ul>
<li>返回一个占位实例。<br>通过两个Future实例完成一步步的回调，事件通知或者订阅者-发布者模型。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tornado.concurrent <span class="keyword">import</span> Future</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_fetch_future</span><span class="params">(url)</span>:</span></div><div class="line">    http_client = AsyncHTTPClient()</div><div class="line">    my_future = Future()</div><div class="line">    fetch_future = http_client.fetch(url)</div><div class="line">    fetch_future.add_done_callback(</div><div class="line">        <span class="keyword">lambda</span> f: my_future.set_result(f.result()))</div><div class="line">    <span class="keyword">return</span> my_future</div></pre></td></tr></table></figure>
<ul>
<li><p>提交给队列。<br><code>nose.js</code>是这种模型，每个操作是一个事件提交给后台的其他线程库，完成后再交给主线程中的队列进行回调操作。</p>
</li>
<li><p>回调注册。<br><code>POSIX</code>信号是这种模型，通过注册回调函数。（这里我还不太清楚与回调参数有什么不同）</p>
</li>
</ul>
<p>无论是哪种形式，异步模型都有一些通用逻辑，可以分为<code>堵塞前操作</code>，<code>堵塞操作</code>，<code>通知</code>，<code>堵塞后操作</code>。</p>
<ul>
<li><code>堵塞前操作</code>，立即完成的，发生在堵塞操作前的逻辑。</li>
<li><code>堵塞操作</code>，堵塞操作，主要需要解决的部分。</li>
<li><code>通知</code>，堵塞操作完成后，如何通知已经完成了堵塞操作</li>
<li><code>堵塞后操作</code>，堵塞操作完成后的逻辑，一般处理堵塞操作的返回值。</li>
</ul>
<p>同步堵塞模型比较简单，所有逻辑操作都捆绑在一起，没有也不必进行<code>通知</code>。异步非堵塞模型需要重点处理<code>堵塞操作</code>和<code>通知</code>。一般的异步非堵塞使用callback模型，将<code>堵塞前操作</code>和<code>堵塞后逻辑</code>显式分开，通过向<code>堵塞操作</code>传递<code>堵塞后操作</code>进行<code>通知</code>机制（callback）。</p>
<h3 id="tornado中的异步非堵塞模型"><a href="#tornado中的异步非堵塞模型" class="headerlink" title="tornado中的异步非堵塞模型"></a>tornado中的异步非堵塞模型</h3><hr>
<p>tornado的异步接口利用Python的协程语法<code>yield</code>可以暂停操作，将<code>堵塞逻辑</code>、<code>通知</code>和<code>堵塞后操作</code>捆绑到一起，不用显式的拆分最大限度的保持和同步接口的一致性。通过<code>yield</code>让出<code>堵塞操作</code>交给<code>IOLoop</code>统一处理，再通过<code>Future</code>机制进行<code>通知</code>机制。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> gen</div><div class="line"></div><div class="line"><span class="meta">@gen.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_coroutine</span><span class="params">(url)</span>:</span></div><div class="line">    http_client = AsyncHTTPClient()		<span class="comment"># 堵塞前操作</span></div><div class="line">    response = <span class="keyword">yield</span> http_client.fetch(url)	<span class="comment"># 堵塞操作</span></div><div class="line">    <span class="keyword">return</span> response.body	<span class="comment"># 堵塞后操作</span></div></pre></td></tr></table></figure>
<p>tornado的异步堵塞模型低层采用<code>epoll</code>模型，通过（隐式）<code>Future</code>机制进行回调通知，通过<code>IOLoop</code>处理堵塞操作。简单的<code>IOLoop</code>逻辑示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Simplified inner loop of tornado.gen.Runner</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># send(x) makes the current yield return x.</span></div><div class="line">    <span class="comment"># It returns when the next yield is reached</span></div><div class="line">    future = self.gen.send(self.next) </div><div class="line">	<span class="comment"># 通过send 通知 协程进行 堵塞后操作</span></div><div class="line">	<span class="comment"># future衔接 堵塞前和堵塞后的逻辑</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(f)</span>:</span></div><div class="line">        self.next = f.result()</div><div class="line">        self.run()</div><div class="line"></div><div class="line">    future.add_done_callback(callback)</div><div class="line">	<span class="comment"># 向future中注册辅助函数，进行回调后的通知</span></div></pre></td></tr></table></figure>
<h3 id="tornado中核心类"><a href="#tornado中核心类" class="headerlink" title="tornado中核心类"></a>tornado中核心类</h3><hr>
<p>tornado主要有两个核心类，<code>IOLoop</code>封装低层<code>epoll</code>集中处理堵塞操作。<code>iostream</code>封装<code>read、write</code>函数进行缓存和更方便的处理HTTP协议。具体分析稍后进行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/images/asyncingio.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一个简单的tornado应用实例&quot;&gt;&lt;a href=&quot;#一个简单的tornado应用实例&quot; class=&quot;headerlink&quot; title=&quot;一
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
      <category term="tornado" scheme="http://fanchao01.github.io/blog/categories/python/tornado/"/>
    
    
  </entry>
  
  <entry>
    <title>Python中的单例模式</title>
    <link href="http://fanchao01.github.io/blog/2015/01/17/python-parttern/"/>
    <id>http://fanchao01.github.io/blog/2015/01/17/python-parttern/</id>
    <published>2015-01-17T08:00:00.000Z</published>
    <updated>2016-08-25T03:44:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>(梳理下python中的设计模式。这里面的设计模式不仅仅是传统意义中的设计模式，还有python中的一些惯用法。）</p>
<h3 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h3><hr>
<p>单例模式的用途与全局变量一样，提供全局共享的唯一数据。单例模式封装数据和操作方法，需要保证方法返回的值一致（不变），并且单利模式类的初始化函数一般不能有参数。使用场景长见于处理和保存配置文件、只会实例化一次的实例等等。</p>
<h4 id="1-一般的单例模式，利用锁保证一致性。"><a href="#1-一般的单例模式，利用锁保证一致性。" class="headerlink" title="1. 一般的单例模式，利用锁保证一致性。"></a>1. 一般的单例模式，利用锁保证一致性。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">	_singleton_lock = threading.Lock()</div><div class="line"></div><div class="line"><span class="meta">	@classmethod</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(cls)</span>:</span></div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">			<span class="keyword">with</span> cls._singleton_lock:</div><div class="line">				<span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">					cls._instance = cls()</div><div class="line">		<span class="keyword">return</span> cls._instance</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">'ok'</span>)</div><div class="line"></div><div class="line"><span class="keyword">assert</span> Singleton.instance() <span class="keyword">is</span> Singleton.instance()		<span class="comment">#True</span></div></pre></td></tr></table></figure>
<div>

<h4 id="2-python的单利模式，利用-new-返回唯一的实例。"><a href="#2-python的单利模式，利用-new-返回唯一的实例。" class="headerlink" title="2. python的单利模式，利用__new__返回唯一的实例。"></a>2. python的单利模式，利用<code>__new__</code>返回唯一的实例。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PySingleton</span><span class="params">(object)</span>:</span></div><div class="line">	_singleton_lock = threading.Lock()</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">			<span class="keyword">with</span> cls._singleton_lock:</div><div class="line">				<span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">					cls._instance = super(PySingleton, cls).__new__(cls, *args, **kwargs)</div><div class="line">		<span class="keyword">return</span> cls._instance</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">'init runs once'</span></div><div class="line"></div><div class="line">ps1 = PySingleton()		<span class="comment">#init runs once</span></div><div class="line">ps2 = PySingleton()		<span class="comment">#init runs once</span></div><div class="line"><span class="keyword">assert</span> ps1 <span class="keyword">is</span> ps2		<span class="comment">#True</span></div></pre></td></tr></table></figure>
<p>Python的<code>__new__</code>特殊方法会多次调用初始化函数<code>__init__</code>，导致这个唯一的实例反复初始化。</p>
<h4 id="3-模块单例"><a href="#3-模块单例" class="headerlink" title="3. 模块单例"></a>3. 模块单例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#singleton.py  # 文件</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Singleton</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">	@classmethod</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(cls)</span>:</span></div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">			cls._instance = cls()</div><div class="line"></div><div class="line">		<span class="keyword">return</span> cls._instance</div><div class="line">			</div><div class="line">Singleton = _Singleton()</div><div class="line"></div><div class="line"><span class="keyword">del</span> _Singleton</div><div class="line"></div><div class="line"><span class="comment">#other.py</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> singleton <span class="keyword">import</span> Singleton</div><div class="line"></div><div class="line">Singleton.instance().start()	<span class="comment"># 或者直接使用Singleton实例</span></div></pre></td></tr></table></figure>
<p><code>import</code>有锁机制，不需要再使用锁进行并行保护；<code>classmethod</code>类方法可以通过方法和实例调用。</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(梳理下python中的设计模式。这里面的设计模式不仅仅是传统意义中的设计模式，还有python中的一些惯用法。）&lt;/p&gt;
&lt;h3 id=&quot;单例模式-Singleton&quot;&gt;&lt;a href=&quot;#单例模式-Singleton&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="python" scheme="http://fanchao01.github.io/blog/categories/python/"/>
    
    
  </entry>
  
</feed>
